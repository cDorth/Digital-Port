{"file_contents":{"README.md":{"content":"Super Admin: admin@admin.com / Admin@123\nRegular Admin: jane@example.com / admin123\nRegular User: john@example.com / password123\n","size_bytes":129},"api_routes.py":{"content":"from flask import jsonify, request, current_app\nfrom flask_login import current_user, login_required\nimport json\nfrom datetime import datetime, date\nfrom sqlalchemy import func, desc, or_\nimport re\n\ndef init_api_routes(app):\n    \n    @app.route('/api/recommendations', methods=['POST'])\n    def get_ai_recommendations():\n        \"\"\"Get AI-powered project recommendations\"\"\"\n        from models import Project, Tag, Category\n        from app import db\n        try:\n            data = request.get_json()\n            project_id = data.get('projectId')\n            tags = data.get('tags', [])\n            category = data.get('category', '')\n            description = data.get('description', '')\n            \n            if not project_id:\n                return jsonify({'error': 'Project ID required'}), 400\n            \n            # Get current project\n            current_project = Project.query.get(project_id)\n            if not current_project:\n                return jsonify({'error': 'Project not found'}), 404\n            \n            # Find similar projects using multiple criteria\n            recommendations = []\n            \n            # 1. Tag-based similarity\n            if tags:\n                tag_projects = Project.query.join(Project.tags).filter(\n                    Tag.name.in_(tags),\n                    Project.id != project_id,\n                    Project.is_published == True\n                ).distinct().all()\n                \n                for project in tag_projects:\n                    common_tags = set(tags) & set([tag.name for tag in project.tags])\n                    score = len(common_tags) / len(tags) if tags else 0\n                    recommendations.append({\n                        'project': project,\n                        'score': score * 0.4,\n                        'type': 'tag'\n                    })\n            \n            # 2. Category-based similarity\n            if category:\n                category_projects = Project.query.join(Category).filter(\n                    Category.name == category,\n                    Project.id != project_id,\n                    Project.is_published == True\n                ).all()\n                \n                for project in category_projects:\n                    recommendations.append({\n                        'project': project,\n                        'score': 0.3,\n                        'type': 'category'\n                    })\n            \n            # 3. Content-based similarity (simple keyword matching)\n            if description:\n                description_words = set(re.findall(r'\\w+', description.lower()))\n                content_projects = Project.query.filter(\n                    Project.id != project_id,\n                    Project.is_published == True\n                ).all()\n                \n                for project in content_projects:\n                    project_words = set(re.findall(r'\\w+', (project.description + ' ' + (project.content or '')).lower()))\n                    common_words = description_words & project_words\n                    \n                    if common_words:\n                        score = len(common_words) / max(len(description_words), len(project_words))\n                        if score > 0.1:  # Only consider if similarity > 10%\n                            recommendations.append({\n                                'project': project,\n                                'score': score * 0.3,\n                                'type': 'content'\n                            })\n            \n            # Combine and rank recommendations\n            project_scores = {}\n            for rec in recommendations:\n                project_id = rec['project'].id\n                if project_id in project_scores:\n                    project_scores[project_id]['score'] += rec['score']\n                else:\n                    project_scores[project_id] = {\n                        'project': rec['project'],\n                        'score': rec['score'],\n                        'types': [rec['type']]\n                    }\n            \n            # Sort by score and take top 3\n            sorted_recommendations = sorted(\n                project_scores.values(),\n                key=lambda x: x['score'],\n                reverse=True\n            )[:3]\n            \n            # Format response\n            response_data = []\n            for rec in sorted_recommendations:\n                project = rec['project']\n                response_data.append({\n                    'id': project.id,\n                    'title': project.title,\n                    'description': project.description,\n                    'image_filename': project.image_filename,\n                    'tags': [tag.name for tag in project.tags] if project.tags else [],\n                    'category': project.category.name if project.category else '',\n                    'likes_count': project.likes_count,\n                    'demo_url': project.demo_url,\n                    'github_url': project.github_url,\n                    'similarity_score': round(rec['score'], 2),\n                    'similarity_types': rec['types']\n                })\n            \n            return jsonify({\n                'recommendations': response_data,\n                'total': len(response_data)\n            })\n            \n        except Exception as e:\n            current_app.logger.error(f\"Recommendation error: {str(e)}\")\n            return jsonify({'error': 'Failed to generate recommendations'}), 500\n    \n    @app.route('/api/timeline')\n    def get_timeline_data():\n        \"\"\"Get career timeline events\"\"\"\n        from models import TimelineEvent\n        try:\n            events = TimelineEvent.query.filter_by(is_published=True).order_by(TimelineEvent.event_date).all()\n            \n            timeline_data = []\n            for event in events:\n                event_data = {\n                    'id': event.id,\n                    'title': event.title,\n                    'description': event.description,\n                    'date': event.event_date.isoformat(),\n                    'type': event.event_type,\n                    'importance': event.importance,\n                    'image': f'/static/uploads/{event.image_filename}' if event.image_filename else None,\n                    'external_url': event.external_url,\n                    'project_id': event.project_id\n                }\n                \n                # Parse event_metadata if exists\n                if event.event_metadata:\n                    try:\n                        metadata = json.loads(event.event_metadata)\n                        event_data['technologies'] = metadata.get('technologies', [])\n                        event_data['achievements'] = metadata.get('achievements', [])\n                    except:\n                        pass\n                \n                timeline_data.append(event_data)\n            \n            return jsonify({\n                'timeline': timeline_data,\n                'total': len(timeline_data)\n            })\n            \n        except Exception as e:\n            current_app.logger.error(f\"Timeline error: {str(e)}\")\n            return jsonify({'error': 'Failed to load timeline data'}), 500\n    \n    @app.route('/api/skills')\n    def get_skills_data():\n        \"\"\"Get all skills data\"\"\"\n        from models import Skill\n        try:\n            skills = Skill.query.order_by(desc(Skill.level)).all()\n            \n            skills_data = []\n            for skill in skills:\n                skills_data.append({\n                    'id': skill.id,\n                    'name': skill.name,\n                    'level': skill.level,\n                    'experience_years': skill.experience_years,\n                    'description': skill.description,\n                    'icon': skill.icon,\n                    'color': skill.color,\n                    'projects': skill.projects_count\n                })\n            \n            return jsonify({\n                'skills': skills_data,\n                'total': len(skills_data)\n            })\n            \n        except Exception as e:\n            current_app.logger.error(f\"Skills error: {str(e)}\")\n            return jsonify({'error': 'Failed to load skills data'}), 500\n    \n    @app.route('/api/skills/compare', methods=['POST'])\n    def compare_skills():\n        \"\"\"Compare two skills and return detailed analysis\"\"\"\n        from models import Skill, ProjectSkill, Project\n        from app import db\n        try:\n            data = request.get_json()\n            skill1_id = data.get('skill1_id')\n            skill2_id = data.get('skill2_id')\n            \n            if not skill1_id or not skill2_id:\n                return jsonify({'error': 'Both skill IDs required'}), 400\n            \n            skill1 = Skill.query.get(skill1_id)\n            skill2 = Skill.query.get(skill2_id)\n            \n            if not skill1 or not skill2:\n                return jsonify({'error': 'One or both skills not found'}), 404\n            \n            # Get projects for each skill\n            skill1_projects = db.session.query(Project).join(ProjectSkill).filter(\n                ProjectSkill.skill_id == skill1_id,\n                Project.is_published == True\n            ).all()\n            \n            skill2_projects = db.session.query(Project).join(ProjectSkill).filter(\n                ProjectSkill.skill_id == skill2_id,\n                Project.is_published == True\n            ).all()\n            \n            # Calculate metrics\n            def calculate_complexity_avg(projects, skill_id):\n                if not projects:\n                    return 0\n                \n                complexities = []\n                for project in projects:\n                    project_skill = ProjectSkill.query.filter_by(\n                        project_id=project.id, \n                        skill_id=skill_id\n                    ).first()\n                    if project_skill:\n                        complexities.append(project_skill.proficiency_used)\n                \n                return round(sum(complexities) / len(complexities) if complexities else 0, 1)\n            \n            # Format project data\n            def format_projects(projects, skill_id):\n                formatted = []\n                for project in projects[:6]:  # Limit to 6 projects\n                    project_skill = ProjectSkill.query.filter_by(\n                        project_id=project.id,\n                        skill_id=skill_id\n                    ).first()\n                    \n                    formatted.append({\n                        'id': project.id,\n                        'title': project.title,\n                        'description': project.description,\n                        'completion_year': project.created_at.year,\n                        'complexity': project_skill.proficiency_used if project_skill else 5,\n                        'url': f'/project/{project.id}',\n                        'is_primary': project_skill.is_primary if project_skill else False\n                    })\n                \n                return formatted\n            \n            response_data = {\n                'skill1_projects': format_projects(skill1_projects, skill1_id),\n                'skill2_projects': format_projects(skill2_projects, skill2_id),\n                'metrics': {\n                    'skill1': {\n                        'proficiency': skill1.level,\n                        'projects_count': len(skill1_projects),\n                        'experience_years': skill1.experience_years,\n                        'complexity_avg': calculate_complexity_avg(skill1_projects, skill1_id)\n                    },\n                    'skill2': {\n                        'proficiency': skill2.level,\n                        'projects_count': len(skill2_projects),\n                        'experience_years': skill2.experience_years,\n                        'complexity_avg': calculate_complexity_avg(skill2_projects, skill2_id)\n                    }\n                }\n            }\n            \n            return jsonify(response_data)\n            \n        except Exception as e:\n            current_app.logger.error(f\"Skills comparison error: {str(e)}\")\n            return jsonify({'error': 'Failed to compare skills'}), 500\n\n    @app.route('/api/save-language-preference', methods=['POST'])\n    @login_required\n    def save_language_preference():\n        \"\"\"Save user language preference\"\"\"\n        from app import db\n        try:\n            data = request.get_json()\n            language = data.get('language')\n            \n            if language not in ['pt-BR', 'en']:\n                return jsonify({'error': 'Invalid language'}), 400\n            \n            current_user.preferred_language = language\n            db.session.commit()\n            \n            return jsonify({'success': True, 'language': language})\n            \n        except Exception as e:\n            current_app.logger.error(f\"Language preference save error: {str(e)}\")\n            return jsonify({'error': 'Failed to save language preference'}), 500\n\n    @app.route('/api/toggle-like/<int:project_id>', methods=['POST'])\n    @login_required\n    def api_toggle_like(project_id):\n        \"\"\"Toggle like status for a project with duplicate prevention\"\"\"\n        try:\n            from models import Like, Project\n            \n            project = Project.query.get_or_404(project_id)\n            \n            # Check if user already liked this project\n            existing_like = Like.query.filter_by(\n                user_id=current_user.id,\n                project_id=project_id\n            ).first()\n            \n            if existing_like:\n                # Unlike - remove the like\n                db.session.delete(existing_like)\n                liked = False\n            else:\n                # Like - add new like\n                new_like = Like(user_id=current_user.id, project_id=project_id)\n                db.session.add(new_like)\n                liked = True\n            \n            db.session.commit()\n            \n            # Get updated like count\n            likes_count = Like.query.filter_by(project_id=project_id).count()\n            \n            return jsonify({\n                'success': True,\n                'liked': liked,\n                'likes_count': likes_count\n            })\n            \n        except Exception as e:\n            db.session.rollback()\n            current_app.logger.error(f\"Toggle like error: {str(e)}\")\n            return jsonify({'error': 'Erro ao processar curtida'}), 500\n\n    @app.route('/api/add-comment/<int:project_id>', methods=['POST'])\n    @login_required  \n    def api_add_comment(project_id):\n        \"\"\"Add comment to project with validation\"\"\"\n        try:\n            from models import Comment, Project\n            \n            data = request.get_json()\n            content = data.get('content', '').strip()\n            \n            # Validation\n            if not content:\n                return jsonify({'error': 'Comentário não pode estar vazio'}), 400\n                \n            if len(content) > 1000:\n                return jsonify({'error': 'Comentário muito longo (máximo 1000 caracteres)'}), 400\n            \n            # Check if project exists\n            project = Project.query.get_or_404(project_id)\n            \n            # Create new comment\n            new_comment = Comment(\n                content=content,\n                user_id=current_user.id,\n                project_id=project_id\n            )\n            \n            db.session.add(new_comment)\n            db.session.commit()\n            \n            # Get total comments count\n            total_comments = Comment.query.filter_by(project_id=project_id).count()\n            \n            # Return comment data\n            comment_data = {\n                'id': new_comment.id,\n                'content': new_comment.content,\n                'author_name': current_user.full_name or current_user.username,\n                'created_at': new_comment.created_at.isoformat(),\n                'project_id': project_id\n            }\n            \n            return jsonify({\n                'success': True,\n                'comment': comment_data,\n                'total_comments': total_comments\n            })\n            \n        except Exception as e:\n            db.session.rollback()\n            current_app.logger.error(f\"Add comment error: {str(e)}\")\n            return jsonify({'error': 'Erro ao adicionar comentário'}), 500","size_bytes":16557},"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\n# Create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\")\nif not app.secret_key:\n    raise RuntimeError(\"SESSION_SECRET environment variable must be set\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Configure the database - PostgreSQL (integrated Replit database)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\napp.config[\"UPLOAD_FOLDER\"] = \"static/uploads\"\napp.config[\"MAX_CONTENT_LENGTH\"] = 16 * 1024 * 1024  # 16MB max file size\n\n# Initialize the app with the extension\ndb.init_app(app)\n\n# Initialize Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'login'  # type: ignore\nlogin_manager.login_message = 'Please log in to access this page.'\nlogin_manager.login_message_category = 'info'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    from models import User\n    return User.query.get(int(user_id))\n\nwith app.app_context():\n    # Make sure to import the models here or their tables won't be created\n    import models  # noqa: F401\n    \n    # Create all tables if they don't exist\n    db.create_all()\n    \n    # Superadmin seeding disabled for security\n    \n    # GitHub credentials configured for on-demand sync\n    logging.info(\"GitHub sync system initialized\")\n    \n    # Auto-configure GitHub credentials and sync repositories\n    try:\n        from crypto_utils import crypto_manager\n        from github_client import GitHubClient\n        from github_sync import GitHubSyncService\n        \n        # Check if GITHUB_TOKEN exists\n        github_token = os.environ.get('GITHUB_TOKEN')\n        if not github_token:\n            logging.warning(\"=\"*80)\n            logging.warning(\"GITHUB_TOKEN não configurado!\")\n            logging.warning(\"Para carregar automaticamente seus projetos GitHub:\")\n            logging.warning(\"1. Vá em Secrets (🔒) no painel lateral do Replit\")\n            logging.warning(\"2. Adicione: GITHUB_TOKEN = seu_token_github\")\n            logging.warning(\"3. Reinicie a aplicação\")\n            logging.warning(\"=\"*80)\n        else:\n            # Initialize GitHub client and sync repositories\n            client = GitHubClient()\n            \n            # Validate and store credentials\n            if client.validate_connection():\n                # Get user info to store credentials\n                user_info = client.get_authenticated_user()\n                if user_info:\n                    username = user_info.get('login')\n                    \n                    if username:  # Only proceed if username is not None\n                        # Store encrypted credentials in database (if crypto available)\n                        try:\n                            if crypto_manager is not None:\n                                client.store_github_credentials(username, github_token)\n                                logging.info(f\"GitHub credentials armazenadas para: {username}\")\n                            else:\n                                logging.info(f\"GitHub conectado para: {username} (sem criptografia)\")\n                        except Exception as e:\n                            logging.warning(f\"Aviso ao armazenar credenciais: {e}\")\n                        \n                        # Perform initial sync of repositories\n                        try:\n                            sync_service = GitHubSyncService()\n                            logging.info(f\"Iniciando sincronização de repositórios para {username}...\")\n                            \n                            success, message, repos_synced = sync_service.sync_user_repositories(username)\n                            if success:\n                                logging.info(f\"✅ Sincronização concluída: {repos_synced} repositórios carregados\")\n                            else:\n                                logging.warning(f\"⚠️ Sincronização parcial: {message}\")\n                        except Exception as sync_error:\n                            logging.error(f\"Erro na sincronização: {sync_error}\")\n                        \n                else:\n                    logging.error(\"Não foi possível obter informações do usuário GitHub\")\n            else:\n                logging.error(\"Token GitHub inválido - verifique suas permissões\")\n        \n        # Start background sync (optional)\n        try:\n            from auto_sync_scheduler import start_background_sync\n            if start_background_sync():\n                logging.info(\"Sincronização automática em background ativada\")\n        except Exception as e:\n            logging.debug(f\"Background sync não iniciado: {e}\")\n            \n    except Exception as e:\n        logging.warning(f\"GitHub setup error: {e}\")\n        logging.info(\"Sistema continuará sem sincronização GitHub\")\n\n# Import and initialize API routes\nfrom api_routes import init_api_routes\ninit_api_routes(app)\n","size_bytes":5375},"create_demo_data.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nCreate demo data for the digital portfolio admin system\n\"\"\"\n\nfrom app import app, db\nfrom models import User, Project, Category, AboutMe, AdminLog\nfrom werkzeug.security import generate_password_hash\nfrom utils import log_admin_action\nimport datetime\n\ndef create_demo_data():\n    \"\"\"Create demo users and content for testing the admin system\"\"\"\n    \n    with app.app_context():\n        print(\"Creating demo data...\")\n        \n        # Create demo users\n        demo_users = [\n            {\n                'username': 'john_doe',\n                'email': 'john@example.com',\n                'full_name': 'John Doe',\n                'password': 'password123',\n                'is_admin': False,\n                'is_active': True\n            },\n            {\n                'username': 'jane_admin',\n                'email': 'jane@example.com',\n                'full_name': 'Jane Smith',\n                'password': 'admin123',\n                'is_admin': True,\n                'is_active': True\n            },\n            {\n                'username': 'bob_inactive',\n                'email': 'bob@example.com',\n                'full_name': 'Bob Johnson',\n                'password': 'password123',\n                'is_admin': False,\n                'is_active': False\n            }\n        ]\n        \n        created_users = []\n        for user_data in demo_users:\n            # Check if user already exists\n            existing_user = User.query.filter_by(email=user_data['email']).first()\n            if not existing_user:\n                user = User()\n                user.username = user_data['username']\n                user.email = user_data['email']\n                user.full_name = user_data['full_name']\n                user.password_hash = generate_password_hash(user_data['password'])\n                user.is_admin = user_data['is_admin']\n                user.is_active = user_data['is_active']\n                user.is_super_admin = False\n                \n                db.session.add(user)\n                created_users.append(user)\n                print(f\"Created user: {user.username} ({user.email})\")\n        \n        # Create demo category\n        existing_category = Category.query.filter_by(name='Demo Category').first()\n        if not existing_category:\n            category = Category()\n            category.name = 'Demo Category'\n            category.description = 'A category for demonstration purposes'\n            db.session.add(category)\n            print(\"Created demo category\")\n        \n        # Create About Me content\n        existing_about = AboutMe.query.first()\n        if not existing_about:\n            about = AboutMe()\n            about.title = 'Welcome to My Portfolio'\n            about.content = '''Hi! I'm a passionate developer who loves creating amazing digital experiences. \n            This portfolio showcases my work and the journey I've taken in the world of technology.\n            \n            I specialize in web development, with expertise in Python, Flask, and modern frontend technologies.\n            When I'm not coding, you can find me exploring new technologies and contributing to open source projects.'''\n            about.email = 'contact@portfolio.com'\n            about.github_url = 'https://github.com/portfolio'\n            about.linkedin_url = 'https://linkedin.com/in/portfolio'\n            \n            db.session.add(about)\n            print(\"Created About Me content\")\n        \n        # Commit all changes\n        db.session.commit()\n        \n        # Create some demo admin logs\n        super_admin = User.query.filter_by(is_super_admin=True).first()\n        if super_admin and created_users:\n            for user in created_users:\n                if user.is_admin:\n                    log_entry = AdminLog()\n                    log_entry.admin_id = super_admin.id\n                    log_entry.action = 'promote_to_admin'\n                    log_entry.target_user_id = user.id\n                    log_entry.target_user_email = user.email\n                    log_entry.description = f'Demo: User {user.email} promoted to admin'\n                    log_entry.created_at = datetime.datetime.utcnow() - datetime.timedelta(days=1)\n                    \n                    db.session.add(log_entry)\n                \n                if not user.is_active:\n                    log_entry = AdminLog()\n                    log_entry.admin_id = super_admin.id\n                    log_entry.action = 'deactivate_user'\n                    log_entry.target_user_id = user.id\n                    log_entry.target_user_email = user.email\n                    log_entry.description = f'Demo: User {user.email} deactivated for demo purposes'\n                    log_entry.created_at = datetime.datetime.utcnow() - datetime.timedelta(hours=2)\n                    \n                    db.session.add(log_entry)\n            \n            db.session.commit()\n            print(\"Created demo admin logs\")\n        \n        print(\"\\nDemo data creation completed!\")\n        print(\"You can now test the admin system with these accounts:\")\n        print(\"- Super Admin: admin@admin.com / Admin@123\")\n        print(\"- Regular Admin: jane@example.com / admin123\")\n        print(\"- Regular User: john@example.com / password123\")\n        print(\"- Inactive User: bob@example.com / password123\")\n\nif __name__ == '__main__':\n    create_demo_data()","size_bytes":5415},"crypto_utils.py":{"content":"import os\nimport base64\nfrom cryptography.fernet import Fernet\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass CryptoManager:\n    \"\"\"\n    Manages encryption and decryption of sensitive data\n    \"\"\"\n    \n    def __init__(self):\n        self._cipher = None\n        self._initialize_cipher()\n    \n    def _initialize_cipher(self):\n        \"\"\"Initialize the cipher with the encryption key from environment\"\"\"\n        try:\n            encryption_key = os.environ.get('ENCRYPTION_KEY')\n            if not encryption_key:\n                raise ValueError(\"ENCRYPTION_KEY environment variable not found\")\n            \n            # Use PBKDF2 to derive a key from the environment variable\n            kdf = PBKDF2HMAC(\n                algorithm=hashes.SHA256(),\n                length=32,\n                salt=b'portfolio_github_salt',  # Static salt for consistency\n                iterations=100000,\n            )\n            key = base64.urlsafe_b64encode(kdf.derive(encryption_key.encode()))\n            self._cipher = Fernet(key)\n            \n        except Exception as e:\n            logger.error(f\"Failed to initialize encryption cipher: {e}\")\n            raise\n    \n    def encrypt(self, data: str) -> str:\n        \"\"\"\n        Encrypt a string and return base64 encoded result\n        \"\"\"\n        try:\n            if not data:\n                return \"\"\n            \n            encrypted = self._cipher.encrypt(data.encode())\n            return base64.urlsafe_b64encode(encrypted).decode()\n            \n        except Exception as e:\n            logger.error(f\"Failed to encrypt data: {e}\")\n            raise\n    \n    def decrypt(self, encrypted_data: str) -> str:\n        \"\"\"\n        Decrypt base64 encoded encrypted data and return the original string\n        \"\"\"\n        try:\n            if not encrypted_data:\n                return \"\"\n            \n            encrypted_bytes = base64.urlsafe_b64decode(encrypted_data.encode())\n            decrypted = self._cipher.decrypt(encrypted_bytes)\n            return decrypted.decode()\n            \n        except Exception as e:\n            logger.error(f\"Failed to decrypt data: {e}\")\n            raise\n\n# Global instance - conditionally initialized\ncrypto_manager = None\n\ndef get_crypto_manager():\n    \"\"\"Get crypto manager instance, creating it if needed and possible\"\"\"\n    global crypto_manager\n    if crypto_manager is None:\n        try:\n            crypto_manager = CryptoManager()\n        except ValueError as e:\n            logger.warning(f\"Crypto manager unavailable: {e}\")\n            return None\n    return crypto_manager\n\n# Try to initialize immediately, but don't fail if not possible\ntry:\n    crypto_manager = CryptoManager()\nexcept ValueError:\n    logger.info(\"Crypto utilities disabled - ENCRYPTION_KEY not provided\")\n    crypto_manager = None","size_bytes":2936},"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField, FileAllowed\nfrom wtforms import StringField, TextAreaField, PasswordField, BooleanField, SelectField, SubmitField, HiddenField\nfrom wtforms.validators import DataRequired, Email, Length, EqualTo, URL, Optional\nfrom models import Category\n\nclass LoginForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Senha', validators=[DataRequired()])\n    remember_me = BooleanField('Lembrar-me')\n    submit = SubmitField('Entrar')\n\nclass RegisterForm(FlaskForm):\n    username = StringField('Nome de Usuário', validators=[DataRequired(), Length(min=4, max=20)])\n    full_name = StringField('Nome Completo', validators=[DataRequired(), Length(min=2, max=100)])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Senha', validators=[DataRequired(), Length(min=6)])\n    password2 = PasswordField('Repetir Senha', validators=[DataRequired(), EqualTo('password')])\n    submit = SubmitField('Cadastrar')\n\nclass ProjectForm(FlaskForm):\n    title = StringField('Título', validators=[DataRequired(), Length(max=200)])\n    description = TextAreaField('Descrição', validators=[DataRequired()])\n    content = TextAreaField('Conteúdo')\n    image = FileField('Imagem do Projeto', validators=[FileAllowed(['jpg', 'png', 'gif', 'jpeg'], 'Apenas imagens!')])\n    demo_url = StringField('URL de Demonstração', validators=[Optional(), URL()])\n    github_url = StringField('URL do GitHub', validators=[Optional(), URL()])\n    category_id = SelectField('Categoria', coerce=int)\n    tags = StringField('Tags (separadas por vírgula)')\n    is_published = BooleanField('Publicado')\n    is_featured = BooleanField('Em Destaque')\n    submit = SubmitField('Salvar Projeto')\n    \n    def __init__(self, *args, **kwargs):\n        super(ProjectForm, self).__init__(*args, **kwargs)\n        self.category_id.choices = [(c.id, c.name) for c in Category.query.all()]\n\nclass CategoryForm(FlaskForm):\n    name = StringField('Nome', validators=[DataRequired(), Length(max=100)])\n    description = TextAreaField('Descrição')\n    submit = SubmitField('Salvar Categoria')\n\nclass CommentForm(FlaskForm):\n    content = TextAreaField('Comentário', validators=[DataRequired(), Length(min=10, max=500)])\n    submit = SubmitField('Adicionar Comentário')\n\nclass SearchForm(FlaskForm):\n    query = StringField('Buscar', validators=[DataRequired()])\n    submit = SubmitField('Pesquisar')\n\nclass AboutMeForm(FlaskForm):\n    title = StringField('Título', validators=[DataRequired(), Length(max=200)])\n    content = TextAreaField('Conteúdo', validators=[DataRequired()])\n    image = FileField('Foto de Perfil', validators=[FileAllowed(['jpg', 'png', 'gif', 'jpeg'], 'Apenas imagens!')])\n    linkedin_url = StringField('URL do LinkedIn', validators=[Optional(), URL()])\n    github_url = StringField('URL do GitHub', validators=[Optional(), URL()])\n    email = StringField('Email', validators=[Optional(), Email()])\n    phone = StringField('Telefone', validators=[Optional(), Length(max=20)])\n    submit = SubmitField('Salvar')\n\n# Admin Forms\nclass UserPromoteForm(FlaskForm):\n    user_id = HiddenField('ID do Usuário', validators=[DataRequired()])\n    submit = SubmitField('Promover a Admin')\n\nclass UserDemoteForm(FlaskForm):\n    user_id = HiddenField('ID do Usuário', validators=[DataRequired()])\n    submit = SubmitField('Remover Admin')\n\nclass UserDeactivateForm(FlaskForm):\n    user_id = HiddenField('ID do Usuário', validators=[DataRequired()])\n    submit = SubmitField('Desativar Usuário')\n\nclass UserActivateForm(FlaskForm):\n    user_id = HiddenField('ID do Usuário', validators=[DataRequired()])\n    submit = SubmitField('Activate User')\n","size_bytes":3786},"github_client.py":{"content":"import os\nimport json\nimport logging\nfrom datetime import datetime, timezone\nfrom typing import Dict, List, Optional, Any\nimport requests\nfrom flask import current_app\nfrom models import GitHubCredentials\nfrom app import db\n\n# Safe import of crypto_manager\ntry:\n    from crypto_utils import crypto_manager\nexcept ImportError:\n    crypto_manager = None\n    logging.warning(\"crypto_utils não disponível - credenciais não serão criptografadas\")\n\nlogger = logging.getLogger(__name__)\n\nclass GitHubAPIError(Exception):\n    \"\"\"Custom exception for GitHub API errors\"\"\"\n    pass\n\nclass GitHubClient:\n    \"\"\"\n    GitHub API client using Replit's GitHub integration\n    \"\"\"\n    \n    def __init__(self):\n        self.base_url = \"https://api.github.com\"\n        self.session = requests.Session()\n        self._access_token = None\n        \n    def _get_access_token(self) -> str:\n        \"\"\"\n        Get the GitHub access token from encrypted storage or environment\n        \"\"\"\n        if self._access_token:\n            return self._access_token\n            \n        # First try to get from database (encrypted storage)\n        try:\n            if crypto_manager is not None:\n                credentials = GitHubCredentials.query.filter_by(is_active=True).first()\n                if credentials:\n                    self._access_token = crypto_manager.decrypt(credentials.encrypted_token)\n                    # Update last used time\n                    credentials.last_used_at = datetime.utcnow()\n                    db.session.commit()\n                    return self._access_token\n        except Exception as e:\n            logger.warning(f\"Failed to get token from database: {e}\")\n        \n        # Fallback to environment variable (for initial setup)\n        github_token = os.environ.get('GITHUB_TOKEN')\n        if github_token:\n            self._access_token = github_token\n            return github_token\n            \n        raise GitHubAPIError('GitHub access token not available. Please configure your GitHub credentials.')\n    \n    def _make_request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:\n        \"\"\"\n        Make an authenticated request to the GitHub API\n        \"\"\"\n        access_token = self._get_access_token()\n        \n        headers = kwargs.get('headers', {})\n        headers.update({\n            'Authorization': f'token {access_token}',\n            'Accept': 'application/vnd.github.v3+json',\n            'User-Agent': 'ReplicationPortfolio/1.0'\n        })\n        kwargs['headers'] = headers\n        \n        url = f\"{self.base_url}/{endpoint.lstrip('/')}\"\n        \n        try:\n            response = self.session.request(method, url, **kwargs)\n            \n            # Handle rate limiting\n            if response.status_code == 403 and 'rate limit' in response.text.lower():\n                reset_time = response.headers.get('X-RateLimit-Reset')\n                if reset_time:\n                    reset_datetime = datetime.fromtimestamp(int(reset_time), tz=timezone.utc)\n                    raise GitHubAPIError(f'Rate limit exceeded. Resets at {reset_datetime}')\n                else:\n                    raise GitHubAPIError('Rate limit exceeded')\n            \n            response.raise_for_status()\n            return response.json()\n            \n        except requests.RequestException as e:\n            logger.error(f\"GitHub API request failed: {e}\")\n            raise GitHubAPIError(f'GitHub API request failed: {e}')\n    \n    def get_user_repositories(self, username: str, per_page: int = 100) -> List[Dict[str, Any]]:\n        \"\"\"\n        Get all public repositories for a user\n        \"\"\"\n        repositories = []\n        page = 1\n        \n        while True:\n            try:\n                response = self._make_request(\n                    'GET',\n                    f'/users/{username}/repos',\n                    params={\n                        'per_page': per_page,\n                        'page': page,\n                        'sort': 'updated',\n                        'direction': 'desc'\n                    }\n                )\n                \n                if not response:\n                    break\n                \n                repositories.extend(response)\n                \n                # If we got fewer than requested, we're on the last page\n                if len(response) < per_page:\n                    break\n                \n                page += 1\n                \n            except GitHubAPIError as e:\n                logger.error(f\"Error fetching repositories for {username}: {e}\")\n                raise\n        \n        logger.info(f\"Fetched {len(repositories)} repositories for user {username}\")\n        return repositories\n    \n    def get_repository_languages(self, owner: str, repo: str) -> Dict[str, int]:\n        \"\"\"\n        Get programming languages used in a repository with byte counts\n        \"\"\"\n        try:\n            response = self._make_request('GET', f'/repos/{owner}/{repo}/languages')\n            return response\n        except GitHubAPIError as e:\n            logger.warning(f\"Error fetching languages for {owner}/{repo}: {e}\")\n            return {}\n    \n    def get_repository_details(self, owner: str, repo: str) -> Optional[Dict[str, Any]]:\n        \"\"\"\n        Get detailed information about a specific repository\n        \"\"\"\n        try:\n            response = self._make_request('GET', f'/repos/{owner}/{repo}')\n            return response\n        except GitHubAPIError as e:\n            logger.warning(f\"Error fetching details for {owner}/{repo}: {e}\")\n            return None\n\n    def get_authenticated_user(self) -> Optional[Dict[str, Any]]:\n        \"\"\"\n        Get the currently authenticated GitHub user\n        \"\"\"\n        try:\n            response = self._make_request('GET', '/user')\n            return response\n        except GitHubAPIError:\n            return None\n\n    def validate_connection(self) -> bool:\n        \"\"\"\n        Test if the GitHub connection is working\n        \"\"\"\n        try:\n            user = self.get_authenticated_user()\n            return bool(user and user.get('login'))\n        except GitHubAPIError:\n            return False\n    \n    def store_github_credentials(self, username: str, token: str) -> bool:\n        \"\"\"\n        Store GitHub credentials encrypted in the database\n        \"\"\"\n        try:\n            # Deactivate any existing credentials\n            existing = GitHubCredentials.query.filter_by(username=username).first()\n            if existing:\n                existing.is_active = False\n            \n            # Create new encrypted credentials\n            if crypto_manager is None:\n                logger.error(\"Cannot store credentials - encryption not available\")\n                return False\n            encrypted_token = crypto_manager.encrypt(token)\n            credentials = GitHubCredentials(\n                username=username,\n                encrypted_token=encrypted_token,\n                is_active=True\n            )\n            \n            db.session.add(credentials)\n            db.session.commit()\n            \n            logger.info(f\"GitHub credentials stored for user: {username}\")\n            return True\n            \n        except Exception as e:\n            logger.error(f\"Failed to store GitHub credentials: {e}\")\n            db.session.rollback()\n            return False\n    \n    def initialize_credentials_from_env(self) -> bool:\n        \"\"\"\n        Initialize credentials from environment variables and store in database\n        \"\"\"\n        try:\n            github_token = os.environ.get('GITHUB_TOKEN')\n            if not github_token:\n                logger.warning(\"No GITHUB_TOKEN found in environment\")\n                return False\n            \n            # Validate token by getting user info\n            temp_token = self._access_token\n            self._access_token = github_token\n            \n            user_info = self.get_authenticated_user()\n            if not user_info:\n                self._access_token = temp_token\n                logger.error(\"Invalid GitHub token\")\n                return False\n            \n            username = user_info.get('login')\n            if not username:\n                self._access_token = temp_token\n                logger.error(\"Could not get username from GitHub API\")\n                return False\n            \n            # Store credentials in database\n            success = self.store_github_credentials(username, github_token)\n            \n            self._access_token = temp_token\n            return success\n            \n        except Exception as e:\n            logger.error(f\"Failed to initialize credentials from environment: {e}\")\n            return False","size_bytes":8732},"github_sync.py":{"content":"import json\nimport logging\nfrom datetime import datetime, timezone\nfrom typing import Dict, List, Optional, Tuple\nfrom sqlalchemy.exc import IntegrityError\nfrom github_client import GitHubClient, GitHubAPIError\nfrom models import GitHubRepository, GitHubRepositoryLanguage, GitHubSyncLog\nfrom app import db\n\nlogger = logging.getLogger(__name__)\n\nclass GitHubSyncService:\n    \"\"\"\n    Service to sync GitHub repositories and cache them in the database\n    \"\"\"\n    \n    def __init__(self):\n        self.client = GitHubClient()\n    \n    def sync_user_repositories(self, username: str) -> Tuple[bool, str, int]:\n        \"\"\"\n        Sync all repositories for a given username\n        Returns: (success: bool, message: str, repositories_synced: int)\n        \"\"\"\n        sync_log = GitHubSyncLog()\n        sync_log.username = username\n        sync_log.status = 'running'\n        sync_log.started_at = datetime.utcnow()\n        db.session.add(sync_log)\n        db.session.commit()\n        \n        try:\n            logger.info(f\"Starting GitHub sync for user: {username}\")\n            \n            # Test connection first\n            if not self.client.validate_connection():\n                error_msg = \"GitHub connection validation failed\"\n                self._update_sync_log(sync_log, 'error', error_msg, 0)\n                return False, error_msg, 0\n            \n            # Fetch repositories from GitHub\n            repositories = self.client.get_user_repositories(username)\n            \n            if not repositories:\n                message = f\"No repositories found for user {username}\"\n                self._update_sync_log(sync_log, 'success', None, 0)\n                return True, message, 0\n            \n            synced_count = 0\n            errors = []\n            \n            for repo_data in repositories:\n                try:\n                    if self._sync_repository(username, repo_data):\n                        synced_count += 1\n                except Exception as e:\n                    error_msg = f\"Error syncing repository {repo_data.get('name', 'unknown')}: {str(e)}\"\n                    errors.append(error_msg)\n                    logger.error(error_msg)\n            \n            # Determine final status\n            if errors and synced_count == 0:\n                status = 'error'\n                message = f\"Failed to sync any repositories. Errors: {'; '.join(errors[:3])}\"\n            elif errors:\n                status = 'partial'\n                message = f\"Synced {synced_count}/{len(repositories)} repositories. Some errors occurred.\"\n            else:\n                status = 'success'\n                message = f\"Successfully synced {synced_count} repositories\"\n            \n            self._update_sync_log(sync_log, status, message if errors else None, synced_count)\n            \n            logger.info(f\"GitHub sync completed for {username}: {message}\")\n            return status != 'error', message, synced_count\n            \n        except GitHubAPIError as e:\n            error_msg = f\"GitHub API error: {str(e)}\"\n            self._update_sync_log(sync_log, 'error', error_msg, 0)\n            logger.error(error_msg)\n            return False, error_msg, 0\n        except Exception as e:\n            error_msg = f\"Unexpected error during sync: {str(e)}\"\n            self._update_sync_log(sync_log, 'error', error_msg, 0)\n            logger.error(error_msg)\n            return False, error_msg, 0\n    \n    def _sync_repository(self, username: str, repo_data: Dict) -> bool:\n        \"\"\"\n        Sync a single repository to the database\n        Returns True if successful, False otherwise\n        \"\"\"\n        try:\n            github_id = repo_data['id']\n            \n            # Check if repository already exists\n            existing_repo = GitHubRepository.query.filter_by(github_id=github_id).first()\n            \n            if existing_repo:\n                # Update existing repository\n                repository = existing_repo\n                logger.debug(f\"Updating existing repository: {repo_data['name']}\")\n            else:\n                # Create new repository\n                repository = GitHubRepository()\n                repository.github_id = github_id\n                db.session.add(repository)\n                logger.debug(f\"Creating new repository: {repo_data['name']}\")\n            \n            # Update repository fields\n            self._update_repository_from_data(repository, repo_data)\n            \n            # Fetch and update languages\n            self._sync_repository_languages(repository, username, repo_data['name'])\n            \n            db.session.commit()\n            return True\n            \n        except Exception as e:\n            db.session.rollback()\n            logger.error(f\"Error syncing repository {repo_data.get('name', 'unknown')}: {e}\")\n            return False\n    \n    def _update_repository_from_data(self, repository: GitHubRepository, repo_data: Dict):\n        \"\"\"\n        Update repository model with data from GitHub API\n        \"\"\"\n        repository.name = repo_data['name']\n        repository.full_name = repo_data['full_name']\n        repository.description = repo_data.get('description', '')\n        repository.html_url = repo_data['html_url']\n        repository.homepage = repo_data.get('homepage')\n        repository.clone_url = repo_data['clone_url']\n        repository.ssh_url = repo_data['ssh_url']\n        repository.language = repo_data.get('language')\n        repository.stargazers_count = repo_data.get('stargazers_count', 0)\n        repository.watchers_count = repo_data.get('watchers_count', 0)\n        repository.forks_count = repo_data.get('forks_count', 0)\n        repository.size = repo_data.get('size', 0)\n        repository.default_branch = repo_data.get('default_branch', 'main')\n        repository.topics = json.dumps(repo_data.get('topics', []))\n        repository.is_fork = repo_data.get('fork', False)\n        repository.is_private = repo_data.get('private', False)\n        repository.has_issues = repo_data.get('has_issues', True)\n        repository.has_projects = repo_data.get('has_projects', True)\n        repository.has_wiki = repo_data.get('has_wiki', True)\n        repository.archived = repo_data.get('archived', False)\n        repository.disabled = repo_data.get('disabled', False)\n        \n        # Parse datetime fields\n        if repo_data.get('pushed_at'):\n            repository.pushed_at = datetime.fromisoformat(repo_data['pushed_at'].replace('Z', '+00:00'))\n        if repo_data.get('created_at'):\n            repository.created_at_github = datetime.fromisoformat(repo_data['created_at'].replace('Z', '+00:00'))\n        if repo_data.get('updated_at'):\n            repository.updated_at_github = datetime.fromisoformat(repo_data['updated_at'].replace('Z', '+00:00'))\n        \n        repository.last_sync_at = datetime.utcnow()\n    \n    def _sync_repository_languages(self, repository: GitHubRepository, owner: str, repo_name: str):\n        \"\"\"\n        Fetch and update repository languages\n        \"\"\"\n        try:\n            # Fetch languages from GitHub API\n            languages_data = self.client.get_repository_languages(owner, repo_name)\n            \n            if not languages_data:\n                return\n            \n            # Calculate total bytes for percentage calculation\n            total_bytes = sum(languages_data.values())\n            \n            # Clear existing languages\n            GitHubRepositoryLanguage.query.filter_by(repository_id=repository.id).delete()\n            \n            # Add new languages\n            for language, bytes_count in languages_data.items():\n                percentage = (bytes_count / total_bytes * 100) if total_bytes > 0 else 0\n                \n                lang_record = GitHubRepositoryLanguage()\n                lang_record.repository_id = repository.id\n                lang_record.language = language\n                lang_record.bytes_count = bytes_count\n                lang_record.percentage = percentage\n                db.session.add(lang_record)\n            \n            logger.debug(f\"Updated {len(languages_data)} languages for {repo_name}\")\n            \n        except Exception as e:\n            logger.warning(f\"Error syncing languages for {repo_name}: {e}\")\n    \n    def _update_sync_log(self, sync_log: GitHubSyncLog, status: str, error_message: Optional[str], repositories_synced: int):\n        \"\"\"\n        Update the sync log with final status\n        \"\"\"\n        sync_log.status = status\n        sync_log.error_message = error_message\n        sync_log.repositories_synced = repositories_synced\n        sync_log.completed_at = datetime.utcnow()\n        db.session.commit()\n    \n    def get_repositories_by_language(self, language: Optional[str] = None, limit: int = 50) -> List[GitHubRepository]:\n        \"\"\"\n        Get repositories filtered by language\n        \"\"\"\n        query = GitHubRepository.query\n        \n        if language:\n            # Join with language table to filter by language\n            query = query.join(GitHubRepositoryLanguage).filter(\n                GitHubRepositoryLanguage.language == language\n            )\n        \n        # Order by stars and recent activity\n        repositories = query.order_by(\n            GitHubRepository.stargazers_count.desc(),\n            GitHubRepository.pushed_at.desc()\n        ).limit(limit).all()\n        \n        return repositories\n    \n    def get_all_languages(self) -> List[Dict[str, int]]:\n        \"\"\"\n        Get all unique languages across all repositories with counts\n        \"\"\"\n        from sqlalchemy import func\n        \n        languages = db.session.query(\n            GitHubRepositoryLanguage.language,\n            func.count(GitHubRepository.id).label('repository_count'),\n            func.sum(GitHubRepositoryLanguage.bytes_count).label('total_bytes')\n        ).join(GitHubRepository).group_by(\n            GitHubRepositoryLanguage.language\n        ).order_by(\n            func.count(GitHubRepository.id).desc()\n        ).all()\n        \n        return [\n            {\n                'language': lang.language,\n                'repository_count': lang.repository_count,\n                'total_bytes': lang.total_bytes\n            }\n            for lang in languages\n        ]\n    \n    def get_last_sync_info(self, username: str) -> Optional[GitHubSyncLog]:\n        \"\"\"\n        Get the last sync log for a username\n        \"\"\"\n        return GitHubSyncLog.query.filter_by(\n            username=username\n        ).order_by(GitHubSyncLog.started_at.desc()).first()","size_bytes":10582},"load_github_repos.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nScript to load GitHub repositories using stored encrypted credentials\n\"\"\"\nimport sys\nfrom app import app, db\nfrom github_sync import GitHubSyncService\nfrom models import GitHubCredentials\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef load_repositories():\n    \"\"\"Load GitHub repositories from the authenticated user\"\"\"\n    with app.app_context():\n        try:\n            # Get stored credentials\n            credentials = GitHubCredentials.query.filter_by(is_active=True).first()\n            if not credentials:\n                logger.error(\"No GitHub credentials found in database\")\n                return False\n            \n            username = credentials.username\n            logger.info(f\"Loading repositories for user: {username}\")\n            \n            # Initialize sync service\n            sync_service = GitHubSyncService()\n            \n            # Validate connection first\n            if not sync_service.client.validate_connection():\n                logger.error(\"GitHub connection validation failed\")\n                return False\n            \n            # Sync repositories\n            success, message, repos_synced = sync_service.sync_user_repositories(username)\n            \n            if success:\n                logger.info(f\"Successfully synced {repos_synced} repositories\")\n                logger.info(f\"Message: {message}\")\n                return True\n            else:\n                logger.error(f\"Failed to sync repositories: {message}\")\n                return False\n                \n        except Exception as e:\n            logger.error(f\"Error loading repositories: {e}\")\n            return False\n\nif __name__ == \"__main__\":\n    success = load_repositories()\n    sys.exit(0 if success else 1)","size_bytes":1809},"main.py":{"content":"from app import app\nimport routes  # noqa: F401\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":127},"models.py":{"content":"from datetime import datetime\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import UserMixin\nfrom app import db\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    full_name = db.Column(db.String(200))\n    is_admin = db.Column(db.Boolean, default=False)\n    is_super_admin = db.Column(db.Boolean, default=False)\n    active = db.Column(db.Boolean, default=True)\n    preferred_language = db.Column(db.String(10), default='pt-BR')\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    comments = db.relationship('Comment', backref='author', lazy=True)\n    likes = db.relationship('Like', backref='user', lazy=True)\n\nclass Category(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), unique=True, nullable=False)\n    description = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    projects = db.relationship('Project', backref='category', lazy=True)\n\nclass Project(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    content = db.Column(db.Text)\n    image_filename = db.Column(db.String(255))\n    demo_url = db.Column(db.String(500))\n    github_url = db.Column(db.String(500))\n    is_published = db.Column(db.Boolean, default=False)\n    is_featured = db.Column(db.Boolean, default=False)\n    views_count = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Foreign Keys\n    category_id = db.Column(db.Integer, db.ForeignKey('category.id'))\n    \n    # Relationships\n    comments = db.relationship('Comment', backref='project', lazy=True, cascade='all, delete-orphan')\n    likes = db.relationship('Like', backref='project', lazy=True, cascade='all, delete-orphan')\n    tags = db.relationship('Tag', secondary='project_tags', backref='projects')\n    \n    @property\n    def likes_count(self):\n        return Like.query.filter_by(project_id=self.id).count()\n    \n    @property\n    def comments_count(self):\n        return Comment.query.filter_by(project_id=self.id).count()\n\nclass Tag(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(50), unique=True, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n# Association table for many-to-many relationship between Project and Tag\nproject_tags = db.Table('project_tags',\n    db.Column('project_id', db.Integer, db.ForeignKey('project.id'), primary_key=True),\n    db.Column('tag_id', db.Integer, db.ForeignKey('tag.id'), primary_key=True)\n)\n\nclass Comment(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    content = db.Column(db.Text, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)\n\nclass Like(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Foreign Keys\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)\n    \n    # Ensure a user can only like a project once\n    __table_args__ = (db.UniqueConstraint('user_id', 'project_id', name='unique_user_project_like'),)\n\nclass AboutMe(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    content = db.Column(db.Text, nullable=False)\n    image_filename = db.Column(db.String(255))\n    linkedin_url = db.Column(db.String(500))\n    github_url = db.Column(db.String(500))\n    email = db.Column(db.String(120))\n    phone = db.Column(db.String(20))\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n# New models for enhanced functionality\nclass Skill(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), unique=True, nullable=False)\n    level = db.Column(db.Integer, nullable=False, default=1)  # 1-10\n    experience_years = db.Column(db.Float, default=0)\n    description = db.Column(db.Text)\n    icon = db.Column(db.String(50))  # FontAwesome icon class\n    color = db.Column(db.String(7), default='#007bff')  # Hex color\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    project_skills = db.relationship('ProjectSkill', backref='skill', lazy=True)\n    \n    @property\n    def projects_count(self):\n        return ProjectSkill.query.filter_by(skill_id=self.id).count()\n\nclass ProjectSkill(db.Model):\n    __tablename__ = 'project_skills'\n    id = db.Column(db.Integer, primary_key=True)\n    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)\n    skill_id = db.Column(db.Integer, db.ForeignKey('skill.id'), nullable=False)\n    proficiency_used = db.Column(db.Integer, default=5)  # 1-10 how much this skill was used\n    is_primary = db.Column(db.Boolean, default=False)  # Main technology used\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass TimelineEvent(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text)\n    event_date = db.Column(db.Date, nullable=False)\n    event_type = db.Column(db.String(50), nullable=False)  # 'project', 'achievement', 'education', 'work'\n    importance = db.Column(db.Integer, default=1)  # 1-5, for ordering\n    image_filename = db.Column(db.String(255))\n    external_url = db.Column(db.String(500))\n    project_id = db.Column(db.Integer, db.ForeignKey('project.id'))  # Optional link to project\n    event_metadata = db.Column(db.Text)  # JSON for additional data\n    is_published = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\nclass Recommendation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    source_project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)\n    recommended_project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)\n    similarity_score = db.Column(db.Float, default=0.0)  # 0-1 similarity score\n    recommendation_type = db.Column(db.String(50), default='content')  # 'content', 'tag', 'category'\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    source_project = db.relationship('Project', foreign_keys=[source_project_id], backref='generated_recommendations')\n    recommended_project = db.relationship('Project', foreign_keys=[recommended_project_id], backref='received_recommendations')\n\nclass AdminLog(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    admin_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    action = db.Column(db.String(100), nullable=False)\n    target_user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    target_user_email = db.Column(db.String(120))\n    description = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    admin_user = db.relationship('User', foreign_keys=[admin_id], backref='admin_logs')\n    target_user = db.relationship('User', foreign_keys=[target_user_id], backref='target_logs')\n\nclass GitHubRepository(db.Model):\n    __tablename__ = 'github_repositories'\n    id = db.Column(db.Integer, primary_key=True)\n    github_id = db.Column(db.Integer, unique=True, nullable=False)\n    name = db.Column(db.String(100), nullable=False)\n    full_name = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text)\n    html_url = db.Column(db.String(500), nullable=False)\n    homepage = db.Column(db.String(500))\n    clone_url = db.Column(db.String(500))\n    ssh_url = db.Column(db.String(500))\n    language = db.Column(db.String(50))  # Primary language\n    stargazers_count = db.Column(db.Integer, default=0)\n    watchers_count = db.Column(db.Integer, default=0)\n    forks_count = db.Column(db.Integer, default=0)\n    size = db.Column(db.Integer, default=0)\n    default_branch = db.Column(db.String(50), default='main')\n    topics = db.Column(db.Text)  # JSON array of topics\n    is_fork = db.Column(db.Boolean, default=False)\n    is_private = db.Column(db.Boolean, default=False)\n    has_issues = db.Column(db.Boolean, default=True)\n    has_projects = db.Column(db.Boolean, default=True)\n    has_wiki = db.Column(db.Boolean, default=True)\n    archived = db.Column(db.Boolean, default=False)\n    disabled = db.Column(db.Boolean, default=False)\n    pushed_at = db.Column(db.DateTime)\n    created_at_github = db.Column(db.DateTime)\n    updated_at_github = db.Column(db.DateTime)\n    fetched_at = db.Column(db.DateTime, default=datetime.utcnow)\n    last_sync_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    languages = db.relationship('GitHubRepositoryLanguage', backref='repository', lazy=True, cascade='all, delete-orphan')\n    \n    @property\n    def language_list(self):\n        try:\n            return [lang.language for lang in self.languages.all() if lang]\n        except:\n            return []\n    \n    @property\n    def primary_languages(self):\n        try:\n            # Return languages sorted by bytes_count descending, limit to top 3\n            lang_list = list(self.languages.all())\n            return sorted(lang_list, key=lambda x: x.bytes_count, reverse=True)[:3]\n        except:\n            return []\n\nclass GitHubRepositoryLanguage(db.Model):\n    __tablename__ = 'github_repository_languages'\n    id = db.Column(db.Integer, primary_key=True)\n    repository_id = db.Column(db.Integer, db.ForeignKey('github_repositories.id'), nullable=False)\n    language = db.Column(db.String(50), nullable=False)\n    bytes_count = db.Column(db.Integer, default=0)\n    percentage = db.Column(db.Float, default=0.0)\n    \n    # Ensure unique repository-language combinations\n    __table_args__ = (db.UniqueConstraint('repository_id', 'language', name='unique_repo_language'),)\n\nclass GitHubSyncLog(db.Model):\n    __tablename__ = 'github_sync_logs'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(100), nullable=False)\n    status = db.Column(db.String(20), nullable=False)  # 'success', 'error', 'partial'\n    repositories_synced = db.Column(db.Integer, default=0)\n    error_message = db.Column(db.Text)\n    started_at = db.Column(db.DateTime, default=datetime.utcnow)\n    completed_at = db.Column(db.DateTime)\n    \n    @property\n    def duration_seconds(self):\n        if self.completed_at and self.started_at:\n            return (self.completed_at - self.started_at).total_seconds()\n        return None\n\nclass GitHubCredentials(db.Model):\n    __tablename__ = 'github_credentials'\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(100), unique=True, nullable=False)\n    encrypted_token = db.Column(db.Text, nullable=False)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    last_used_at = db.Column(db.DateTime)\n","size_bytes":11806},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-dance>=7.1.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"flask-login>=0.6.3\",\n    \"oauthlib>=3.3.1\",\n    \"pyjwt>=2.10.1\",\n    \"sqlalchemy>=2.0.43\",\n    \"werkzeug>=3.1.3\",\n    \"flask-wtf>=1.2.2\",\n    \"wtforms>=3.2.1\",\n    \"pillow>=11.3.0\",\n]\n","size_bytes":493},"replit.md":{"content":"# Overview\n\nThis is an advanced digital portfolio web application built with Flask that showcases projects and achievements with AI-powered features. The system includes a public portfolio area, admin dashboard, user authentication, and enhanced features like AI recommendations, interactive career timeline, skills comparator, and complete multilingual support (Portuguese/English) with instant language switching. The application uses PostgreSQL database and includes modern UI/UX with Bootstrap 5.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# Recent Changes (Updated August 12, 2025)\n\n- Enhanced \"Let's Work Together\" section with modern CTA design featuring:\n  - Animated background with floating shapes and elements\n  - Professional gradient design with glassmorphism effects\n  - Interactive contact buttons with icons and hover animations\n  - Trust indicators and feature highlights\n  - Full responsive design for all devices\n\n- Transformed featured projects section with:\n  - Interactive project cards with hover zoom and shadow effects\n  - Modern card design with gradient overlays\n  - Enhanced project stats and tags display\n  - Smooth animations and microinteractions\n  - Professional typography and spacing\n\n- Updated internationalization support:\n  - Added new i18n keys for enhanced sections\n  - Complete bilingual support (Portuguese/English) for new content\n  - Instant language switching functionality\n\n# System Architecture\n\n## Frontend Architecture\nThe application uses a traditional server-side rendered architecture with Jinja2 templates. The frontend is built with Bootstrap 5 for responsive design and styling, Font Awesome for icons, and custom CSS for additional styling. JavaScript provides client-side enhancements like tooltips, auto-hiding alerts, and search form improvements.\n\n## Backend Architecture\nThe backend follows the Flask framework pattern with a modular structure:\n\n- **Application Factory Pattern**: The Flask app is configured in `app.py` with database initialization and login management\n- **Blueprint Architecture**: Routes are organized in `routes.py` with clear separation between public, admin, and authentication endpoints\n- **Model-View-Controller (MVC)**: Models are defined in `models.py`, views are handled through templates, and controllers are in the routes file\n- **Form Handling**: WTForms integration provides form validation and CSRF protection through `forms.py`\n- **File Management**: Utility functions in `utils.py` handle image uploads, resizing, and file operations\n\n## Data Storage Solutions\nThe application uses SQLAlchemy ORM with Flask-SQLAlchemy for database operations. The database schema includes:\n\n- **User Management**: User model with authentication support via Flask-Login, including language preferences\n- **Content Management**: Project, Category, and Tag models with many-to-many relationships\n- **Interaction Features**: Comment and Like models for user engagement\n- **Portfolio Content**: AboutMe model for personal information display\n- **Internationalization**: Complete bilingual support (Portuguese/English) with client-side switching and user preference storage\n\nThe database supports PostgreSQL through environment configuration with connection pooling and automatic reconnection features. User preferences including language settings are stored in the database for authenticated users.\n\n## Authentication and Authorization\nUser authentication is handled through Flask-Login with session-based management. The system includes:\n\n- **User Registration/Login**: Standard email/password authentication with password hashing using Werkzeug\n- **Admin Authorization**: Role-based access control with admin flags for content management\n- **Session Management**: Remember me functionality and secure session handling\n- **CSRF Protection**: Built-in protection through Flask-WTF\n\n## File Upload System\nImage handling includes automatic resizing using Pillow, secure filename generation, and organized storage in the static uploads directory. The system supports common image formats with file size limitations.\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **Flask**: Web framework for the application\n- **Flask-SQLAlchemy**: Database ORM integration\n- **Flask-Login**: User session management\n- **Flask-WTF**: Form handling and CSRF protection\n- **WTForms**: Form validation and rendering\n\n## Frontend Dependencies\n- **Bootstrap 5**: CSS framework for responsive design (via CDN)\n- **Font Awesome 6**: Icon library (via CDN)\n- **Pillow**: Python imaging library for image processing\n\n## Database Integration\n- **SQLAlchemy**: Database abstraction layer\n- **PostgreSQL**: Primary database (configured via DATABASE_URL environment variable)\n\n## Security and Utilities\n- **Werkzeug**: Password hashing and security utilities\n- **ProxyFix**: Middleware for handling reverse proxy headers\n\n## Environment Configuration\nThe application relies on environment variables for:\n- **SESSION_SECRET**: Flask session encryption key\n- **DATABASE_URL**: Database connection string\n\n## Development Dependencies\n- **Python 3.x**: Runtime environment\n- **Flask development server**: For local development and testing","size_bytes":5224},"routes.py":{"content":"import os\nfrom flask import render_template, url_for, flash, redirect, request, jsonify, abort\nfrom flask_login import login_user, current_user, logout_user, login_required\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom sqlalchemy import or_, desc\nfrom app import app, db\nfrom models import User, Project, Category, Comment, Like, Tag, AboutMe, project_tags, GitHubRepository, GitHubRepositoryLanguage\nfrom forms import LoginForm, RegisterForm, ProjectForm, CategoryForm, CommentForm, SearchForm, AboutMeForm, UserPromoteForm, UserDemoteForm, UserActivateForm, UserDeactivateForm\nfrom utils import save_picture, delete_picture, parse_tags, admin_required, super_admin_required, log_admin_action\nfrom github_sync import GitHubSyncService\n\n@app.context_processor\ndef inject_about_me():\n    \"\"\"Make AboutMe data available to all templates\"\"\"\n    about_me = AboutMe.query.first()\n    return dict(about_me=about_me)\n\n# Public routes\n@app.route('/')\ndef index():\n    search_form = SearchForm()\n    featured_projects = Project.query.filter_by(is_published=True, is_featured=True).limit(3).all()\n    recent_projects = Project.query.filter_by(is_published=True).order_by(desc(Project.created_at)).limit(6).all()\n    return render_template('index.html', featured_projects=featured_projects, \n                         recent_projects=recent_projects, search_form=search_form)\n\n@app.route('/projects')\ndef projects():\n    search_form = SearchForm()\n    page = request.args.get('page', 1, type=int)\n    category_id = request.args.get('category', type=int)\n    language = request.args.get('language', type=str)\n    \n    # Get CMS projects\n    cms_query = Project.query.filter_by(is_published=True)\n    if category_id:\n        cms_query = cms_query.filter_by(category_id=category_id)\n    \n    cms_projects = cms_query.order_by(desc(Project.created_at)).paginate(\n        page=page, per_page=6, error_out=False)\n    \n    # Get GitHub repositories (with error handling)\n    github_repos = []\n    all_languages = []\n    try:\n        github_service = GitHubSyncService()\n        github_repos = github_service.get_repositories_by_language(language, limit=20)\n        all_languages = github_service.get_all_languages()\n    except Exception as e:\n        print(f\"GitHub sync error: {e}\")\n        # Continue without GitHub data\n    \n    categories = Category.query.all()\n    \n    return render_template('portfolio/projects.html', \n                         projects=cms_projects, \n                         github_repos=github_repos,\n                         categories=categories, \n                         all_languages=all_languages,\n                         current_category=category_id,\n                         current_language=language, \n                         search_form=search_form)\n\n@app.route('/project/<int:id>')\ndef project_detail(id):\n    search_form = SearchForm()\n    project = Project.query.get_or_404(id)\n    \n    # Increment view count\n    project.views_count += 1\n    db.session.commit()\n    \n    comment_form = CommentForm()\n    comments = Comment.query.filter_by(project_id=id).order_by(desc(Comment.created_at)).all()\n    \n    # Check if current user liked this project\n    user_liked = False\n    if current_user.is_authenticated:\n        user_liked = Like.query.filter_by(user_id=current_user.id, project_id=id).first() is not None\n    \n    return render_template('portfolio/project_detail.html', project=project, \n                         comment_form=comment_form, comments=comments, \n                         user_liked=user_liked, search_form=search_form)\n\n@app.route('/about')\ndef about():\n    search_form = SearchForm()\n    return render_template('portfolio/about.html', search_form=search_form)\n\n@app.route('/search')\ndef search():\n    search_form = SearchForm()\n    query = request.args.get('query', '')\n    page = request.args.get('page', 1, type=int)\n    \n    if query:\n        projects = Project.query.filter(\n            Project.is_published == True,\n            or_(\n                Project.title.contains(query),\n                Project.description.contains(query),\n                Project.content.contains(query)\n            )\n        ).order_by(desc(Project.created_at)).paginate(\n            page=page, per_page=6, error_out=False)\n    else:\n        projects = Project.query.filter_by(is_published=True).paginate(\n            page=page, per_page=6, error_out=False)\n    \n    return render_template('search.html', projects=projects, query=query, search_form=search_form)\n\n# Authentication routes\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n    \n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(email=form.email.data).first()\n        if user and check_password_hash(user.password_hash, form.password.data):\n            login_user(user, remember=form.remember_me.data)\n            next_page = request.args.get('next')\n            if not next_page or not next_page.startswith('/'):\n                next_page = url_for('index')\n            flash('Login realizado com sucesso!', 'success')\n            return redirect(next_page)\n        flash('Email ou senha inválidos', 'danger')\n    \n    return render_template('login.html', form=form)\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n    \n    form = RegisterForm()\n    if form.validate_on_submit():\n        # Check if user already exists\n        if User.query.filter_by(email=form.email.data).first():\n            flash('Email já cadastrado', 'danger')\n            return render_template('register.html', form=form)\n        \n        if User.query.filter_by(username=form.username.data).first():\n            flash('Nome de usuário já em uso', 'danger')\n            return render_template('register.html', form=form)\n        \n        user = User(\n            username=form.username.data,\n            email=form.email.data,\n            full_name=form.full_name.data,\n            password_hash=generate_password_hash(form.password.data)\n        )\n        db.session.add(user)\n        db.session.commit()\n        flash('Cadastro realizado com sucesso!', 'success')\n        return redirect(url_for('login'))\n    \n    return render_template('register.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Você foi desconectado', 'info')\n    return redirect(url_for('index'))\n\n# Comment and Like routes\n@app.route('/add_comment/<int:project_id>', methods=['POST'])\n@login_required\ndef add_comment(project_id):\n    form = CommentForm()\n    if form.validate_on_submit():\n        comment = Comment(\n            content=form.content.data,\n            user_id=current_user.id,\n            project_id=project_id\n        )\n        db.session.add(comment)\n        db.session.commit()\n        flash('Comentário adicionado com sucesso!', 'success')\n    return redirect(url_for('project_detail', id=project_id))\n\n@app.route('/toggle_like/<int:project_id>', methods=['POST'])\n@login_required\ndef toggle_like(project_id):\n    project = Project.query.get_or_404(project_id)\n    like = Like.query.filter_by(user_id=current_user.id, project_id=project_id).first()\n    \n    if like:\n        db.session.delete(like)\n        liked = False\n    else:\n        like = Like(user_id=current_user.id, project_id=project_id)\n        db.session.add(like)\n        liked = True\n    \n    db.session.commit()\n    return jsonify({\n        'liked': liked,\n        'likes_count': project.likes_count\n    })\n\n# Admin routes\n@app.route('/admin')\n@login_required\ndef admin_dashboard():\n    if not current_user.is_admin:\n        abort(403)\n    \n    total_projects = Project.query.count()\n    published_projects = Project.query.filter_by(is_published=True).count()\n    total_comments = Comment.query.count()\n    total_likes = Like.query.count()\n    \n    recent_projects = Project.query.order_by(desc(Project.created_at)).limit(5).all()\n    recent_comments = Comment.query.order_by(desc(Comment.created_at)).limit(5).all()\n    \n    # Get GitHub sync information\n    github_service = GitHubSyncService()\n    last_sync = github_service.get_last_sync_info('cDorth')\n    github_repos_count = GitHubRepository.query.count()\n    \n    return render_template('admin/dashboard.html', \n                         total_projects=total_projects,\n                         published_projects=published_projects,\n                         total_comments=total_comments,\n                         total_likes=total_likes,\n                         recent_projects=recent_projects,\n                         recent_comments=recent_comments,\n                         last_github_sync=last_sync,\n                         github_repos_count=github_repos_count)\n\n@app.route('/admin/projects')\n@login_required\ndef admin_projects():\n    if not current_user.is_admin:\n        abort(403)\n    \n    page = request.args.get('page', 1, type=int)\n    projects = Project.query.order_by(desc(Project.created_at)).paginate(\n        page=page, per_page=10, error_out=False)\n    \n    return render_template('admin/projects.html', projects=projects)\n\n@app.route('/admin/project/new', methods=['GET', 'POST'])\n@login_required\ndef admin_new_project():\n    if not current_user.is_admin:\n        abort(403)\n    \n    form = ProjectForm()\n    if form.validate_on_submit():\n        project = Project(\n            title=form.title.data,\n            description=form.description.data,\n            content=form.content.data,\n            demo_url=form.demo_url.data,\n            github_url=form.github_url.data,\n            category_id=form.category_id.data if form.category_id.data else None,\n            is_published=form.is_published.data,\n            is_featured=form.is_featured.data\n        )\n        \n        if form.image.data:\n            picture_file = save_picture(form.image.data)\n            project.image_filename = picture_file\n        \n        db.session.add(project)\n        db.session.flush()  # Get project ID\n        \n        # Handle tags\n        tags_list = parse_tags(form.tags.data)\n        for tag_name in tags_list:\n            tag = Tag.query.filter_by(name=tag_name).first()\n            if not tag:\n                tag = Tag(name=tag_name)\n                db.session.add(tag)\n            project.tags.append(tag)\n        \n        db.session.commit()\n        flash('Project created successfully!', 'success')\n        return redirect(url_for('admin_projects'))\n    \n    return render_template('admin/project_form.html', form=form, title='New Project')\n\n@app.route('/admin/project/<int:id>/edit', methods=['GET', 'POST'])\n@login_required\ndef admin_edit_project(id):\n    if not current_user.is_admin:\n        abort(403)\n    \n    project = Project.query.get_or_404(id)\n    form = ProjectForm(obj=project)\n    \n    if form.validate_on_submit():\n        project.title = form.title.data\n        project.description = form.description.data\n        project.content = form.content.data\n        project.demo_url = form.demo_url.data\n        project.github_url = form.github_url.data\n        project.category_id = form.category_id.data if form.category_id.data else None\n        project.is_published = form.is_published.data\n        project.is_featured = form.is_featured.data\n        \n        if form.image.data:\n            if project.image_filename:\n                delete_picture(project.image_filename)\n            picture_file = save_picture(form.image.data)\n            project.image_filename = picture_file\n        \n        # Clear existing tags and add new ones\n        project.tags.clear()\n        tags_list = parse_tags(form.tags.data)\n        for tag_name in tags_list:\n            tag = Tag.query.filter_by(name=tag_name).first()\n            if not tag:\n                tag = Tag(name=tag_name)\n                db.session.add(tag)\n            project.tags.append(tag)\n        \n        db.session.commit()\n        flash('Project updated successfully!', 'success')\n        return redirect(url_for('admin_projects'))\n    \n    # Pre-populate tags field\n    form.tags.data = ', '.join([tag.name for tag in project.tags])\n    \n    return render_template('admin/project_form.html', form=form, project=project, title='Edit Project')\n\n@app.route('/admin/project/<int:id>/delete', methods=['POST'])\n@login_required\ndef admin_delete_project(id):\n    if not current_user.is_admin:\n        abort(403)\n    \n    project = Project.query.get_or_404(id)\n    \n    if project.image_filename:\n        delete_picture(project.image_filename)\n    \n    db.session.delete(project)\n    db.session.commit()\n    flash('Project deleted successfully!', 'success')\n    return redirect(url_for('admin_projects'))\n\n@app.route('/admin/categories')\n@login_required\ndef admin_categories():\n    if not current_user.is_admin:\n        abort(403)\n    \n    categories = Category.query.all()\n    return render_template('admin/categories.html', categories=categories)\n\n@app.route('/admin/category/new', methods=['GET', 'POST'])\n@login_required\ndef admin_new_category():\n    if not current_user.is_admin:\n        abort(403)\n    \n    form = CategoryForm()\n    if form.validate_on_submit():\n        category = Category(\n            name=form.name.data,\n            description=form.description.data\n        )\n        db.session.add(category)\n        db.session.commit()\n        flash('Category created successfully!', 'success')\n        return redirect(url_for('admin_categories'))\n    \n    return render_template('admin/category_form.html', form=form, title='New Category')\n\n@app.route('/admin/about', methods=['GET', 'POST'])\n@login_required\ndef admin_about():\n    if not current_user.is_admin:\n        abort(403)\n    \n    about_me = AboutMe.query.first()\n    if not about_me:\n        about_me = AboutMe(title='About Me', content='Write your story here...')\n    \n    form = AboutMeForm(obj=about_me)\n    \n    if form.validate_on_submit():\n        about_me.title = form.title.data\n        about_me.content = form.content.data\n        about_me.linkedin_url = form.linkedin_url.data\n        about_me.github_url = form.github_url.data\n        about_me.email = form.email.data\n        about_me.phone = form.phone.data\n        \n        if form.image.data:\n            if about_me.image_filename:\n                delete_picture(about_me.image_filename)\n            picture_file = save_picture(form.image.data)\n            about_me.image_filename = picture_file\n        \n        if about_me.id:\n            db.session.commit()\n        else:\n            db.session.add(about_me)\n            db.session.commit()\n        \n        flash('About Me updated successfully!', 'success')\n        return redirect(url_for('admin_about'))\n    \n    return render_template('admin/about_form.html', form=form, about_me=about_me)\n\n\n\n# Admin User Management Routes\n@app.route('/admin/users')\n@admin_required\ndef admin_users():\n    \"\"\"Admin dashboard with user management\"\"\"\n    users = User.query.order_by(User.created_at.desc()).all()\n    \n    # Get admin logs for audit trail\n    from models import AdminLog\n    recent_logs = AdminLog.query.order_by(AdminLog.created_at.desc()).limit(10).all()\n    \n    # Forms for user actions\n    promote_form = UserPromoteForm()\n    demote_form = UserDemoteForm()\n    activate_form = UserActivateForm()\n    deactivate_form = UserDeactivateForm()\n    \n    return render_template('admin/users.html', \n                         title='User Management',\n                         users=users, \n                         recent_logs=recent_logs,\n                         promote_form=promote_form,\n                         demote_form=demote_form,\n                         activate_form=activate_form,\n                         deactivate_form=deactivate_form)\n\n@app.route('/admin/promote_user', methods=['POST'])\n@admin_required\ndef promote_user():\n    \"\"\"Promote a user to admin\"\"\"\n    form = UserPromoteForm()\n    \n    if form.validate_on_submit():\n        user_id = int(form.user_id.data)\n        target_user = User.query.get_or_404(user_id)\n        \n        if target_user.is_admin:\n            flash('User is already an admin.', 'warning')\n        else:\n            target_user.is_admin = True\n            db.session.commit()\n            \n            # Log the action\n            log_admin_action(\n                admin_user=current_user,\n                action='promote_to_admin',\n                target_user=target_user,\n                description=f'User {target_user.email} promoted to admin by {current_user.email}'\n            )\n            \n            flash(f'User {target_user.username} promoted to admin successfully!', 'success')\n    \n    return redirect(url_for('admin_users'))\n\n@app.route('/admin/demote_user', methods=['POST'])\n@admin_required\ndef demote_user():\n    \"\"\"Demote a user from admin (super admin only for other admins)\"\"\"\n    form = UserDemoteForm()\n    \n    if form.validate_on_submit():\n        user_id = int(form.user_id.data)\n        target_user = User.query.get_or_404(user_id)\n        \n        # Prevent removing super admin privileges\n        if target_user.is_super_admin:\n            flash('Cannot remove super admin privileges. Super admin is protected.', 'danger')\n            return redirect(url_for('admin_users'))\n        \n        # Only super admin can demote other admins\n        if target_user.is_admin and not current_user.is_super_admin:\n            flash('Only super admin can demote other administrators.', 'danger')\n            return redirect(url_for('admin_users'))\n        \n        if not target_user.is_admin:\n            flash('User is not an admin.', 'warning')\n        else:\n            target_user.is_admin = False\n            db.session.commit()\n            \n            # Log the action\n            log_admin_action(\n                admin_user=current_user,\n                action='demote_from_admin',\n                target_user=target_user,\n                description=f'User {target_user.email} demoted from admin by {current_user.email}'\n            )\n            \n            flash(f'User {target_user.username} demoted from admin successfully!', 'success')\n    \n    return redirect(url_for('admin_users'))\n\n@app.route('/admin/deactivate_user', methods=['POST'])\n@admin_required\ndef deactivate_user():\n    \"\"\"Deactivate a user account\"\"\"\n    form = UserDeactivateForm()\n    \n    if form.validate_on_submit():\n        user_id = int(form.user_id.data)\n        target_user = User.query.get_or_404(user_id)\n        \n        # Prevent deactivating super admin\n        if target_user.is_super_admin:\n            flash('Cannot deactivate super admin account. Super admin is protected.', 'danger')\n            return redirect(url_for('admin_users'))\n        \n        # Only super admin can deactivate other admins\n        if target_user.is_admin and not current_user.is_super_admin:\n            flash('Only super admin can deactivate other administrators.', 'danger')\n            return redirect(url_for('admin_users'))\n        \n        if not target_user.is_active:\n            flash('User is already deactivated.', 'warning')\n        else:\n            target_user.is_active = False\n            db.session.commit()\n            \n            # Log the action\n            log_admin_action(\n                admin_user=current_user,\n                action='deactivate_user',\n                target_user=target_user,\n                description=f'User {target_user.email} deactivated by {current_user.email}'\n            )\n            \n            flash(f'User {target_user.username} deactivated successfully!', 'success')\n    \n    return redirect(url_for('admin_users'))\n\n@app.route('/admin/activate_user', methods=['POST'])\n@admin_required\ndef activate_user():\n    \"\"\"Activate a user account\"\"\"\n    form = UserActivateForm()\n    \n    if form.validate_on_submit():\n        user_id = int(form.user_id.data)\n        target_user = User.query.get_or_404(user_id)\n        \n        if target_user.is_active:\n            flash('User is already active.', 'warning')\n        else:\n            target_user.is_active = True\n            db.session.commit()\n            \n            # Log the action\n            log_admin_action(\n                admin_user=current_user,\n                action='activate_user',\n                target_user=target_user,\n                description=f'User {target_user.email} activated by {current_user.email}'\n            )\n            \n            flash(f'User {target_user.username} activated successfully!', 'success')\n    \n    return redirect(url_for('admin_users'))\n\n@app.route('/admin/logs')\n@admin_required\ndef admin_logs():\n    \"\"\"View admin action logs\"\"\"\n    page = request.args.get('page', 1, type=int)\n    \n    from models import AdminLog\n    logs = AdminLog.query.order_by(AdminLog.created_at.desc()).paginate(\n        page=page, per_page=50, error_out=False)\n    \n    return render_template('admin/logs.html', title='Admin Logs', logs=logs)\n\n@app.route('/admin/github-sync', methods=['GET', 'POST'])\n@admin_required\ndef admin_github_sync():\n    \"\"\"Sync GitHub repositories\"\"\"\n    github_service = GitHubSyncService()\n    \n    # Get the current authenticated GitHub user\n    github_user = None\n    username = None\n    try:\n        github_user_data = github_service.client.get_authenticated_user()\n        if github_user_data:\n            username = github_user_data.get('login')\n            github_user = github_user_data\n    except Exception as e:\n        flash(f'Failed to get GitHub user info: {e}', 'warning')\n    \n    if request.method == 'POST':\n        sync_type = request.form.get('sync_type', 'authenticated')\n        target_username = request.form.get('username', username)\n        \n        if sync_type == 'public' and target_username:\n            # Use public sync for any username\n            from github_public_sync import sync_user_public_repos\n            success, message, repos_synced = sync_user_public_repos(target_username)\n            \n            if success:\n                flash(f'GitHub public sync completed! Synced {repos_synced} repositories for user {target_username}.', 'success')\n            else:\n                flash(f'GitHub public sync failed: {message}', 'danger')\n        else:\n            # Use authenticated sync\n            if not username:\n                flash('GitHub user not found. Please check your GitHub connection.', 'danger')\n            else:\n                success, message, repos_synced = github_service.sync_user_repositories(username)\n                \n                if success:\n                    flash(f'GitHub sync completed successfully! Synced {repos_synced} repositories for user {username}.', 'success')\n                else:\n                    flash(f'GitHub sync failed: {message}', 'danger')\n    \n    # Get current sync status\n    last_sync = github_service.get_last_sync_info(username) if username else None\n    github_repos = GitHubRepository.query.order_by(desc(GitHubRepository.last_sync_at)).limit(10).all()\n    total_repos = GitHubRepository.query.count()\n    all_languages = github_service.get_all_languages()\n    \n    return render_template('admin/github_sync.html', \n                         last_sync=last_sync,\n                         github_repos=github_repos,\n                         total_repos=total_repos,\n                         all_languages=all_languages,\n                         github_user=github_user,\n                         username=username)\n\n# Error handlers\n@app.errorhandler(403)\ndef forbidden(error):\n    return render_template('errors/403.html'), 403\n\n@app.errorhandler(404)\ndef page_not_found(error):\n    return render_template('errors/404.html'), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    db.session.rollback()\n    return render_template('errors/500.html'), 500\n\n# New feature routes\n@app.route('/timeline')\ndef timeline():\n    \"\"\"Career timeline page\"\"\"\n    return render_template('timeline.html')\n\n@app.route('/skills-comparator')\ndef skills_comparator():\n    \"\"\"Skills comparison tool\"\"\"\n    return render_template('skills-comparator.html')\n","size_bytes":24128},"seed_data.py":{"content":"\"\"\"\nSeed script to populate the database with initial sample data.\nRun this script to add sample categories and a demo project.\n\"\"\"\n\nimport os\nimport sys\nfrom datetime import datetime\n\n# Add the current directory to the Python path\nsys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n\nfrom app import app, db\nfrom models import User, Category, Project, Tag, AboutMe, project_tags\nfrom werkzeug.security import generate_password_hash\n\ndef seed_database():\n    \"\"\"Populate the database with initial data\"\"\"\n    with app.app_context():\n        print(\"Starting database seeding...\")\n        \n        # Create categories\n        categories_data = [\n            {\n                'name': 'Web Development',\n                'description': 'Full-stack web applications, websites, and web-based tools.'\n            },\n            {\n                'name': 'Mobile Apps',\n                'description': 'iOS and Android applications, cross-platform mobile solutions.'\n            },\n            {\n                'name': 'Data Science',\n                'description': 'Data analysis, machine learning, and data visualization projects.'\n            },\n            {\n                'name': 'DevOps',\n                'description': 'Infrastructure, deployment, and automation tools.'\n            },\n            {\n                'name': 'UI/UX Design',\n                'description': 'User interface design, user experience research, and prototypes.'\n            },\n            {\n                'name': 'Open Source',\n                'description': 'Contributions to open source projects and community tools.'\n            }\n        ]\n        \n        print(\"Creating categories...\")\n        for cat_data in categories_data:\n            existing_category = Category.query.filter_by(name=cat_data['name']).first()\n            if not existing_category:\n                category = Category(\n                    name=cat_data['name'],\n                    description=cat_data['description']\n                )\n                db.session.add(category)\n                print(f\"  - Added category: {cat_data['name']}\")\n            else:\n                print(f\"  - Category already exists: {cat_data['name']}\")\n        \n        db.session.commit()\n        \n        # Create tags\n        tags_data = [\n            'Python', 'JavaScript', 'React', 'Flask', 'Django', 'Node.js',\n            'HTML', 'CSS', 'Bootstrap', 'Tailwind', 'MongoDB', 'PostgreSQL',\n            'MySQL', 'Redis', 'Docker', 'AWS', 'Git', 'REST API',\n            'GraphQL', 'TypeScript', 'Vue.js', 'Angular', 'Machine Learning',\n            'TensorFlow', 'PyTorch', 'Pandas', 'NumPy', 'Jupyter',\n            'Linux', 'Bash', 'CI/CD', 'Kubernetes', 'Microservices'\n        ]\n        \n        print(\"Creating tags...\")\n        for tag_name in tags_data:\n            existing_tag = Tag.query.filter_by(name=tag_name).first()\n            if not existing_tag:\n                tag = Tag(name=tag_name)\n                db.session.add(tag)\n                print(f\"  - Added tag: {tag_name}\")\n        \n        db.session.commit()\n        \n        # Create sample AboutMe if it doesn't exist\n        about_me = AboutMe.query.first()\n        if not about_me:\n            print(\"Creating About Me section...\")\n            about_me = AboutMe(\n                title='About Me',\n                content='''<p>Welcome to my digital portfolio! I'm a passionate software developer with a love for creating innovative solutions and learning new technologies.</p>\n\n<h3>My Journey</h3>\n<p>My journey in software development started with curiosity and has evolved into a professional passion. I enjoy working on diverse projects that challenge me to grow and learn new skills.</p>\n\n<h3>Skills & Expertise</h3>\n<ul>\n<li><strong>Backend Development:</strong> Python, Flask, Django, Node.js</li>\n<li><strong>Frontend Development:</strong> JavaScript, React, Vue.js, HTML5, CSS3</li>\n<li><strong>Databases:</strong> PostgreSQL, MongoDB, Redis</li>\n<li><strong>DevOps:</strong> Docker, AWS, CI/CD, Linux</li>\n<li><strong>Tools:</strong> Git, VS Code, Postman, Figma</li>\n</ul>\n\n<h3>What I Do</h3>\n<p>I specialize in building full-stack web applications, designing user-friendly interfaces, and implementing scalable backend systems. I'm always eager to take on new challenges and collaborate on exciting projects.</p>\n\n<p>Feel free to explore my projects and get in touch if you'd like to collaborate!</p>''',\n                email='admin@portfolio.com',\n                linkedin_url='https://linkedin.com/in/yourprofile',\n                github_url='https://github.com/yourusername'\n            )\n            db.session.add(about_me)\n            db.session.commit()\n            print(\"  - Created About Me section\")\n        else:\n            print(\"About Me section already exists\")\n        \n        # Create a sample project if no projects exist\n        project_count = Project.query.count()\n        if project_count == 0:\n            print(\"Creating sample project...\")\n            \n            # Get the first category and some tags\n            web_dev_category = Category.query.filter_by(name='Web Development').first()\n            python_tag = Tag.query.filter_by(name='Python').first()\n            flask_tag = Tag.query.filter_by(name='Flask').first()\n            html_tag = Tag.query.filter_by(name='HTML').first()\n            \n            sample_project = Project(\n                title='Digital Portfolio System',\n                description='A comprehensive portfolio management system built with Flask, featuring admin controls, user authentication, and responsive design.',\n                content='''<p>This project is a full-featured digital portfolio system that allows users to showcase their work in a professional and organized manner.</p>\n\n<h3>Features</h3>\n<ul>\n<li>Admin dashboard for content management</li>\n<li>User authentication and registration</li>\n<li>Project showcase with categories and tags</li>\n<li>Comment and like system</li>\n<li>Responsive design with Bootstrap</li>\n<li>Search functionality</li>\n<li>File upload handling</li>\n</ul>\n\n<h3>Technology Stack</h3>\n<p>Built using modern web technologies including Flask, SQLAlchemy, Bootstrap, and PostgreSQL for a robust and scalable solution.</p>\n\n<h3>Implementation Highlights</h3>\n<p>The system implements secure user authentication, efficient database design with proper relationships, and a clean, responsive user interface that works well on all devices.</p>''',\n                category_id=web_dev_category.id if web_dev_category else None,\n                is_published=True,\n                is_featured=True,\n                demo_url='#',\n                github_url='https://github.com/yourusername/portfolio'\n            )\n            \n            db.session.add(sample_project)\n            db.session.flush()  # Get the project ID\n            \n            # Add tags to the project\n            if python_tag:\n                sample_project.tags.append(python_tag)\n            if flask_tag:\n                sample_project.tags.append(flask_tag)\n            if html_tag:\n                sample_project.tags.append(html_tag)\n            \n            db.session.commit()\n            print(\"  - Created sample project: Digital Portfolio System\")\n        else:\n            print(f\"Projects already exist ({project_count} projects found)\")\n        \n        print(\"Database seeding completed successfully!\")\n\nif __name__ == \"__main__\":\n    seed_database()\n","size_bytes":7472},"seed_enhanced_data.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nEnhanced data seeder for the digital portfolio\nCreates sample data for all new features: skills, timeline events, etc.\n\"\"\"\n\nimport json\nfrom datetime import datetime, date\nfrom app import app, db\nfrom models import (\n    User, Project, Category, Tag, project_tags, \n    Skill, ProjectSkill, TimelineEvent, Recommendation,\n    AboutMe\n)\n\ndef create_sample_skills():\n    \"\"\"Create sample skills data\"\"\"\n    skills_data = [\n        {'name': 'Python', 'level': 9, 'experience_years': 3, 'description': 'Linguagem principal para desenvolvimento backend', 'icon': 'fab fa-python', 'color': '#3776ab'},\n        {'name': 'JavaScript', 'level': 8, 'experience_years': 4, 'description': 'Desenvolvimento frontend e fullstack', 'icon': 'fab fa-js-square', 'color': '#f7df1e'},\n        {'name': 'Flask', 'level': 9, 'experience_years': 2.5, 'description': 'Framework web Python para APIs e aplicações', 'icon': 'fas fa-flask', 'color': '#000000'},\n        {'name': 'React', 'level': 7, 'experience_years': 2, 'description': 'Biblioteca para interfaces de usuário', 'icon': 'fab fa-react', 'color': '#61dafb'},\n        {'name': 'SQL', 'level': 8, 'experience_years': 3, 'description': 'Banco de dados relacional e consultas avançadas', 'icon': 'fas fa-database', 'color': '#336791'},\n        {'name': 'HTML/CSS', 'level': 9, 'experience_years': 4, 'description': 'Marcação e estilização web moderna', 'icon': 'fab fa-html5', 'color': '#e34f26'},\n        {'name': 'Bootstrap', 'level': 8, 'experience_years': 3, 'description': 'Framework CSS responsivo', 'icon': 'fab fa-bootstrap', 'color': '#7952b3'},\n        {'name': 'Git', 'level': 8, 'experience_years': 3.5, 'description': 'Controle de versão e colaboração', 'icon': 'fab fa-git-alt', 'color': '#f05032'},\n    ]\n    \n    created_skills = []\n    for skill_data in skills_data:\n        existing_skill = Skill.query.filter_by(name=skill_data['name']).first()\n        if not existing_skill:\n            skill = Skill(**skill_data)\n            db.session.add(skill)\n            created_skills.append(skill)\n    \n    db.session.commit()\n    print(f\"Created {len(created_skills)} skills\")\n    return Skill.query.all()\n\ndef create_timeline_events():\n    \"\"\"Create sample timeline events\"\"\"\n    events_data = [\n        {\n            'title': 'Início na Programação',\n            'description': 'Primeiros passos no mundo da programação com Python básico',\n            'event_date': date(2022, 3, 15),\n            'event_type': 'education',\n            'importance': 5,\n            'event_metadata': json.dumps({\n                'technologies': ['Python', 'HTML'],\n                'achievements': ['Primeiro programa funcional', 'Conceitos básicos de lógica']\n            })\n        },\n        {\n            'title': 'Primeiro Projeto Web',\n            'description': 'Desenvolvimento do primeiro website responsivo usando HTML, CSS e JavaScript',\n            'event_date': date(2022, 8, 20),\n            'event_type': 'project',\n            'importance': 4,\n            'event_metadata': json.dumps({\n                'technologies': ['HTML', 'CSS', 'JavaScript'],\n                'achievements': ['Website totalmente responsivo', 'Primeira experiência com DOM']\n            })\n        },\n        {\n            'title': 'Certificação Python Avançado',\n            'description': 'Concluído curso avançado de Python para desenvolvimento web',\n            'event_date': date(2023, 2, 10),\n            'event_type': 'achievement',\n            'importance': 3,\n            'event_metadata': json.dumps({\n                'technologies': ['Python', 'Flask', 'SQLAlchemy'],\n                'achievements': ['Certificado com nota máxima', 'Projeto final aprovado']\n            })\n        },\n        {\n            'title': 'Sistema de E-commerce',\n            'description': 'Desenvolvimento completo de plataforma de vendas online com painel administrativo',\n            'event_date': date(2023, 7, 5),\n            'event_type': 'project',\n            'importance': 5,\n            'event_metadata': json.dumps({\n                'technologies': ['Python', 'Flask', 'SQLAlchemy', 'Bootstrap', 'JavaScript'],\n                'achievements': ['Sistema completo de pagamento', 'Painel admin avançado', 'API RESTful']\n            })\n        },\n        {\n            'title': 'Portfólio Digital Interativo',\n            'description': 'Criação deste portfólio com funcionalidades avançadas e IA integrada',\n            'event_date': date(2024, 1, 15),\n            'event_type': 'project',\n            'importance': 5,\n            'event_metadata': json.dumps({\n                'technologies': ['Python', 'Flask', 'SQLite', 'Bootstrap', 'JavaScript', 'IA'],\n                'achievements': ['Sistema de recomendação IA', 'Timeline interativa', 'Comparador de habilidades']\n            })\n        }\n    ]\n    \n    created_events = []\n    for event_data in events_data:\n        existing_event = TimelineEvent.query.filter_by(title=event_data['title']).first()\n        if not existing_event:\n            event = TimelineEvent(**event_data)\n            db.session.add(event)\n            created_events.append(event)\n    \n    db.session.commit()\n    print(f\"Created {len(created_events)} timeline events\")\n    return created_events\n\ndef associate_skills_with_projects():\n    \"\"\"Associate existing skills with projects\"\"\"\n    skills = Skill.query.all()\n    projects = Project.query.all()\n    \n    if not skills or not projects:\n        print(\"No skills or projects found to associate\")\n        return\n    \n    # Define skill associations for different project types\n    skill_associations = {\n        'Python': ['Flask', 'SQL', 'Git'],\n        'JavaScript': ['HTML/CSS', 'Bootstrap', 'Git'],\n        'Flask': ['Python', 'SQL', 'HTML/CSS'],\n        'React': ['JavaScript', 'HTML/CSS', 'Git'],\n    }\n    \n    created_associations = 0\n    \n    for project in projects:\n        # Randomly assign 2-4 skills per project\n        import random\n        \n        # Primary skill (usually related to project title/description)\n        primary_skills = [s for s in skills if s.name in ['Python', 'JavaScript', 'Flask', 'React']]\n        if primary_skills:\n            primary_skill = random.choice(primary_skills)\n            \n            # Check if association already exists\n            existing = ProjectSkill.query.filter_by(\n                project_id=project.id, \n                skill_id=primary_skill.id\n            ).first()\n            \n            if not existing:\n                project_skill = ProjectSkill(\n                    project_id=project.id,\n                    skill_id=primary_skill.id,\n                    proficiency_used=random.randint(7, 10),\n                    is_primary=True\n                )\n                db.session.add(project_skill)\n                created_associations += 1\n                \n                # Add related skills\n                related_skill_names = skill_associations.get(primary_skill.name, [])\n                for skill_name in related_skill_names[:2]:  # Limit to 2 related skills\n                    related_skill = next((s for s in skills if s.name == skill_name), None)\n                    if related_skill:\n                        existing_related = ProjectSkill.query.filter_by(\n                            project_id=project.id,\n                            skill_id=related_skill.id\n                        ).first()\n                        \n                        if not existing_related:\n                            project_skill_related = ProjectSkill(\n                                project_id=project.id,\n                                skill_id=related_skill.id,\n                                proficiency_used=random.randint(5, 8),\n                                is_primary=False\n                            )\n                            db.session.add(project_skill_related)\n                            created_associations += 1\n    \n    db.session.commit()\n    print(f\"Created {created_associations} skill-project associations\")\n\ndef create_sample_about_me():\n    \"\"\"Create or update About Me section\"\"\"\n    existing_about = AboutMe.query.first()\n    \n    if not existing_about:\n        about_me = AboutMe(\n            title=\"Desenvolvedor Full Stack & Entusiasta de IA\",\n            content=\"\"\"\n            <p>Olá! Sou um desenvolvedor apaixonado por tecnologia e inovação, especializado em criar soluções web modernas e inteligentes. Com mais de 3 anos de experiência em desenvolvimento, tenho focado em <strong>Python</strong> e <strong>JavaScript</strong> para construir aplicações robustas e escaláveis.</p>\n            \n            <p>Minha jornada na programação começou com a curiosidade de entender como as coisas funcionam por trás das telas. Desde então, venho desenvolvendo projetos que combinam <strong>funcionalidade</strong>, <strong>design</strong> e <strong>experiência do usuário</strong>.</p>\n            \n            <h5>💡 O que me motiva:</h5>\n            <ul>\n                <li>Resolver problemas complexos com soluções elegantes</li>\n                <li>Integrar inteligência artificial em aplicações práticas</li>\n                <li>Criar interfaces intuitivas e responsivas</li>\n                <li>Aprender continuamente novas tecnologias</li>\n            </ul>\n            \n            <h5>🚀 Especialidades:</h5>\n            <ul>\n                <li><strong>Backend:</strong> Python, Flask, APIs RESTful, Banco de dados</li>\n                <li><strong>Frontend:</strong> JavaScript, HTML/CSS, Bootstrap, UI/UX</li>\n                <li><strong>Ferramentas:</strong> Git, SQLite, Deployment, Testes</li>\n                <li><strong>Soft Skills:</strong> Resolução de problemas, Trabalho em equipe, Comunicação</li>\n            </ul>\n            \n            <p>Estou sempre em busca de novos desafios e oportunidades para aplicar meu conhecimento em projetos que façam a diferença. Se você tem uma ideia ou projeto interessante, adoraria conversar!</p>\n            \"\"\",\n            linkedin_url=\"https://linkedin.com/in/developer\",\n            github_url=\"https://github.com/developer\",\n            email=\"dev@portfolio.com\",\n            phone=\"+55 11 99999-9999\"\n        )\n        db.session.add(about_me)\n        db.session.commit()\n        print(\"Created About Me section\")\n    else:\n        print(\"About Me section already exists\")\n\ndef main():\n    \"\"\"Run the enhanced data seeder\"\"\"\n    with app.app_context():\n        print(\"🌱 Seeding enhanced data...\")\n        \n        # Create skills\n        skills = create_sample_skills()\n        \n        # Create timeline events\n        create_timeline_events()\n        \n        # Associate skills with existing projects\n        associate_skills_with_projects()\n        \n        # Create/update About Me\n        create_sample_about_me()\n        \n        print(\"✅ Enhanced data seeding completed!\")\n        \n        # Print summary\n        total_skills = Skill.query.count()\n        total_events = TimelineEvent.query.count()\n        total_associations = ProjectSkill.query.count()\n        \n        print(f\"\\n📊 Database Summary:\")\n        print(f\"   Skills: {total_skills}\")\n        print(f\"   Timeline Events: {total_events}\")\n        print(f\"   Skill-Project Associations: {total_associations}\")\n        print(f\"   Projects: {Project.query.count()}\")\n        print(f\"   Categories: {Category.query.count()}\")\n\nif __name__ == '__main__':\n    main()","size_bytes":11506},"setup_github_credentials.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nScript to setup GitHub credentials from environment variables\n\"\"\"\nimport os\nimport sys\nfrom app import app, db\nfrom github_client import GitHubClient\nfrom models import GitHubCredentials\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef setup_credentials():\n    \"\"\"Setup GitHub credentials from environment\"\"\"\n    with app.app_context():\n        try:\n            # Create tables if they don't exist\n            db.create_all()\n            \n            client = GitHubClient()\n            \n            # Check if credentials already exist\n            existing = GitHubCredentials.query.filter_by(is_active=True).first()\n            if existing:\n                logger.info(\"GitHub credentials already exist in database\")\n                return True\n            \n            # Initialize from environment\n            success = client.initialize_credentials_from_env()\n            if success:\n                logger.info(\"GitHub credentials successfully migrated to database\")\n                return True\n            else:\n                logger.error(\"Failed to setup GitHub credentials\")\n                return False\n                \n        except Exception as e:\n            logger.error(f\"Error setting up credentials: {e}\")\n            return False\n\nif __name__ == \"__main__\":\n    success = setup_credentials()\n    sys.exit(0 if success else 1)","size_bytes":1422},"utils.py":{"content":"import os\nimport secrets\nfrom PIL import Image\nfrom flask import current_app\nfrom werkzeug.utils import secure_filename\n\ndef save_picture(form_picture, folder='uploads'):\n    \"\"\"Save uploaded picture with random filename\"\"\"\n    random_hex = secrets.token_hex(8)\n    _, f_ext = os.path.splitext(form_picture.filename)\n    picture_fn = random_hex + f_ext\n    picture_path = os.path.join(current_app.root_path, 'static', folder, picture_fn)\n    \n    # Create directory if it doesn't exist\n    os.makedirs(os.path.dirname(picture_path), exist_ok=True)\n    \n    # Resize image\n    output_size = (800, 600)\n    img = Image.open(form_picture)\n    img.thumbnail(output_size)\n    img.save(picture_path)\n    \n    return picture_fn\n\ndef delete_picture(filename, folder='uploads'):\n    \"\"\"Delete picture file\"\"\"\n    if filename:\n        picture_path = os.path.join(current_app.root_path, 'static', folder, filename)\n        if os.path.exists(picture_path):\n            os.remove(picture_path)\n\ndef parse_tags(tags_string):\n    \"\"\"Parse comma-separated tags string into list\"\"\"\n    if not tags_string:\n        return []\n    return [tag.strip() for tag in tags_string.split(',') if tag.strip()]\n\n# Admin utilities and decorators\nfrom functools import wraps\nfrom flask import abort, request, jsonify\nfrom flask_login import current_user\n\ndef admin_required(f):\n    \"\"\"Decorator to require admin privileges for a route.\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated:\n            return abort(403)\n        \n        if not current_user.is_admin:\n            return abort(403)\n            \n        if not current_user.active:\n            return abort(403)\n            \n        return f(*args, **kwargs)\n    return decorated_function\n\ndef super_admin_required(f):\n    \"\"\"Decorator to require super admin privileges for a route.\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated:\n            return abort(403)\n        \n        if not current_user.is_super_admin:\n            return abort(403)\n            \n        if not current_user.active:\n            return abort(403)\n            \n        return f(*args, **kwargs)\n    return decorated_function\n\ndef log_admin_action(admin_user, action, target_user=None, description=None):\n    \"\"\"Log an administrative action.\"\"\"\n    from app import db\n    from models import AdminLog\n    \n    log_entry = AdminLog(\n        admin_id=admin_user.id if admin_user else None,\n        action=action,\n        target_user_id=target_user.id if target_user else None,\n        target_user_email=target_user.email if target_user else None,\n        description=description\n    )\n    \n    db.session.add(log_entry)\n    db.session.commit()\n    \n    return log_entry\n","size_bytes":2787},"static/css/modern-style.css":{"content":"/* Modern Digital Portfolio - Advanced CSS */\n:root {\n    /* Tech Color Palette - Futuristic Neon */\n    --primary-color: #2563eb;\n    --primary-dark: #1d4ed8;\n    --primary-light: #3b82f6;\n    --secondary-color: #f59e0b;\n    --accent-color: #10b981;\n    --danger-color: #ef4444;\n    --warning-color: #f59e0b;\n    --success-color: #10b981;\n    \n    /* Tech Gradients */\n    --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n    --gradient-tech: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n    --gradient-neon: linear-gradient(135deg, #ff006e 0%, #8338ec 50%, #3a86ff 100%);\n    --gradient-cyber: linear-gradient(135deg, #00ffa3 0%, #dc1fff 100%);\n    \n    /* Language Colors */\n    --python-color: #ffde57;\n    --javascript-color: #f1e05a;\n    --html-color: #e34f26;\n    --css-color: #1572b6;\n    --typescript-color: #007acc;\n    --java-color: #b07219;\n    --csharp-color: #239120;\n    --php-color: #4f5d95;\n    --ruby-color: #701516;\n    --go-color: #00add8;\n    \n    /* Neutral Colors - Light Theme Updated */\n    --bg-primary: #ffffff;\n    --bg-secondary: #f8fafc;\n    --bg-tertiary: #f1f5f9;\n    --text-primary: #374151;\n    --text-secondary: #6b7280;\n    --text-muted: #9ca3af;\n    --border-color: #e2e8f0;\n    --border-light: #f1f5f9;\n    \n    /* Dark Theme Colors */\n    --dark-bg-primary: #0f172a;\n    --dark-bg-secondary: #1e293b;\n    --dark-bg-tertiary: #334155;\n    --dark-text-primary: #f8fafc;\n    --dark-text-secondary: #cbd5e1;\n    --dark-text-muted: #94a3b8;\n    --dark-border-color: #334155;\n    \n    /* Shadows & Effects */\n    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n    \n    /* Animations */\n    --transition-fast: 0.15s ease-in-out;\n    --transition-normal: 0.3s ease-in-out;\n    --transition-slow: 0.5s ease-in-out;\n    \n    /* Typography */\n    --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n    --font-mono: 'JetBrains Mono', 'Fira Code', Consolas, monospace;\n}\n\n/* ======================================\n   MODERN TECH CARDS - GITHUB REPOS\n   ====================================== */\n\n/* Force dark theme for projects page */\n.tech-dark-theme {\n    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #0f172a 100%);\n    min-height: 100vh;\n    color: #f8fafc;\n}\n\n.tech-dark-theme * {\n    border-color: rgba(100, 116, 139, 0.2) !important;\n    color: inherit;\n}\n\n/* Container for GitHub repositories with animations */\n.github-repos-container {\n    opacity: 0;\n    animation: fadeInUp 1s ease-out 0.5s forwards;\n}\n\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Modern Tech Card Base */\n.tech-card {\n    position: relative;\n    background: rgba(30, 41, 59, 0.7);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(100, 116, 139, 0.3);\n    border-radius: 20px;\n    padding: 0;\n    height: 100%;\n    overflow: hidden;\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n    animation: cardSlideIn 0.8s ease-out;\n    animation-fill-mode: both;\n}\n\n/* Staggered animation for cards */\n.tech-card:nth-child(1) { animation-delay: 0.1s; }\n.tech-card:nth-child(2) { animation-delay: 0.2s; }\n.tech-card:nth-child(3) { animation-delay: 0.3s; }\n.tech-card:nth-child(4) { animation-delay: 0.4s; }\n.tech-card:nth-child(5) { animation-delay: 0.5s; }\n.tech-card:nth-child(6) { animation-delay: 0.6s; }\n\n@keyframes cardSlideIn {\n    from {\n        opacity: 0;\n        transform: translateY(50px) scale(0.95);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0) scale(1);\n    }\n}\n\n/* Animated gradient border */\n.tech-card::before {\n    content: '';\n    position: absolute;\n    top: -2px;\n    left: -2px;\n    right: -2px;\n    bottom: -2px;\n    background: var(--gradient-neon);\n    border-radius: 22px;\n    z-index: -1;\n    opacity: 0;\n    transition: opacity 0.4s ease;\n    animation: borderRotate 4s linear infinite;\n}\n\n@keyframes borderRotate {\n    0% { background: var(--gradient-neon); }\n    25% { background: var(--gradient-tech); }\n    50% { background: var(--gradient-cyber); }\n    75% { background: var(--gradient-secondary); }\n    100% { background: var(--gradient-neon); }\n}\n\n/* Hover Effects */\n.tech-card:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: \n        0 25px 50px -12px rgba(0, 0, 0, 0.5),\n        0 0 30px rgba(59, 130, 246, 0.3);\n}\n\n.tech-card:hover::before {\n    opacity: 1;\n}\n\n/* Card Header */\n.tech-card-header {\n    background: rgba(51, 65, 85, 0.8);\n    border-bottom: 1px solid rgba(100, 116, 139, 0.2);\n    padding: 16px 20px 12px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.tech-repo-icon {\n    font-size: 1.5rem;\n    background: var(--gradient-tech);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.fork-badge {\n    background: var(--gradient-secondary) !important;\n    color: white !important;\n    padding: 4px 8px;\n    border-radius: 12px;\n    font-size: 0.75rem;\n    font-weight: 600;\n    animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.7; }\n}\n\n/* Card Body */\n.tech-card-body {\n    padding: 20px;\n    height: calc(100% - 60px);\n    display: flex;\n    flex-direction: column;\n}\n\n.tech-card-title {\n    font-family: var(--font-mono);\n    font-size: 1.2rem;\n    font-weight: 700;\n    color: #f8fafc;\n    margin-bottom: 12px;\n    background: var(--gradient-tech);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.tech-card-description {\n    color: #cbd5e1;\n    font-size: 0.9rem;\n    line-height: 1.6;\n    flex-grow: 1;\n    margin-bottom: 16px;\n}\n\n/* Language Badges */\n.tech-languages {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 6px;\n    margin-bottom: 16px;\n}\n\n.tech-lang-badge {\n    position: relative;\n    padding: 4px 10px;\n    border-radius: 16px;\n    font-size: 0.75rem;\n    font-weight: 600;\n    color: #1e293b;\n    transition: all 0.3s ease;\n    cursor: pointer;\n    overflow: hidden;\n}\n\n.tech-lang-badge::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    background: rgba(255, 255, 255, 0.3);\n    transition: all 0.3s ease;\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n}\n\n.tech-lang-badge:hover::before {\n    width: 100%;\n    height: 100%;\n}\n\n/* Language-specific colors */\n.tech-lang-badge.python { background: var(--python-color); }\n.tech-lang-badge.javascript { background: var(--javascript-color); }\n.tech-lang-badge.html { background: var(--html-color); color: white; }\n.tech-lang-badge.css { background: var(--css-color); color: white; }\n.tech-lang-badge.typescript { background: var(--typescript-color); color: white; }\n.tech-lang-badge.java { background: var(--java-color); color: white; }\n.tech-lang-badge.csharp { background: var(--csharp-color); color: white; }\n.tech-lang-badge.php { background: var(--php-color); color: white; }\n.tech-lang-badge.ruby { background: var(--ruby-color); color: white; }\n.tech-lang-badge.go { background: var(--go-color); color: white; }\n.tech-lang-badge.default { background: var(--gradient-primary); color: white; }\n\n/* Repository Stats */\n.tech-stats {\n    display: flex;\n    align-items: center;\n    gap: 16px;\n    margin-bottom: 16px;\n    padding: 8px 0;\n    border-top: 1px solid rgba(100, 116, 139, 0.2);\n    border-bottom: 1px solid rgba(100, 116, 139, 0.2);\n}\n\n.tech-stat-item {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    color: #94a3b8;\n    font-size: 0.85rem;\n}\n\n.tech-stat-icon {\n    color: #fbbf24;\n    font-size: 0.9rem;\n}\n\n/* GitHub Button */\n.tech-github-btn {\n    position: relative;\n    background: var(--gradient-tech);\n    color: white;\n    border: none;\n    padding: 10px 16px;\n    border-radius: 12px;\n    font-weight: 600;\n    font-size: 0.85rem;\n    text-decoration: none;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    transition: all 0.3s ease;\n    overflow: hidden;\n    margin-top: auto;\n}\n\n.tech-github-btn::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: var(--gradient-cyber);\n    transition: left 0.3s ease;\n    z-index: -1;\n}\n\n.tech-github-btn:hover::before {\n    left: 0;\n}\n\n.tech-github-btn:hover {\n    color: white;\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(79, 172, 254, 0.3);\n}\n\n/* Last Updated */\n.tech-last-updated {\n    color: #64748b;\n    font-size: 0.75rem;\n    margin-top: 8px;\n    padding-top: 8px;\n    border-top: 1px solid rgba(100, 116, 139, 0.1);\n}\n\n/* Responsive Grid */\n@media (min-width: 1200px) {\n    .tech-repos-grid {\n        display: grid;\n        grid-template-columns: repeat(3, 1fr);\n        gap: 24px;\n    }\n}\n\n@media (min-width: 768px) and (max-width: 1199px) {\n    .tech-repos-grid {\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        gap: 20px;\n    }\n}\n\n@media (max-width: 767px) {\n    .tech-repos-grid {\n        display: grid;\n        grid-template-columns: 1fr;\n        gap: 16px;\n    }\n    \n    .tech-card {\n        margin-bottom: 0;\n    }\n}\n\n/* Section Title Styling */\n.tech-section-title {\n    background: var(--gradient-neon);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    font-family: var(--font-mono);\n    font-weight: 700;\n    font-size: 2rem;\n    margin-bottom: 2rem;\n    text-align: center;\n    position: relative;\n}\n\n.tech-section-title::after {\n    content: '';\n    position: absolute;\n    bottom: -8px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 100px;\n    height: 3px;\n    background: var(--gradient-neon);\n    border-radius: 2px;\n}\n\n/* Base Styles */\n* {\n    box-sizing: border-box;\n}\n\nhtml {\n    scroll-behavior: smooth;\n}\n\nbody {\n    font-family: var(--font-primary);\n    background: var(--bg-primary);\n    color: var(--text-primary);\n    line-height: 1.6;\n    transition: background-color var(--transition-normal), color var(--transition-normal);\n}\n\n/* Dark Theme */\n[data-theme=\"dark\"] {\n    --bg-primary: var(--dark-bg-primary);\n    --bg-secondary: var(--dark-bg-secondary);\n    --bg-tertiary: var(--dark-bg-tertiary);\n    --text-primary: var(--dark-text-primary);\n    --text-secondary: var(--dark-text-secondary);\n    --text-muted: var(--dark-text-muted);\n    --border-color: var(--dark-border-color);\n}\n\n/* ======================================\n   FEATURED PROJECTS SECTION\n   ====================================== */\n\n.featured-projects-section {\n    position: relative;\n    background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);\n    overflow: hidden;\n}\n\n.featured-projects-section::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"grain\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"20\" cy=\"20\" r=\"0.5\" fill=\"%23000\" opacity=\"0.03\"/><circle cx=\"80\" cy=\"40\" r=\"0.3\" fill=\"%23000\" opacity=\"0.02\"/><circle cx=\"40\" cy=\"80\" r=\"0.4\" fill=\"%23000\" opacity=\"0.025\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grain)\"/></svg>');\n    pointer-events: none;\n}\n\n.section-badge {\n    display: inline-block;\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    color: white;\n    padding: 8px 20px;\n    border-radius: 50px;\n    font-size: 0.875rem;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    margin-bottom: 1rem;\n    animation: float 3s ease-in-out infinite;\n}\n\n.section-title {\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.section-divider {\n    width: 60px;\n    height: 4px;\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    border-radius: 2px;\n}\n\n.projects-carousel-container {\n    position: relative;\n    z-index: 2;\n}\n\n.featured-project-card {\n    position: relative;\n    height: 100%;\n    transition: all var(--transition-slow);\n    cursor: pointer;\n}\n\n.featured-project-card:hover {\n    transform: translateY(-10px) scale(1.02);\n}\n\n.card-inner {\n    background: var(--bg-primary);\n    border-radius: 20px;\n    overflow: hidden;\n    box-shadow: var(--shadow-lg);\n    transition: all var(--transition-slow);\n    border: 1px solid var(--border-color);\n    height: 100%;\n}\n\n.featured-project-card:hover .card-inner {\n    box-shadow: 0 25px 60px -10px rgba(0, 0, 0, 0.15);\n    border-color: var(--primary-color);\n}\n\n.project-image-container {\n    position: relative;\n    height: 240px;\n    overflow: hidden;\n}\n\n.project-image {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    transition: transform var(--transition-slow);\n}\n\n.featured-project-card:hover .project-image {\n    transform: scale(1.1);\n}\n\n.image-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, rgba(37, 99, 235, 0.9), rgba(245, 158, 11, 0.8));\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    transition: opacity var(--transition-normal);\n}\n\n.featured-project-card:hover .image-overlay {\n    opacity: 1;\n}\n\n.overlay-content {\n    text-align: center;\n    transform: translateY(20px);\n    transition: transform var(--transition-normal);\n}\n\n.featured-project-card:hover .overlay-content {\n    transform: translateY(0);\n}\n\n.view-project-btn {\n    background: white;\n    color: var(--primary-color);\n    padding: 12px 24px;\n    border-radius: 50px;\n    text-decoration: none;\n    font-weight: 600;\n    transition: all var(--transition-fast);\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.view-project-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n    color: var(--primary-color);\n}\n\n.project-badge {\n    position: absolute;\n    top: 15px;\n    left: 15px;\n    background: linear-gradient(135deg, var(--secondary-color), var(--warning-color));\n    color: white;\n    padding: 6px 12px;\n    border-radius: 20px;\n    font-size: 0.75rem;\n    font-weight: 600;\n    z-index: 3;\n}\n\n.project-content {\n    padding: 24px;\n}\n\n.project-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: 16px;\n}\n\n.project-title {\n    font-size: 1.25rem;\n    font-weight: 700;\n    color: var(--text-primary);\n    margin: 0;\n    line-height: 1.3;\n}\n\n.project-stats {\n    display: flex;\n    gap: 12px;\n}\n\n.stat-item {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    font-size: 0.875rem;\n    color: var(--text-muted);\n}\n\n.stat-item i {\n    font-size: 0.75rem;\n}\n\n.project-description {\n    color: var(--text-secondary);\n    line-height: 1.6;\n    margin-bottom: 20px;\n    font-size: 0.95rem;\n}\n\n.project-tags {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 8px;\n    margin-bottom: 20px;\n}\n\n.project-tag {\n    background: var(--bg-secondary);\n    color: var(--primary-color);\n    padding: 4px 12px;\n    border-radius: 15px;\n    font-size: 0.8rem;\n    font-weight: 500;\n    transition: all var(--transition-fast);\n}\n\n.project-tag:hover {\n    background: var(--primary-color);\n    color: white;\n}\n\n.project-tag.more-tags {\n    background: var(--primary-color);\n    color: white;\n}\n\n.project-actions {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.action-buttons {\n    display: flex;\n    gap: 8px;\n}\n\n.action-btn {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    padding: 8px 16px;\n    border-radius: 20px;\n    text-decoration: none;\n    font-size: 0.875rem;\n    font-weight: 500;\n    transition: all var(--transition-fast);\n}\n\n.action-btn.primary {\n    background: var(--primary-color);\n    color: white;\n}\n\n.action-btn.primary:hover {\n    background: var(--primary-dark);\n    color: white;\n    transform: translateY(-2px);\n}\n\n.action-btn.secondary {\n    background: var(--bg-secondary);\n    color: var(--text-primary);\n    border: 1px solid var(--border-color);\n}\n\n.action-btn.secondary:hover {\n    background: var(--text-primary);\n    color: white;\n    transform: translateY(-2px);\n}\n\n.like-btn {\n    background: none;\n    border: 2px solid var(--danger-color);\n    color: var(--danger-color);\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: all var(--transition-fast);\n}\n\n.like-btn:hover {\n    background: var(--danger-color);\n    color: white;\n    transform: scale(1.1);\n}\n\n.explore-all-btn {\n    display: inline-flex;\n    align-items: center;\n    gap: 12px;\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    color: white;\n    padding: 16px 32px;\n    border-radius: 50px;\n    text-decoration: none;\n    font-weight: 600;\n    font-size: 1.1rem;\n    transition: all var(--transition-normal);\n    box-shadow: var(--shadow-lg);\n}\n\n.explore-all-btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 15px 35px rgba(37, 99, 235, 0.3);\n    color: white;\n}\n\n/* ======================================\n   COLLABORATION CTA SECTION\n   ====================================== */\n\n.collaboration-cta-section {\n    position: relative;\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 50%, var(--secondary-color) 100%);\n    padding: 120px 0;\n    overflow: hidden;\n    color: white;\n}\n\n.cta-background {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n}\n\n.animated-shapes {\n    position: relative;\n    width: 100%;\n    height: 100%;\n}\n\n.shape {\n    position: absolute;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.1);\n    animation: float 8s ease-in-out infinite;\n}\n\n.shape-1 {\n    width: 120px;\n    height: 120px;\n    top: 10%;\n    left: 10%;\n    animation-delay: 0s;\n}\n\n.shape-2 {\n    width: 80px;\n    height: 80px;\n    top: 60%;\n    right: 15%;\n    animation-delay: 2s;\n}\n\n.shape-3 {\n    width: 150px;\n    height: 150px;\n    bottom: 20%;\n    left: 60%;\n    animation-delay: 4s;\n}\n\n.floating-elements {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n}\n\n.element {\n    position: absolute;\n    width: 60px;\n    height: 60px;\n    background: rgba(255, 255, 255, 0.08);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 24px;\n    color: rgba(255, 255, 255, 0.6);\n    animation: float 6s ease-in-out infinite;\n}\n\n.element-1 {\n    top: 20%;\n    right: 20%;\n    animation-delay: 1s;\n}\n\n.element-2 {\n    bottom: 30%;\n    left: 20%;\n    animation-delay: 3s;\n}\n\n.element-3 {\n    top: 50%;\n    left: 80%;\n    animation-delay: 5s;\n}\n\n.cta-content {\n    position: relative;\n    z-index: 10;\n}\n\n.collaboration-badge {\n    display: inline-block;\n    background: rgba(255, 255, 255, 0.15);\n    backdrop-filter: blur(10px);\n    padding: 10px 24px;\n    border-radius: 50px;\n    font-size: 0.9rem;\n    font-weight: 600;\n    margin-bottom: 24px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.cta-title {\n    font-size: clamp(2.5rem, 5vw, 4rem);\n    font-weight: 800;\n    margin-bottom: 24px;\n    line-height: 1.1;\n}\n\n.title-primary {\n    display: block;\n    color: white;\n}\n\n.title-accent {\n    background: linear-gradient(135deg, var(--secondary-color), var(--warning-color));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.cta-subtitle {\n    font-size: 1.25rem;\n    line-height: 1.6;\n    margin-bottom: 40px;\n    max-width: 600px;\n    margin-left: auto;\n    margin-right: auto;\n    opacity: 0.9;\n}\n\n.cta-features {\n    display: flex;\n    justify-content: center;\n    gap: 40px;\n    margin-bottom: 50px;\n    flex-wrap: wrap;\n}\n\n.feature-item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 12px;\n    text-align: center;\n}\n\n.feature-icon {\n    width: 70px;\n    height: 70px;\n    background: rgba(255, 255, 255, 0.15);\n    backdrop-filter: blur(10px);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 28px;\n    color: white;\n    border: 2px solid rgba(255, 255, 255, 0.2);\n    transition: all var(--transition-normal);\n}\n\n.feature-item:hover .feature-icon {\n    transform: translateY(-5px);\n    background: rgba(255, 255, 255, 0.25);\n    border-color: rgba(255, 255, 255, 0.4);\n}\n\n.cta-actions {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    margin-bottom: 60px;\n    flex-wrap: wrap;\n}\n\n.cta-btn {\n    display: flex;\n    align-items: center;\n    padding: 0;\n    border-radius: 16px;\n    text-decoration: none;\n    transition: all var(--transition-normal);\n    overflow: hidden;\n    position: relative;\n    min-width: 220px;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n}\n\n.cta-btn::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);\n    transition: left 0.5s ease;\n}\n\n.cta-btn:hover::before {\n    left: 100%;\n}\n\n.cta-btn:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);\n}\n\n.primary-btn {\n    background: white;\n    color: var(--primary-color);\n}\n\n.secondary-btn {\n    background: rgba(255, 255, 255, 0.15);\n    backdrop-filter: blur(15px);\n    color: white;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.tertiary-btn {\n    background: linear-gradient(135deg, #0077b5, #0e76a8);\n    color: white;\n}\n\n.btn-content {\n    display: flex;\n    align-items: center;\n    gap: 16px;\n    padding: 20px 24px;\n    width: 100%;\n}\n\n.btn-icon {\n    width: 50px;\n    height: 50px;\n    background: rgba(0, 0, 0, 0.1);\n    border-radius: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 20px;\n    flex-shrink: 0;\n}\n\n.primary-btn .btn-icon {\n    background: var(--primary-color);\n    color: white;\n}\n\n.btn-text {\n    text-align: left;\n    flex-grow: 1;\n}\n\n.btn-label {\n    display: block;\n    font-weight: 700;\n    font-size: 1.1rem;\n    margin-bottom: 2px;\n}\n\n.btn-subtitle {\n    display: block;\n    font-size: 0.85rem;\n    opacity: 0.8;\n}\n\n.trust-indicators {\n    display: flex;\n    justify-content: center;\n    gap: 40px;\n    flex-wrap: wrap;\n}\n\n.indicator {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    font-size: 0.95rem;\n    opacity: 0.8;\n}\n\n.indicator i {\n    font-size: 1.2rem;\n    color: var(--secondary-color);\n}\n\n/* Animations */\n@keyframes float {\n    0%, 100% {\n        transform: translateY(0px);\n    }\n    50% {\n        transform: translateY(-10px);\n    }\n}\n\n@keyframes pulse {\n    0%, 100% {\n        opacity: 0.8;\n    }\n    50% {\n        opacity: 1;\n    }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .cta-title {\n        font-size: 2.5rem;\n    }\n    \n    .cta-subtitle {\n        font-size: 1.1rem;\n    }\n    \n    .cta-features {\n        gap: 30px;\n    }\n    \n    .cta-actions {\n        flex-direction: column;\n        align-items: center;\n    }\n    \n    .cta-btn {\n        width: 100%;\n        max-width: 300px;\n    }\n    \n    .trust-indicators {\n        gap: 20px;\n    }\n    \n    .featured-project-card {\n        margin-bottom: 20px;\n    }\n    \n    .project-image-container {\n        height: 200px;\n    }\n}\n\n/* Enhanced Navigation */\n.navbar {\n    backdrop-filter: blur(20px);\n    border-bottom: 1px solid var(--border-light);\n    box-shadow: var(--shadow-sm);\n    transition: all var(--transition-normal);\n}\n\n/* Light theme navbar styling */\n[data-bs-theme=\"light\"] .navbar {\n    background: rgba(255, 255, 255, 0.95) !important;\n}\n\n[data-bs-theme=\"light\"] .navbar-nav .nav-link,\n[data-bs-theme=\"light\"] .navbar-brand {\n    color: #212529 !important;\n}\n\n[data-bs-theme=\"light\"] .navbar-nav .nav-link:hover,\n[data-bs-theme=\"light\"] .navbar-nav .nav-link:focus {\n    color: var(--primary-color) !important;\n}\n\n[data-bs-theme=\"light\"] .dropdown-item {\n    color: #212529 !important;\n}\n\n[data-bs-theme=\"light\"] .dropdown-item:hover,\n[data-bs-theme=\"light\"] .dropdown-item:focus {\n    color: var(--primary-color) !important;\n    background-color: var(--bg-secondary) !important;\n}\n\n/* Light theme button and text improvements */\n[data-bs-theme=\"light\"] .btn-outline-primary {\n    color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n[data-bs-theme=\"light\"] .btn-outline-primary:hover {\n    color: #ffffff;\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n/* Light theme navbar toggle */\n[data-bs-theme=\"light\"] .navbar-toggler {\n    border-color: var(--border-color);\n}\n\n[data-bs-theme=\"light\"] .navbar-toggler-icon {\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%2833, 37, 41, 0.75%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\");\n}\n\n[data-bs-theme=\"light\"] .text-muted {\n    color: #a3a3a3 !important;\n}\n\n[data-bs-theme=\"light\"] .text-secondary {\n    color: #787878 !important;\n}\n\n/* Footer Styling - High Specificity */\nbody footer,\nhtml body footer {\n    background: linear-gradient(135deg, #f8fafc, #f1f5f9) !important;\n    border-top: 1px solid #e2e8f0 !important;\n    color: #212529 !important;\n}\n\n/* Light theme footer - Very specific selectors */\nhtml[data-bs-theme=\"light\"] body footer,\nbody[data-bs-theme=\"light\"] footer,\n[data-bs-theme=\"light\"] footer,\nhtml:not([data-bs-theme=\"dark\"]) footer {\n    background: linear-gradient(135deg, #f8fafc, #f1f5f9) !important;\n    color: #212529 !important;\n    border-top: 1px solid #e2e8f0 !important;\n}\n\nhtml[data-bs-theme=\"light\"] body footer h5,\nhtml[data-bs-theme=\"light\"] body footer h6,\n[data-bs-theme=\"light\"] footer h5,\n[data-bs-theme=\"light\"] footer h6,\nhtml:not([data-bs-theme=\"dark\"]) footer h5,\nhtml:not([data-bs-theme=\"dark\"]) footer h6 {\n    color: #212529 !important;\n}\n\nhtml[data-bs-theme=\"light\"] body footer .text-muted,\n[data-bs-theme=\"light\"] footer .text-muted,\nhtml:not([data-bs-theme=\"dark\"]) footer .text-muted {\n    color: #6c757d !important;\n}\n\nhtml[data-bs-theme=\"light\"] body footer a.text-muted,\n[data-bs-theme=\"light\"] footer a.text-muted,\nhtml:not([data-bs-theme=\"dark\"]) footer a.text-muted {\n    color: #6c757d !important;\n}\n\nhtml[data-bs-theme=\"light\"] body footer a.text-muted:hover,\n[data-bs-theme=\"light\"] footer a.text-muted:hover,\nhtml:not([data-bs-theme=\"dark\"]) footer a.text-muted:hover {\n    color: #2563eb !important;\n}\n\n/* Dark theme footer - Very specific selectors */\nhtml[data-bs-theme=\"dark\"] body footer,\nbody[data-bs-theme=\"dark\"] footer,\n[data-bs-theme=\"dark\"] footer {\n    background: linear-gradient(135deg, #1e293b, #334155) !important;\n    color: #f8fafc !important;\n    border-top: 1px solid #334155 !important;\n}\n\nhtml[data-bs-theme=\"dark\"] body footer h5,\nhtml[data-bs-theme=\"dark\"] body footer h6,\n[data-bs-theme=\"dark\"] footer h5,\n[data-bs-theme=\"dark\"] footer h6 {\n    color: #f8fafc !important;\n}\n\nhtml[data-bs-theme=\"dark\"] body footer .text-muted,\n[data-bs-theme=\"dark\"] footer .text-muted {\n    color: #94a3b8 !important;\n}\n\nhtml[data-bs-theme=\"dark\"] body footer a.text-muted,\n[data-bs-theme=\"dark\"] footer a.text-muted {\n    color: #94a3b8 !important;\n}\n\nhtml[data-bs-theme=\"dark\"] body footer a.text-muted:hover,\n[data-bs-theme=\"dark\"] footer a.text-muted:hover {\n    color: #f59e0b !important;\n}\n\n/* Additional footer text styling for maximum compatibility */\nfooter p, footer h5, footer h6, footer small {\n    color: inherit !important;\n}\n\n[data-bs-theme=\"light\"] footer p,\n[data-bs-theme=\"light\"] footer h5,\n[data-bs-theme=\"light\"] footer h6,\n[data-bs-theme=\"light\"] footer small,\nhtml:not([data-bs-theme=\"dark\"]) footer p,\nhtml:not([data-bs-theme=\"dark\"]) footer h5,\nhtml:not([data-bs-theme=\"dark\"]) footer h6,\nhtml:not([data-bs-theme=\"dark\"]) footer small {\n    color: #212529 !important;\n}\n\n[data-bs-theme=\"dark\"] footer p,\n[data-bs-theme=\"dark\"] footer h5,\n[data-bs-theme=\"dark\"] footer h6,\n[data-bs-theme=\"dark\"] footer small {\n    color: #f8fafc !important;\n}\n\n/* Enhanced animations for new features */\n.fade-in-up {\n    opacity: 0;\n    animation: fadeInUp 0.6s ease forwards;\n}\n\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.recommendation-overlay {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    z-index: 2;\n}\n\n.recommendations-section {\n    background: var(--bg-secondary);\n    border-top: 2px solid var(--border-color);\n}\n\n.recommendation-card {\n    transition: all 0.3s ease;\n}\n\n.recommendation-card:hover {\n    transform: translateY(-5px);\n}\n\n/* Skills comparator specific styles */\n.vs-badge {\n    position: relative;\n    z-index: 10;\n}\n\n.metric-item {\n    background: var(--bg-secondary);\n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    padding: 15px;\n    text-align: center;\n    transition: all 0.3s ease;\n}\n\n.metric-item:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n}\n\n/* Dark theme navbar styling */\n[data-bs-theme=\"dark\"] .navbar,\n[data-theme=\"dark\"] .navbar {\n    background: rgba(15, 23, 42, 0.95) !important;\n    border-bottom-color: var(--dark-border-color);\n}\n\n[data-bs-theme=\"dark\"] .navbar-nav .nav-link,\n[data-bs-theme=\"dark\"] .navbar-brand {\n    color: #f8fafc !important;\n}\n\n[data-bs-theme=\"dark\"] .navbar-nav .nav-link:hover,\n[data-bs-theme=\"dark\"] .navbar-nav .nav-link:focus {\n    color: var(--secondary-color) !important;\n}\n\n[data-bs-theme=\"dark\"] .dropdown-item {\n    color: #f8fafc !important;\n    background-color: var(--dark-bg-secondary);\n}\n\n[data-bs-theme=\"dark\"] .dropdown-item:hover,\n[data-bs-theme=\"dark\"] .dropdown-item:focus {\n    color: var(--secondary-color) !important;\n    background-color: var(--dark-bg-tertiary) !important;\n}\n\n[data-bs-theme=\"dark\"] .dropdown-menu {\n    background-color: var(--dark-bg-secondary);\n    border-color: var(--dark-border-color);\n}\n\n.navbar-brand {\n    font-weight: 700;\n    font-size: 1.5rem;\n    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    transition: transform var(--transition-fast);\n}\n\n.navbar-brand:hover {\n    transform: scale(1.05);\n}\n\n.nav-link {\n    font-weight: 500;\n    position: relative;\n    transition: all var(--transition-fast);\n}\n\n.nav-link::before {\n    content: '';\n    position: absolute;\n    bottom: -2px;\n    left: 50%;\n    width: 0;\n    height: 2px;\n    background: var(--primary-color);\n    transition: all var(--transition-normal);\n    transform: translateX(-50%);\n}\n\n.nav-link:hover::before,\n.nav-link.active::before {\n    width: 100%;\n}\n\n/* Theme Toggle */\n.theme-toggle {\n    background: transparent;\n    border: 2px solid var(--border-color);\n    border-radius: 50px;\n    padding: 0.5rem;\n    transition: all var(--transition-normal);\n    cursor: pointer;\n}\n\n.theme-toggle:hover {\n    background: var(--bg-tertiary);\n    transform: scale(1.1);\n}\n\n/* Enhanced Cards */\n.card {\n    border: none;\n    border-radius: 16px;\n    background: var(--bg-primary);\n    box-shadow: var(--shadow-md);\n    transition: all var(--transition-normal);\n    overflow: hidden;\n    position: relative;\n}\n\n.card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));\n    transform: scaleX(0);\n    transform-origin: left;\n    transition: transform var(--transition-normal);\n}\n\n.card:hover {\n    transform: translateY(-8px);\n    box-shadow: var(--shadow-xl);\n}\n\n.card:hover::before {\n    transform: scaleX(1);\n}\n\n.card-body {\n    padding: 2rem;\n}\n\n/* Project Cards */\n.project-card {\n    position: relative;\n    overflow: hidden;\n}\n\n.project-card .card-img-top {\n    height: 200px;\n    object-fit: cover;\n    transition: transform var(--transition-slow);\n}\n\n.project-card:hover .card-img-top {\n    transform: scale(1.1);\n}\n\n.project-card .overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, rgba(37, 99, 235, 0.9), rgba(245, 158, 11, 0.9));\n    opacity: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: opacity var(--transition-normal);\n}\n\n.project-card:hover .overlay {\n    opacity: 1;\n}\n\n.overlay .btn {\n    transform: translateY(20px);\n    transition: transform var(--transition-normal);\n}\n\n.project-card:hover .overlay .btn {\n    transform: translateY(0);\n}\n\n/* Enhanced Buttons */\n.btn {\n    font-weight: 600;\n    border-radius: 8px;\n    padding: 0.75rem 1.5rem;\n    transition: all var(--transition-fast);\n    position: relative;\n    overflow: hidden;\n    border: none;\n    text-decoration: none;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n}\n\n.btn::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n    transition: left var(--transition-slow);\n}\n\n.btn:hover::before {\n    left: 100%;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));\n    color: white;\n    box-shadow: var(--shadow-md);\n}\n\n.btn-primary:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-lg);\n    background: linear-gradient(135deg, var(--primary-dark), var(--primary-color));\n}\n\n.btn-secondary {\n    background: linear-gradient(135deg, var(--secondary-color), #d97706);\n    color: white;\n}\n\n.btn-outline-primary {\n    border: 2px solid var(--primary-color);\n    color: var(--primary-color);\n    background: transparent;\n}\n\n.btn-outline-primary:hover {\n    background: var(--primary-color);\n    color: white;\n    transform: translateY(-2px);\n}\n\n/* Forms */\n.form-control, .form-select {\n    border: 2px solid var(--border-color);\n    border-radius: 8px;\n    padding: 0.75rem 1rem;\n    transition: all var(--transition-fast);\n    background: var(--bg-primary);\n    color: var(--text-primary);\n}\n\n.form-control:focus, .form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);\n    outline: none;\n}\n\n.form-label {\n    font-weight: 600;\n    color: var(--text-primary);\n    margin-bottom: 0.5rem;\n}\n\n/* Profile Image */\n.profile-image {\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n    border: 4px solid white;\n    box-shadow: var(--shadow-lg);\n    transition: transform var(--transition-normal);\n    object-fit: cover;\n}\n\n.profile-image:hover {\n    transform: scale(1.1);\n}\n\n.profile-upload {\n    position: relative;\n    display: inline-block;\n}\n\n.profile-upload .upload-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.7);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    opacity: 0;\n    transition: opacity var(--transition-normal);\n    cursor: pointer;\n}\n\n.profile-upload:hover .upload-overlay {\n    opacity: 1;\n}\n\n/* Hero Section */\n.hero {\n    background: linear-gradient(135deg, var(--bg-primary), var(--bg-secondary));\n    padding: 4rem 0;\n    position: relative;\n    overflow: hidden;\n}\n\n.hero::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: url('data:image/svg+xml,<svg width=\"60\" height=\"60\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><g fill=\"%239C92AC\" fill-opacity=\"0.05\"><path d=\"M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z\"/></g></g></svg>');\n    opacity: 0.5;\n    animation: float 6s ease-in-out infinite;\n}\n\n@keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-20px); }\n}\n\n.hero-content {\n    position: relative;\n    z-index: 1;\n}\n\n/* Admin Tables */\n.admin-table {\n    background: var(--bg-primary);\n    border-radius: 12px;\n    overflow: hidden;\n    box-shadow: var(--shadow-md);\n}\n\n.admin-table th {\n    background: var(--bg-secondary);\n    border: none;\n    padding: 1rem;\n    font-weight: 600;\n    color: var(--text-primary);\n}\n\n.admin-table td {\n    border: none;\n    padding: 1rem;\n    vertical-align: middle;\n    border-bottom: 1px solid var(--border-light);\n}\n\n.admin-table tr:hover {\n    background: var(--bg-tertiary);\n}\n\n/* Status Badges */\n.badge {\n    padding: 0.5rem 1rem;\n    border-radius: 50px;\n    font-weight: 600;\n    font-size: 0.75rem;\n    text-transform: uppercase;\n    letter-spacing: 0.025em;\n}\n\n.badge.bg-success {\n    background: linear-gradient(135deg, var(--success-color), #059669) !important;\n}\n\n.badge.bg-danger {\n    background: linear-gradient(135deg, var(--danger-color), #dc2626) !important;\n}\n\n.badge.bg-warning {\n    background: linear-gradient(135deg, var(--warning-color), #d97706) !important;\n    color: white !important;\n}\n\n/* Loading Animation */\n.loading {\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    border: 3px solid var(--border-color);\n    border-radius: 50%;\n    border-top-color: var(--primary-color);\n    animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .hero {\n        padding: 2rem 0;\n    }\n    \n    .card-body {\n        padding: 1.5rem;\n    }\n    \n    .btn {\n        padding: 0.625rem 1.25rem;\n        font-size: 0.875rem;\n    }\n    \n    .profile-image {\n        width: 100px;\n        height: 100px;\n    }\n}\n\n/* Accessibility Enhancements */\n.visually-hidden {\n    position: absolute !important;\n    width: 1px !important;\n    height: 1px !important;\n    padding: 0 !important;\n    margin: -1px !important;\n    overflow: hidden !important;\n    clip: rect(0, 0, 0, 0) !important;\n    white-space: nowrap !important;\n    border: 0 !important;\n}\n\n/* Focus Indicators */\n*:focus {\n    outline: 3px solid rgba(37, 99, 235, 0.5);\n    outline-offset: 2px;\n}\n\n.btn:focus,\n.form-control:focus,\n.form-select:focus {\n    outline: none;\n    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.3);\n}\n\n/* Print Styles */\n@media print {\n    .navbar,\n    .footer,\n    .btn,\n    .admin-actions {\n        display: none !important;\n    }\n    \n    .card {\n        box-shadow: none !important;\n        border: 1px solid #ddd !important;\n    }\n}\n\n/* Animation Classes */\n.fade-in {\n    animation: fadeIn 0.6s ease-in;\n}\n\n.slide-up {\n    animation: slideUp 0.6s ease-out;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* Custom Scrollbar */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--bg-secondary);\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--primary-color);\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: var(--primary-dark);\n}","size_bytes":39932},"static/css/professional-cards.css":{"content":"/* ======================================\n   PROFESSIONAL PROJECT CARDS\n   ====================================== */\n\n:root {\n  /* Professional Language Colors */\n  --lang-python: #3776AB;\n  --lang-javascript: #F7DF1E;\n  --lang-css: #264de4;\n  --lang-html: #e34c26;\n  --lang-typescript: #007ACC;\n  --lang-java: #f89820;\n  --lang-php: #777BB4;\n  --lang-ruby: #CC342D;\n  --lang-go: #00ADD8;\n  --lang-csharp: #239120;\n  --lang-rust: #000000;\n  --lang-swift: #FA7343;\n  \n  /* Professional Colors */\n  --card-bg-light: #ffffff;\n  --card-bg-dark: #1e1e2e;\n  --text-primary-light: #2d3748;\n  --text-primary-dark: #f7fafc;\n  --text-secondary-light: #4a5568;\n  --text-secondary-dark: #cbd5e1;\n  --text-muted-light: #718096;\n  --text-muted-dark: #94a3b8;\n  --border-light: #e2e8f0;\n  --border-dark: #374151;\n  \n  /* Shadows */\n  --shadow-light: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  --shadow-hover-light: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  --shadow-dark: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2);\n  --shadow-hover-dark: 0 10px 15px -3px rgba(0, 0, 0, 0.4), 0 4px 6px -2px rgba(0, 0, 0, 0.3);\n  \n  /* Typography */\n  --font-professional: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n}\n\n/* ======================================\n   BASE GRID LAYOUT\n   ====================================== */\n\n.professional-projects-container {\n  padding: 2rem 0;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.professional-grid {\n  display: grid;\n  gap: 1.5rem;\n  animation: fadeInGrid 0.8s ease-out;\n}\n\n/* Desktop → 3 colunas */\n@media (min-width: 1024px) {\n  .professional-grid {\n    grid-template-columns: repeat(3, 1fr);\n    gap: 2rem;\n  }\n}\n\n/* Tablet → 2 colunas */\n@media (min-width: 768px) and (max-width: 1023px) {\n  .professional-grid {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1.5rem;\n  }\n}\n\n/* Mobile → 1 coluna */\n@media (max-width: 767px) {\n  .professional-grid {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n  }\n  \n  .professional-projects-container {\n    padding: 1rem;\n  }\n}\n\n/* ======================================\n   PROFESSIONAL CARD STRUCTURE\n   ====================================== */\n\n.professional-card {\n  background: var(--card-bg-light);\n  border: 1px solid var(--border-light);\n  border-radius: 12px;\n  overflow: hidden;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: var(--shadow-light);\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  animation: cardFadeInUp 0.6s ease-out;\n  animation-fill-mode: both;\n}\n\n/* Dark mode */\n[data-theme=\"dark\"] .professional-card {\n  background: var(--card-bg-dark);\n  border-color: var(--border-dark);\n  box-shadow: var(--shadow-dark);\n  color: var(--text-primary-dark);\n}\n\n/* Staggered animation */\n.professional-card:nth-child(1) { animation-delay: 0.1s; }\n.professional-card:nth-child(2) { animation-delay: 0.2s; }\n.professional-card:nth-child(3) { animation-delay: 0.3s; }\n.professional-card:nth-child(4) { animation-delay: 0.4s; }\n.professional-card:nth-child(5) { animation-delay: 0.5s; }\n.professional-card:nth-child(6) { animation-delay: 0.6s; }\n\n/* Hover effects */\n.professional-card:hover {\n  transform: translateY(-4px);\n  box-shadow: var(--shadow-hover-light);\n}\n\n[data-theme=\"dark\"] .professional-card:hover {\n  box-shadow: var(--shadow-hover-dark);\n}\n\n/* ======================================\n   CARD HEADER\n   ====================================== */\n\n.card-header {\n  padding: 1.25rem 1.5rem 1rem;\n  border-bottom: 1px solid var(--border-light);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n[data-theme=\"dark\"] .card-header {\n  border-bottom-color: var(--border-dark);\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.repo-icon {\n  font-size: 1.125rem;\n  color: var(--text-muted-light);\n}\n\n[data-theme=\"dark\"] .repo-icon {\n  color: var(--text-muted-dark);\n}\n\n.project-title {\n  font-family: var(--font-professional);\n  font-size: 1.125rem;\n  font-weight: 600;\n  color: var(--text-primary-light);\n  margin: 0;\n  line-height: 1.4;\n}\n\n[data-theme=\"dark\"] .project-title {\n  color: var(--text-primary-dark);\n}\n\n.fork-badge {\n  background: #f59e0b;\n  color: white;\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.375rem;\n  font-size: 0.75rem;\n  font-weight: 500;\n}\n\n/* ======================================\n   CARD BODY\n   ====================================== */\n\n.card-body {\n  padding: 0 1.5rem 1.5rem;\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.card-description {\n  color: var(--text-secondary-light);\n  font-size: 0.875rem;\n  line-height: 1.5;\n  flex-grow: 1;\n  margin: 0;\n}\n\n[data-theme=\"dark\"] .card-description {\n  color: var(--text-secondary-dark);\n}\n\n.card-description.no-description {\n  color: var(--text-muted-light);\n  font-style: italic;\n}\n\n[data-theme=\"dark\"] .card-description.no-description {\n  color: var(--text-muted-dark);\n}\n\n/* ======================================\n   LANGUAGE BADGES\n   ====================================== */\n\n.language-badges {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n}\n\n.language-badge {\n  padding: 0.25rem 0.75rem;\n  border-radius: 1rem;\n  font-size: 0.75rem;\n  font-weight: 500;\n  color: white;\n  transition: all 0.2s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.language-badge:hover {\n  filter: brightness(1.1);\n}\n\n/* Language-specific colors */\n.language-badge.python { background-color: var(--lang-python); }\n.language-badge.javascript { background-color: var(--lang-javascript); color: #2d3748; }\n.language-badge.css { background-color: var(--lang-css); }\n.language-badge.html { background-color: var(--lang-html); }\n.language-badge.typescript { background-color: var(--lang-typescript); }\n.language-badge.java { background-color: var(--lang-java); }\n.language-badge.php { background-color: var(--lang-php); }\n.language-badge.ruby { background-color: var(--lang-ruby); }\n.language-badge.go { background-color: var(--lang-go); }\n.language-badge.csharp { background-color: var(--lang-csharp); }\n.language-badge.rust { background-color: var(--lang-rust); }\n.language-badge.swift { background-color: var(--lang-swift); }\n.language-badge.default { background-color: #6b7280; }\n\n/* ======================================\n   STATISTICS\n   ====================================== */\n\n.card-stats {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 0.75rem 0;\n  border-top: 1px solid var(--border-light);\n  border-bottom: 1px solid var(--border-light);\n}\n\n[data-theme=\"dark\"] .card-stats {\n  border-color: var(--border-dark);\n}\n\n.stat-item {\n  display: flex;\n  align-items: center;\n  gap: 0.375rem;\n  color: var(--text-muted-light);\n  font-size: 0.875rem;\n}\n\n[data-theme=\"dark\"] .stat-item {\n  color: var(--text-muted-dark);\n}\n\n.stat-icon {\n  font-size: 0.875rem;\n}\n\n.stat-icon.star { color: #fbbf24; }\n.stat-icon.fork { color: #6b7280; }\n\n/* ======================================\n   ACTION BUTTONS\n   ====================================== */\n\n.card-actions {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.btn-github {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1rem;\n  border: 1px solid var(--text-muted-light);\n  border-radius: 0.5rem;\n  color: var(--text-primary-light);\n  text-decoration: none;\n  font-size: 0.875rem;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  background: transparent;\n}\n\n[data-theme=\"dark\"] .btn-github {\n  border-color: var(--text-muted-dark);\n  color: var(--text-primary-dark);\n}\n\n.btn-github:hover {\n  background: var(--text-primary-light);\n  color: white;\n  border-color: var(--text-primary-light);\n}\n\n[data-theme=\"dark\"] .btn-github:hover {\n  background: var(--text-primary-dark);\n  color: var(--card-bg-dark);\n  border-color: var(--text-primary-dark);\n}\n\n.btn-demo {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  padding: 0.75rem 1rem;\n  border: 1px solid #10b981;\n  border-radius: 0.5rem;\n  color: #10b981;\n  text-decoration: none;\n  font-size: 0.875rem;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  background: transparent;\n}\n\n.btn-demo:hover {\n  background: #10b981;\n  color: white;\n}\n\n/* ======================================\n   FOOTER\n   ====================================== */\n\n.card-footer {\n  padding: 0.75rem 0 0;\n  color: var(--text-muted-light);\n  font-size: 0.75rem;\n  border-top: 1px solid var(--border-light);\n  margin-top: auto;\n}\n\n[data-theme=\"dark\"] .card-footer {\n  color: var(--text-muted-dark);\n  border-top-color: var(--border-dark);\n}\n\n/* ======================================\n   ANIMATIONS\n   ====================================== */\n\n@keyframes fadeInGrid {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes cardFadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px) scale(0.98);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n/* ======================================\n   SECTION TITLE\n   ====================================== */\n\n.professional-section-title {\n  font-family: var(--font-professional);\n  font-size: 2rem;\n  font-weight: 700;\n  color: var(--text-primary-light);\n  margin-bottom: 2rem;\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n[data-theme=\"dark\"] .professional-section-title {\n  color: var(--text-primary-dark);\n}\n\n.professional-section-title i {\n  color: var(--text-muted-light);\n}\n\n[data-theme=\"dark\"] .professional-section-title i {\n  color: var(--text-muted-dark);\n}\n\n/* ======================================\n   RESPONSIVE ADJUSTMENTS\n   ====================================== */\n\n@media (max-width: 640px) {\n  .card-header {\n    padding: 1rem 1.25rem 0.75rem;\n  }\n  \n  .card-body {\n    padding: 0 1.25rem 1.25rem;\n  }\n  \n  .project-title {\n    font-size: 1rem;\n  }\n  \n  .card-stats {\n    gap: 0.75rem;\n  }\n  \n  .stat-item {\n    font-size: 0.8rem;\n  }\n}","size_bytes":10007},"static/css/style.css":{"content":"/* Custom styles for Digital Portfolio */\n\n:root {\n  --primary-color: #007bff;\n  --secondary-color: #6c757d;\n  --success-color: #28a745;\n  --info-color: #17a2b8;\n  --warning-color: #ffc107;\n  --danger-color: #dc3545;\n  --light-color: #f8f9fa;\n  --dark-color: #343a40;\n}\n\n/* General Styles */\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n  line-height: 1.6;\n}\n\n/* Hero Section */\n.hero-section {\n  background: linear-gradient(135deg, var(--primary-color) 0%, #0056b3 100%);\n}\n\n/* Card Hover Effects */\n.card {\n  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n}\n\n.card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n/* Project Grid */\n.project-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n}\n\n/* Image Styling */\n.card-img-top {\n  transition: transform 0.3s ease;\n}\n\n.card:hover .card-img-top {\n  transform: scale(1.05);\n}\n\n/* Button Styles */\n.btn {\n  border-radius: 6px;\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.btn:hover {\n  transform: translateY(-1px);\n}\n\n/* Badge Styles */\n.badge {\n  font-weight: 500;\n  font-size: 0.75em;\n}\n\n/* Navigation */\n.navbar-brand {\n  font-size: 1.5rem;\n  font-weight: 700;\n}\n\n.navbar-nav .nav-link {\n  font-weight: 500;\n  margin: 0 0.25rem;\n  transition: color 0.2s ease;\n}\n\n/* Footer */\nfooter {\n  background-color: var(--dark-color) !important;\n  margin-top: auto;\n}\n\n/* Forms */\n.form-control {\n  border-radius: 6px;\n  border: 1px solid #ced4da;\n  transition: border-color 0.2s ease, box-shadow 0.2s ease;\n}\n\n.form-control:focus {\n  border-color: var(--primary-color);\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n/* Loading Animation */\n.loading {\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  border: 3px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top-color: #fff;\n  animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n/* Stats Cards */\n.stats-card {\n  background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  border: none;\n}\n\n/* Project Content */\n.project-content {\n  font-size: 1.1rem;\n  line-height: 1.8;\n}\n\n.project-content h1,\n.project-content h2,\n.project-content h3,\n.project-content h4,\n.project-content h5,\n.project-content h6 {\n  margin-top: 2rem;\n  margin-bottom: 1rem;\n}\n\n.project-content p {\n  margin-bottom: 1.5rem;\n}\n\n.project-content img {\n  max-width: 100%;\n  height: auto;\n  border-radius: 6px;\n  margin: 1rem 0;\n}\n\n.project-content code {\n  background-color: #f8f9fa;\n  padding: 2px 6px;\n  border-radius: 4px;\n  font-size: 0.9em;\n}\n\n.project-content pre {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 6px;\n  overflow-x: auto;\n}\n\n/* Comments */\n.comments-list {\n  max-height: 600px;\n  overflow-y: auto;\n}\n\n/* Admin Styles */\n.admin-sidebar {\n  background-color: #f8f9fa;\n  min-height: calc(100vh - 56px);\n}\n\n.admin-sidebar .nav-link {\n  color: #495057;\n  font-weight: 500;\n  padding: 0.75rem 1rem;\n  border-radius: 6px;\n  margin-bottom: 0.25rem;\n}\n\n.admin-sidebar .nav-link:hover {\n  background-color: #e9ecef;\n  color: #007bff;\n}\n\n.admin-sidebar .nav-link.active {\n  background-color: #007bff;\n  color: white;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .hero-section {\n    text-align: center;\n    padding: 3rem 0;\n  }\n  \n  .hero-section .display-4 {\n    font-size: 2rem;\n  }\n  \n  .project-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .d-flex.gap-3 {\n    flex-direction: column;\n    gap: 1rem !important;\n  }\n  \n  .btn-group {\n    flex-direction: column;\n  }\n  \n  .btn-group .btn {\n    border-radius: 6px !important;\n    margin-bottom: 0.25rem;\n  }\n}\n\n@media (max-width: 576px) {\n  .container {\n    padding-left: 15px;\n    padding-right: 15px;\n  }\n  \n  .card-body {\n    padding: 1rem;\n  }\n  \n  .btn-lg {\n    padding: 0.75rem 1.5rem;\n    font-size: 1rem;\n  }\n  \n  .hero-section .lead {\n    font-size: 1rem;\n  }\n  \n  .stats-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n/* Dark mode adjustments */\n[data-bs-theme=\"dark\"] .card {\n  background-color: #212529;\n  border-color: #495057;\n}\n\n[data-bs-theme=\"dark\"] .form-control {\n  background-color: #212529;\n  border-color: #495057;\n  color: #fff;\n}\n\n[data-bs-theme=\"dark\"] .form-control:focus {\n  background-color: #212529;\n  border-color: var(--primary-color);\n  color: #fff;\n}\n\n[data-bs-theme=\"dark\"] .project-content code {\n  background-color: #343a40;\n  color: #e9ecef;\n}\n\n[data-bs-theme=\"dark\"] .project-content pre {\n  background-color: #343a40;\n  color: #e9ecef;\n}\n\n/* Utility Classes */\n.text-truncate-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.text-truncate-3 {\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.shadow-hover {\n  transition: box-shadow 0.3s ease;\n}\n\n.shadow-hover:hover {\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15) !important;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #888;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #555;\n}\n\n[data-bs-theme=\"dark\"] ::-webkit-scrollbar-track {\n  background: #2d3748;\n}\n\n[data-bs-theme=\"dark\"] ::-webkit-scrollbar-thumb {\n  background: #4a5568;\n}\n\n[data-bs-theme=\"dark\"] ::-webkit-scrollbar-thumb:hover {\n  background: #718096;\n}\n","size_bytes":5510},"static/js/ai-recommendations.js":{"content":"// AI-powered Content Recommendation System\nclass AIRecommendationEngine {\n    constructor() {\n        this.recommendations = [];\n        this.currentProject = null;\n        this.init();\n    }\n\n    init() {\n        this.loadCurrentProject();\n        this.generateRecommendations();\n        this.displayRecommendations();\n    }\n\n    loadCurrentProject() {\n        // Get project data from the page\n        const projectElement = document.querySelector('[data-project-id]');\n        if (projectElement) {\n            this.currentProject = {\n                id: projectElement.dataset.projectId,\n                title: document.querySelector('.project-title')?.textContent || '',\n                description: document.querySelector('.project-description')?.textContent || '',\n                tags: Array.from(document.querySelectorAll('.project-tag')).map(tag => tag.textContent.trim()),\n                category: document.querySelector('.project-category')?.textContent || ''\n            };\n        }\n    }\n\n    async generateRecommendations() {\n        if (!this.currentProject) return;\n\n        try {\n            const response = await fetch('/api/recommendations', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: JSON.stringify({\n                    projectId: this.currentProject.id,\n                    tags: this.currentProject.tags,\n                    category: this.currentProject.category,\n                    description: this.currentProject.description\n                })\n            });\n\n            if (response.ok) {\n                const data = await response.json();\n                this.recommendations = data.recommendations || [];\n            } else {\n                // Fallback to client-side recommendations\n                this.generateFallbackRecommendations();\n            }\n        } catch (error) {\n            console.log('Using fallback recommendations');\n            this.generateFallbackRecommendations();\n        }\n    }\n\n    generateFallbackRecommendations() {\n        // Simple similarity-based recommendations\n        const allProjects = window.portfolioData?.projects || [];\n        const similarities = [];\n\n        allProjects.forEach(project => {\n            if (project.id === parseInt(this.currentProject.id)) return;\n\n            let score = 0;\n            \n            // Tag similarity\n            const commonTags = project.tags?.filter(tag => \n                this.currentProject.tags.includes(tag)\n            ).length || 0;\n            score += commonTags * 3;\n\n            // Category similarity\n            if (project.category === this.currentProject.category) {\n                score += 5;\n            }\n\n            // Title/description similarity (basic keyword matching)\n            const projectWords = (project.title + ' ' + project.description).toLowerCase().split(/\\s+/);\n            const currentWords = (this.currentProject.title + ' ' + this.currentProject.description).toLowerCase().split(/\\s+/);\n            \n            const commonWords = projectWords.filter(word => \n                word.length > 3 && currentWords.includes(word)\n            ).length;\n            score += commonWords;\n\n            if (score > 0) {\n                similarities.push({ project, score });\n            }\n        });\n\n        // Sort by similarity and take top 3\n        similarities.sort((a, b) => b.score - a.score);\n        this.recommendations = similarities.slice(0, 3).map(item => item.project);\n    }\n\n    displayRecommendations() {\n        if (this.recommendations.length === 0) return;\n\n        const container = this.createRecommendationsContainer();\n        const projectDetail = document.querySelector('.project-detail, .container');\n        \n        if (projectDetail && container) {\n            projectDetail.appendChild(container);\n            this.animateRecommendations();\n        }\n    }\n\n    createRecommendationsContainer() {\n        const section = document.createElement('section');\n        section.className = 'recommendations-section py-5 mt-5 border-top';\n        section.innerHTML = `\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <h3 class=\"h4 fw-bold mb-4\">\n                            <i class=\"fas fa-robot me-2 text-primary\"></i>\n                            <span data-i18n=\"recommendations_title\">Projetos Relacionados</span>\n                        </h3>\n                        <p class=\"text-muted mb-4\" data-i18n=\"recommendations_subtitle\">\n                            Recomendados com base em IA, considerando tags, categoria e conteúdo similar\n                        </p>\n                    </div>\n                </div>\n                <div class=\"row g-4\">\n                    ${this.recommendations.map((project, index) => this.createRecommendationCard(project, index)).join('')}\n                </div>\n            </div>\n        `;\n        return section;\n    }\n\n    createRecommendationCard(project, index) {\n        return `\n            <div class=\"col-md-4 recommendation-card\" style=\"animation-delay: ${index * 0.1}s\">\n                <div class=\"card h-100 border-0 shadow-sm recommendation-item\">\n                    ${project.image_filename ? `\n                        <div class=\"position-relative overflow-hidden rounded-top\">\n                            <img src=\"/static/uploads/${project.image_filename}\" \n                                 class=\"card-img-top\" alt=\"${project.title}\" \n                                 style=\"height: 200px; object-fit: cover;\">\n                            <div class=\"recommendation-overlay\">\n                                <span class=\"badge bg-primary\">\n                                    <i class=\"fas fa-magic me-1\"></i>IA\n                                </span>\n                            </div>\n                        </div>\n                    ` : ''}\n                    <div class=\"card-body d-flex flex-column\">\n                        <h5 class=\"card-title fw-semibold\">${project.title}</h5>\n                        <p class=\"card-text text-muted flex-grow-1\">${this.truncateText(project.description, 100)}</p>\n                        \n                        ${project.tags && project.tags.length ? `\n                            <div class=\"mb-3\">\n                                ${project.tags.slice(0, 3).map(tag => \n                                    `<span class=\"badge bg-light text-dark me-1\">${tag}</span>`\n                                ).join('')}\n                            </div>\n                        ` : ''}\n                        \n                        <div class=\"d-flex justify-content-between align-items-center mt-auto\">\n                            <a href=\"/project/${project.id}\" class=\"btn btn-outline-primary btn-sm\">\n                                <i class=\"fas fa-eye me-1\"></i>\n                                <span data-i18n=\"btn_view_project\">Ver Projeto</span>\n                            </a>\n                            <small class=\"text-muted\">\n                                <i class=\"fas fa-heart me-1\"></i>${project.likes_count || 0}\n                            </small>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    truncateText(text, maxLength) {\n        if (!text) return '';\n        return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;\n    }\n\n    animateRecommendations() {\n        const cards = document.querySelectorAll('.recommendation-card');\n        cards.forEach((card, index) => {\n            card.classList.add('fade-in-up');\n        });\n    }\n}\n\n// Initialize AI recommendations when on project detail page\ndocument.addEventListener('DOMContentLoaded', function() {\n    if (document.querySelector('.project-detail, [data-project-id]')) {\n        setTimeout(() => {\n            new AIRecommendationEngine();\n        }, 1000);\n    }\n});","size_bytes":8100},"static/js/career-timeline.js":{"content":"// Interactive Career Timeline\nclass CareerTimeline {\n    constructor() {\n        this.timelineData = [];\n        this.autoPlayInterval = null;\n        this.currentIndex = 0;\n        this.isAutoPlaying = false;\n        this.init();\n    }\n\n    init() {\n        this.loadTimelineData();\n        this.createTimeline();\n        this.initializeControls();\n        this.bindEvents();\n    }\n\n    async loadTimelineData() {\n        try {\n            const response = await fetch('/api/timeline');\n            if (response.ok) {\n                const data = await response.json();\n                this.timelineData = data.timeline || [];\n            }\n        } catch (error) {\n            console.log('Using sample timeline data');\n            this.timelineData = this.getSampleData();\n        }\n\n        // Sort by date\n        this.timelineData.sort((a, b) => new Date(a.date) - new Date(b.date));\n    }\n\n    getSampleData() {\n        return [\n            {\n                id: 1,\n                title: 'Primeiro Projeto Web',\n                description: 'Desenvolvimento do primeiro website responsivo usando HTML, CSS e JavaScript',\n                date: '2023-01-15',\n                type: 'project',\n                technologies: ['HTML', 'CSS', 'JavaScript'],\n                image: null\n            },\n            {\n                id: 2,\n                title: 'Certificação Python',\n                description: 'Concluído curso avançado de Python para desenvolvimento web',\n                date: '2023-06-20',\n                type: 'achievement',\n                technologies: ['Python', 'Flask', 'Django'],\n                image: null\n            },\n            {\n                id: 3,\n                title: 'Sistema de E-commerce',\n                description: 'Desenvolvimento completo de plataforma de vendas online com painel administrativo',\n                date: '2023-12-10',\n                type: 'project',\n                technologies: ['Python', 'Flask', 'SQLAlchemy', 'Bootstrap'],\n                image: null\n            }\n        ];\n    }\n\n    createTimeline() {\n        const timelineContainer = document.getElementById('career-timeline');\n        if (!timelineContainer) return;\n\n        timelineContainer.innerHTML = `\n            <div class=\"timeline-header text-center mb-5\">\n                <h2 class=\"fw-bold mb-3\">\n                    <i class=\"fas fa-route me-2 text-primary\"></i>\n                    <span data-i18n=\"timeline_title\">Linha do Tempo da Carreira</span>\n                </h2>\n                <p class=\"lead text-muted\" data-i18n=\"timeline_subtitle\">\n                    Acompanhe a evolução dos meus projetos e conquistas\n                </p>\n                <div class=\"timeline-controls mt-4\">\n                    <button class=\"btn btn-outline-primary me-2\" onclick=\"careerTimeline.toggleAutoPlay()\">\n                        <i class=\"fas fa-play me-1\" id=\"autoplay-icon\"></i>\n                        <span id=\"autoplay-text\" data-i18n=\"timeline_autoplay\">Auto-Play</span>\n                    </button>\n                    <button class=\"btn btn-outline-secondary\" onclick=\"careerTimeline.resetTimeline()\">\n                        <i class=\"fas fa-undo me-1\"></i>\n                        <span data-i18n=\"timeline_reset\">Reiniciar</span>\n                    </button>\n                </div>\n            </div>\n            \n            <div class=\"timeline-container\">\n                <div class=\"timeline-progress\">\n                    <div class=\"timeline-progress-bar\" id=\"timeline-progress\"></div>\n                </div>\n                <div class=\"timeline-items\">\n                    ${this.timelineData.map((item, index) => this.createTimelineItem(item, index)).join('')}\n                </div>\n            </div>\n            \n            <div class=\"timeline-detail-modal\" id=\"timeline-modal\" style=\"display: none;\">\n                <div class=\"timeline-modal-content\">\n                    <div class=\"timeline-modal-header\">\n                        <h4 id=\"modal-title\"></h4>\n                        <button class=\"btn-close\" onclick=\"careerTimeline.closeModal()\"></button>\n                    </div>\n                    <div class=\"timeline-modal-body\">\n                        <div id=\"modal-content\"></div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    createTimelineItem(item, index) {\n        const isLeft = index % 2 === 0;\n        const typeIcon = item.type === 'project' ? 'fas fa-code' : 'fas fa-trophy';\n        const typeColor = item.type === 'project' ? 'primary' : 'success';\n\n        return `\n            <div class=\"timeline-item ${isLeft ? 'timeline-left' : 'timeline-right'}\" \n                 data-index=\"${index}\" \n                 onclick=\"careerTimeline.showDetail(${index})\">\n                <div class=\"timeline-marker\">\n                    <div class=\"timeline-icon bg-${typeColor}\">\n                        <i class=\"${typeIcon}\"></i>\n                    </div>\n                    <div class=\"timeline-date\">${this.formatDate(item.date)}</div>\n                </div>\n                <div class=\"timeline-content\">\n                    <div class=\"timeline-card\">\n                        ${item.image ? `\n                            <div class=\"timeline-image\">\n                                <img src=\"${item.image}\" alt=\"${item.title}\">\n                            </div>\n                        ` : ''}\n                        <div class=\"timeline-card-body\">\n                            <h5 class=\"timeline-title\">${item.title}</h5>\n                            <p class=\"timeline-description\">${this.truncateText(item.description, 100)}</p>\n                            ${item.technologies ? `\n                                <div class=\"timeline-technologies\">\n                                    ${item.technologies.slice(0, 3).map(tech => \n                                        `<span class=\"badge bg-light text-dark me-1\">${tech}</span>`\n                                    ).join('')}\n                                </div>\n                            ` : ''}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    formatDate(dateString) {\n        const date = new Date(dateString);\n        return date.toLocaleDateString('pt-BR', { \n            month: 'short', \n            year: 'numeric' \n        });\n    }\n\n    truncateText(text, maxLength) {\n        return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;\n    }\n\n    initializeControls() {\n        this.updateProgressBar(0);\n    }\n\n    bindEvents() {\n        // Observer for scroll animations\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    entry.target.classList.add('timeline-animate');\n                }\n            });\n        }, { threshold: 0.2 });\n\n        document.querySelectorAll('.timeline-item').forEach(item => {\n            observer.observe(item);\n        });\n    }\n\n    showDetail(index) {\n        const item = this.timelineData[index];\n        if (!item) return;\n\n        const modal = document.getElementById('timeline-modal');\n        const title = document.getElementById('modal-title');\n        const content = document.getElementById('modal-content');\n\n        title.textContent = item.title;\n        content.innerHTML = `\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <p class=\"text-muted mb-2\">\n                        <i class=\"fas fa-calendar me-2\"></i>${this.formatFullDate(item.date)}\n                    </p>\n                    <p class=\"text-muted mb-3\">\n                        <i class=\"fas fa-tag me-2\"></i>${item.type === 'project' ? 'Projeto' : 'Conquista'}\n                    </p>\n                    <p>${item.description}</p>\n                    \n                    ${item.technologies ? `\n                        <div class=\"mt-3\">\n                            <h6>Tecnologias Utilizadas:</h6>\n                            <div class=\"d-flex flex-wrap gap-2\">\n                                ${item.technologies.map(tech => \n                                    `<span class=\"badge bg-primary\">${tech}</span>`\n                                ).join('')}\n                            </div>\n                        </div>\n                    ` : ''}\n                </div>\n                ${item.image ? `\n                    <div class=\"col-md-6\">\n                        <img src=\"${item.image}\" alt=\"${item.title}\" class=\"img-fluid rounded\">\n                    </div>\n                ` : ''}\n            </div>\n        `;\n\n        modal.style.display = 'flex';\n        this.currentIndex = index;\n    }\n\n    closeModal() {\n        const modal = document.getElementById('timeline-modal');\n        modal.style.display = 'none';\n    }\n\n    toggleAutoPlay() {\n        if (this.isAutoPlaying) {\n            this.stopAutoPlay();\n        } else {\n            this.startAutoPlay();\n        }\n    }\n\n    startAutoPlay() {\n        this.isAutoPlaying = true;\n        const icon = document.getElementById('autoplay-icon');\n        const text = document.getElementById('autoplay-text');\n        \n        icon.className = 'fas fa-pause me-1';\n        text.textContent = 'Pausar';\n\n        this.autoPlayInterval = setInterval(() => {\n            this.currentIndex = (this.currentIndex + 1) % this.timelineData.length;\n            this.highlightTimelineItem(this.currentIndex);\n            this.updateProgressBar(this.currentIndex);\n        }, 3000);\n    }\n\n    stopAutoPlay() {\n        this.isAutoPlaying = false;\n        const icon = document.getElementById('autoplay-icon');\n        const text = document.getElementById('autoplay-text');\n        \n        icon.className = 'fas fa-play me-1';\n        text.textContent = 'Auto-Play';\n\n        if (this.autoPlayInterval) {\n            clearInterval(this.autoPlayInterval);\n            this.autoPlayInterval = null;\n        }\n\n        this.clearHighlights();\n    }\n\n    resetTimeline() {\n        this.stopAutoPlay();\n        this.currentIndex = 0;\n        this.updateProgressBar(0);\n        this.clearHighlights();\n        \n        // Scroll to top of timeline\n        const timeline = document.getElementById('career-timeline');\n        if (timeline) {\n            timeline.scrollIntoView({ behavior: 'smooth' });\n        }\n    }\n\n    highlightTimelineItem(index) {\n        this.clearHighlights();\n        const item = document.querySelector(`[data-index=\"${index}\"]`);\n        if (item) {\n            item.classList.add('timeline-highlight');\n            item.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n    }\n\n    clearHighlights() {\n        document.querySelectorAll('.timeline-highlight').forEach(item => {\n            item.classList.remove('timeline-highlight');\n        });\n    }\n\n    updateProgressBar(index) {\n        const progress = document.getElementById('timeline-progress');\n        if (progress && this.timelineData.length > 0) {\n            const percentage = (index / (this.timelineData.length - 1)) * 100;\n            progress.style.height = percentage + '%';\n        }\n    }\n\n    formatFullDate(dateString) {\n        const date = new Date(dateString);\n        return date.toLocaleDateString('pt-BR', { \n            day: 'numeric',\n            month: 'long', \n            year: 'numeric' \n        });\n    }\n}\n\n// Initialize career timeline\ndocument.addEventListener('DOMContentLoaded', function() {\n    if (document.getElementById('career-timeline')) {\n        window.careerTimeline = new CareerTimeline();\n    }\n});","size_bytes":11679},"static/js/language-switcher.js":{"content":"// Language Switcher for Portuguese/English\nclass LanguageSwitcher {\n    constructor() {\n        // Check if user is authenticated and has a language preference\n        const userLang = document.body.dataset.userLanguage;\n        this.currentLanguage = userLang || localStorage.getItem('language') || 'pt-BR';\n        this.translations = {};\n        this.init();\n    }\n\n    init() {\n        this.loadTranslations();\n        this.createLanguageButton();\n        this.applyLanguage();\n    }\n\n    loadTranslations() {\n        // Translations for the interface\n        this.translations = {\n            'pt-BR': {\n                'nav_home': 'Início',\n                'nav_projects': 'Projetos',\n                'nav_about': 'Sobre',\n                'nav_contact': 'Contato',\n                'nav_timeline': 'Timeline',\n                'nav_comparator': 'Comparador',\n                'nav_login': 'Entrar',\n                'nav_register': 'Cadastrar',\n                'nav_admin': 'Admin',\n                'nav_logout': 'Sair',\n                'btn_view_project': 'Ver Projeto',\n                'btn_view_all': 'Ver Todos',\n                'btn_demo': 'Demo',\n                'btn_code': 'Código',\n                'btn_login': 'Entrar',\n                'btn_register': 'Cadastrar',\n                'label_featured': 'Destaque',\n                'label_projects': 'Projetos',\n                'label_featured_count': 'Destaques',\n                'label_since': 'Desde',\n                'title_featured_projects': 'Projetos em Destaque',\n                'subtitle_featured': 'Destacando meus melhores trabalhos e inovações',\n                'title_recent_projects': 'Projetos Recentes',\n                'subtitle_recent': 'Adições mais recentes ao meu portfólio',\n                'welcome_title': 'Bem-vindo ao Meu Portfólio Digital',\n                'welcome_subtitle': 'Apresentando criatividade, inovação e excelência técnica através de projetos e experiências cuidadosamente elaborados.',\n                'btn_view_projects': 'Ver Projetos',\n                'btn_about_me': 'Sobre Mim',\n                'label_featured_badge': 'Destaque',\n                'footer_copyright': 'Todos os direitos reservados.',\n                'footer_built_with': 'Construído com',\n                'search_placeholder': 'Buscar projetos...',\n                'timeline_title': 'Linha do Tempo da Carreira',\n                'timeline_subtitle': 'Acompanhe a evolução dos meus projetos e conquistas',\n                'comparator_title': 'Comparador de Habilidades',\n                'comparator_subtitle': 'Compare duas habilidades do meu portfólio',\n                'btn_explore': 'Explorar Projeto',\n                'btn_view_all_projects': 'Ver Todos os Projetos',\n                'label_collaboration': 'Colaboração',\n                'cta_title_primary': 'Vamos Trabalhar',\n                'cta_title_accent': 'Juntos',\n                'cta_subtitle': 'Transforme suas ideias em realidade. Estou aqui para criar soluções inovadoras e impactantes que elevem seus projetos ao próximo nível.',\n                'feature_innovation': 'Inovação',\n                'feature_collaboration': 'Colaboração',\n                'feature_results': 'Resultados',\n                'btn_send_email': 'Enviar E-mail',\n                'btn_email_subtitle': 'Resposta em 24h',\n                'btn_schedule_meeting': 'Agendar Reunião',\n                'btn_meeting_subtitle': '30 min gratuitos',\n                'btn_connect_linkedin': 'Conectar LinkedIn',\n                'btn_linkedin_subtitle': 'Vamos nos conectar',\n                'trust_secure': '100% Seguro',\n                'trust_response': 'Resposta Rápida',\n                'trust_quality': 'Alta Qualidade'\n            },\n            'en': {\n                'nav_home': 'Home',\n                'nav_projects': 'Projects',\n                'nav_about': 'About',\n                'nav_contact': 'Contact',\n                'nav_timeline': 'Timeline',\n                'nav_comparator': 'Comparator',\n                'nav_login': 'Login',\n                'nav_register': 'Register',\n                'nav_admin': 'Admin',\n                'nav_logout': 'Logout',\n                'btn_view_project': 'View Project',\n                'btn_view_all': 'View All',\n                'btn_demo': 'Demo',\n                'btn_code': 'Code',\n                'btn_login': 'Login',\n                'btn_register': 'Register',\n                'label_featured': 'Featured',\n                'label_projects': 'Projects',\n                'label_featured_count': 'Featured',\n                'label_since': 'Since',\n                'title_featured_projects': 'Featured Projects',\n                'subtitle_featured': 'Highlighting my best work and innovations',\n                'title_recent_projects': 'Recent Projects',\n                'subtitle_recent': 'Latest additions to my portfolio',\n                'welcome_title': 'Welcome to My Digital Portfolio',\n                'welcome_subtitle': 'Showcasing creativity, innovation, and technical excellence through carefully crafted projects and experiences.',\n                'btn_view_projects': 'View Projects',\n                'btn_about_me': 'About Me',\n                'label_featured_badge': 'Featured',\n                'footer_copyright': 'All rights reserved.',\n                'footer_built_with': 'Built with',\n                'search_placeholder': 'Search projects...',\n                'timeline_title': 'Career Timeline',\n                'timeline_subtitle': 'Follow the evolution of my projects and achievements',\n                'comparator_title': 'Skills Comparator',\n                'comparator_subtitle': 'Compare two skills from my portfolio',\n                'btn_explore': 'Explore Project',\n                'btn_view_all_projects': 'View All Projects',\n                'label_collaboration': 'Collaboration',\n                'cta_title_primary': 'Let\\'s Work',\n                'cta_title_accent': 'Together',\n                'cta_subtitle': 'Transform your ideas into reality. I\\'m here to create innovative and impactful solutions that take your projects to the next level.',\n                'feature_innovation': 'Innovation',\n                'feature_collaboration': 'Collaboration',\n                'feature_results': 'Results',\n                'btn_send_email': 'Send Email',\n                'btn_email_subtitle': 'Response in 24h',\n                'btn_schedule_meeting': 'Schedule Meeting',\n                'btn_meeting_subtitle': '30 min free',\n                'btn_connect_linkedin': 'Connect LinkedIn',\n                'btn_linkedin_subtitle': 'Let\\'s connect',\n                'trust_secure': '100% Secure',\n                'trust_response': 'Quick Response',\n                'trust_quality': 'High Quality'\n            }\n        };\n    }\n\n    createLanguageButton() {\n        const navbar = document.querySelector('.navbar-nav:last-child');\n        if (navbar) {\n            const langButton = document.createElement('li');\n            langButton.className = 'nav-item dropdown me-2';\n            langButton.innerHTML = `\n                <a class=\"nav-link dropdown-toggle\" href=\"javascript:void(0)\" id=\"languageDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                    <i class=\"fas fa-globe me-1\"></i>${this.currentLanguage === 'pt-BR' ? 'PT' : 'EN'}\n                </a>\n                <ul class=\"dropdown-menu\" aria-labelledby=\"languageDropdown\">\n                    <li><a class=\"dropdown-item\" href=\"javascript:void(0)\" onclick=\"languageSwitcher.switchLanguage('pt-BR')\">\n                        <i class=\"fas fa-flag me-2\"></i>Português (BR)\n                    </a></li>\n                    <li><a class=\"dropdown-item\" href=\"javascript:void(0)\" onclick=\"languageSwitcher.switchLanguage('en')\">\n                        <i class=\"fas fa-flag me-2\"></i>English (US)\n                    </a></li>\n                </ul>\n            `;\n            // Insert before the first nav item (login/register or user menu)\n            navbar.insertBefore(langButton, navbar.firstChild);\n        }\n    }\n\n    switchLanguage(language) {\n        this.currentLanguage = language;\n        localStorage.setItem('language', language);\n        this.applyLanguage();\n        \n        // Update language button text\n        const langButton = document.querySelector('#languageDropdown');\n        if (langButton) {\n            langButton.innerHTML = `<i class=\"fas fa-globe me-1\"></i>${language === 'pt-BR' ? 'PT' : 'EN'}`;\n        }\n\n        // Save language preference for authenticated users\n        if (document.body.dataset.authenticated === 'true') {\n            fetch('/api/save-language-preference', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest'\n                },\n                body: JSON.stringify({ language: language })\n            }).catch(err => console.log('Language preference not saved:', err));\n        }\n    }\n\n    applyLanguage() {\n        const translations = this.translations[this.currentLanguage];\n        \n        // Apply translations to elements with data-i18n attributes\n        document.querySelectorAll('[data-i18n]').forEach(element => {\n            const key = element.getAttribute('data-i18n');\n            if (translations[key]) {\n                if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n                    element.placeholder = translations[key];\n                } else {\n                    element.textContent = translations[key];\n                }\n            }\n        });\n\n        // Update document language attribute\n        document.documentElement.lang = this.currentLanguage;\n        \n        // Update page title\n        const titleElement = document.querySelector('title');\n        if (titleElement && titleElement.dataset.i18n) {\n            const titleKey = titleElement.dataset.i18n;\n            if (translations[titleKey]) {\n                titleElement.textContent = translations[titleKey];\n            }\n        }\n    }\n\n    t(key) {\n        return this.translations[this.currentLanguage][key] || key;\n    }\n}\n\n// Initialize language switcher when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    window.languageSwitcher = new LanguageSwitcher();\n});","size_bytes":10415},"static/js/main.js":{"content":"// Main JavaScript for Digital Portfolio\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize tooltips\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n\n    // Initialize popovers\n    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {\n        return new bootstrap.Popover(popoverTriggerEl);\n    });\n\n    // Auto-hide alerts after 5 seconds\n    const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');\n    alerts.forEach(function(alert) {\n        setTimeout(function() {\n            const alertInstance = new bootstrap.Alert(alert);\n            alertInstance.close();\n        }, 5000);\n    });\n\n    // Search form enhancement\n    const searchForm = document.querySelector('form[action*=\"search\"]');\n    if (searchForm) {\n        const searchInput = searchForm.querySelector('input[name=\"query\"]');\n        if (searchInput) {\n            searchInput.addEventListener('input', debounce(function() {\n                // Could implement live search suggestions here\n                console.log('Search input:', this.value);\n            }, 300));\n        }\n    }\n\n    // Image lazy loading fallback\n    const images = document.querySelectorAll('img[data-src]');\n    if (images.length > 0 && 'IntersectionObserver' in window) {\n        const imageObserver = new IntersectionObserver(function(entries, observer) {\n            entries.forEach(function(entry) {\n                if (entry.isIntersecting) {\n                    const img = entry.target;\n                    img.src = img.dataset.src;\n                    img.removeAttribute('data-src');\n                    imageObserver.unobserve(img);\n                }\n            });\n        });\n\n        images.forEach(img => imageObserver.observe(img));\n    }\n\n    // Form validation enhancement\n    const forms = document.querySelectorAll('.needs-validation');\n    forms.forEach(function(form) {\n        form.addEventListener('submit', function(event) {\n            if (!form.checkValidity()) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n            form.classList.add('was-validated');\n        });\n    });\n\n    // Project card hover effects\n    const projectCards = document.querySelectorAll('.card');\n    projectCards.forEach(function(card) {\n        card.addEventListener('mouseenter', function() {\n            this.style.transform = 'translateY(-5px)';\n        });\n        \n        card.addEventListener('mouseleave', function() {\n            this.style.transform = 'translateY(0)';\n        });\n    });\n\n    // Copy to clipboard functionality\n    window.copyToClipboard = function(text) {\n        if (navigator.clipboard && window.isSecureContext) {\n            return navigator.clipboard.writeText(text).then(function() {\n                showToast('Link copied to clipboard!', 'success');\n            }).catch(function(err) {\n                console.error('Failed to copy: ', err);\n                fallbackCopyTextToClipboard(text);\n            });\n        } else {\n            fallbackCopyTextToClipboard(text);\n        }\n    };\n\n    // Fallback copy method\n    function fallbackCopyTextToClipboard(text) {\n        const textArea = document.createElement(\"textarea\");\n        textArea.value = text;\n        \n        // Avoid scrolling to bottom\n        textArea.style.top = \"0\";\n        textArea.style.left = \"0\";\n        textArea.style.position = \"fixed\";\n        \n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        \n        try {\n            const successful = document.execCommand('copy');\n            if (successful) {\n                showToast('Link copied to clipboard!', 'success');\n            } else {\n                showToast('Failed to copy link', 'error');\n            }\n        } catch (err) {\n            console.error('Fallback: Oops, unable to copy', err);\n            showToast('Failed to copy link', 'error');\n        }\n        \n        document.body.removeChild(textArea);\n    }\n\n    // Toast notification system\n    window.showToast = function(message, type = 'info') {\n        const toastContainer = document.getElementById('toast-container') || createToastContainer();\n        \n        const toastEl = document.createElement('div');\n        toastEl.className = `toast show align-items-center text-white bg-${type === 'error' ? 'danger' : type} border-0`;\n        toastEl.setAttribute('role', 'alert');\n        toastEl.setAttribute('aria-live', 'assertive');\n        toastEl.setAttribute('aria-atomic', 'true');\n        \n        toastEl.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">\n                    ${message}\n                </div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n            </div>\n        `;\n        \n        toastContainer.appendChild(toastEl);\n        \n        const toast = new bootstrap.Toast(toastEl);\n        toast.show();\n        \n        // Remove toast element after it's hidden\n        toastEl.addEventListener('hidden.bs.toast', function() {\n            toastEl.remove();\n        });\n    };\n\n    function createToastContainer() {\n        const container = document.createElement('div');\n        container.id = 'toast-container';\n        container.className = 'toast-container position-fixed top-0 end-0 p-3';\n        container.style.zIndex = '11';\n        document.body.appendChild(container);\n        return container;\n    }\n\n    // Debounce utility function\n    function debounce(func, wait, immediate) {\n        var timeout;\n        return function() {\n            var context = this, args = arguments;\n            var later = function() {\n                timeout = null;\n                if (!immediate) func.apply(context, args);\n            };\n            var callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n            if (callNow) func.apply(context, args);\n        };\n    }\n\n    // File input preview functionality\n    const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n    fileInputs.forEach(function(input) {\n        input.addEventListener('change', function(e) {\n            const file = e.target.files[0];\n            if (file && file.type.startsWith('image/')) {\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    // Find existing preview or create new one\n                    let preview = input.parentElement.querySelector('.file-preview');\n                    if (!preview) {\n                        preview = document.createElement('div');\n                        preview.className = 'file-preview mt-2';\n                        input.parentElement.appendChild(preview);\n                    }\n                    \n                    preview.innerHTML = `\n                        <img src=\"${e.target.result}\" class=\"img-thumbnail\" style=\"max-width: 200px; max-height: 150px; object-fit: cover;\" alt=\"Preview\">\n                        <div class=\"mt-1 text-muted small\">${file.name}</div>\n                    `;\n                };\n                reader.readAsDataURL(file);\n            }\n        });\n    });\n\n    // Loading state for forms\n    const submitButtons = document.querySelectorAll('form button[type=\"submit\"]');\n    submitButtons.forEach(function(button) {\n        button.closest('form').addEventListener('submit', function() {\n            button.innerHTML = '<span class=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>Loading...';\n            button.disabled = true;\n        });\n    });\n\n    // Smooth scroll for anchor links\n    const anchorLinks = document.querySelectorAll('a[href^=\"#\"]');\n    anchorLinks.forEach(function(link) {\n        link.addEventListener('click', function(e) {\n            const href = this.getAttribute('href');\n            if (href && href !== '#' && href.length > 1) {\n                try {\n                    // Validate selector before using querySelector\n                    if (href.match(/^#[\\w-]+$/)) {\n                        const target = document.querySelector(href);\n                        if (target) {\n                            e.preventDefault();\n                            target.scrollIntoView({\n                                behavior: 'smooth',\n                                block: 'start'\n                            });\n                        }\n                    }\n                } catch (err) {\n                    console.log('Invalid selector:', href);\n                }\n            } else if (href === '#') {\n                // Prevent default action for empty hash links\n                e.preventDefault();\n            }\n        });\n    });\n\n    // Auto-resize textareas\n    const textareas = document.querySelectorAll('textarea');\n    textareas.forEach(function(textarea) {\n        textarea.addEventListener('input', function() {\n            this.style.height = 'auto';\n            this.style.height = this.scrollHeight + 'px';\n        });\n        \n        // Initial resize\n        textarea.style.height = 'auto';\n        textarea.style.height = textarea.scrollHeight + 'px';\n    });\n\n    // Search functionality enhancement\n    const searchInputs = document.querySelectorAll('input[type=\"search\"]');\n    searchInputs.forEach(function(input) {\n        input.addEventListener('keydown', function(e) {\n            if (e.key === 'Escape') {\n                this.value = '';\n                this.blur();\n            }\n        });\n    });\n\n    // Initialize any data tables if present\n    if (typeof DataTable !== 'undefined') {\n        const tables = document.querySelectorAll('.data-table');\n        tables.forEach(function(table) {\n            new DataTable(table, {\n                responsive: true,\n                pageLength: 10,\n                order: [[0, 'desc']]\n            });\n        });\n    }\n});\n\n// Enhanced Like functionality with real-time updates and duplicate prevention\nwindow.toggleLike = function(projectId) {\n    const button = event.target.closest('button');\n    if (button && button.dataset.processing) {\n        return; // Prevent duplicate requests\n    }\n    \n    if (button) {\n        button.dataset.processing = 'true';\n        button.disabled = true;\n    }\n    \n    fetch(`/api/toggle-like/${projectId}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Requested-With': 'XMLHttpRequest'\n        }\n    })\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}`);\n        }\n        return response.json();\n    })\n    .then(data => {\n        if (data.error) {\n            throw new Error(data.error);\n        }\n        \n        // Update all like buttons for this project\n        const likeButtons = document.querySelectorAll(`[data-project-id=\"${projectId}\"]`);\n        likeButtons.forEach(btn => {\n            const icon = btn.querySelector('i');\n            const countSpan = btn.querySelector('.like-count');\n            \n            if (data.liked) {\n                btn.classList.remove('btn-outline-danger');\n                btn.classList.add('btn-danger');\n                if (icon) icon.className = 'fas fa-heart';\n            } else {\n                btn.classList.remove('btn-danger');\n                btn.classList.add('btn-outline-danger');\n                if (icon) icon.className = 'far fa-heart';\n            }\n            \n            if (countSpan) {\n                countSpan.textContent = data.likes_count;\n            }\n        });\n        \n        // Update standalone like counts\n        const likeCounts = document.querySelectorAll(`.likes-count-${projectId}`);\n        likeCounts.forEach(count => {\n            count.textContent = data.likes_count;\n        });\n        \n        showToast(data.liked ? 'Projeto curtido!' : 'Curtida removida', 'success');\n    })\n    .catch(error => {\n        console.error('Like error:', error);\n        showToast('Erro ao curtir projeto. Tente novamente.', 'error');\n    })\n    .finally(() => {\n        if (button) {\n            delete button.dataset.processing;\n            button.disabled = false;\n        }\n    });\n};\n\n// Comment functionality with validation and real-time updates\nwindow.submitComment = function(projectId) {\n    const form = document.getElementById('comment-form');\n    const contentTextarea = form.querySelector('textarea[name=\"content\"]');\n    const submitBtn = form.querySelector('button[type=\"submit\"]');\n    \n    const content = contentTextarea.value.trim();\n    \n    // Validation\n    if (!content) {\n        showToast('O comentário não pode estar vazio.', 'error');\n        contentTextarea.focus();\n        return;\n    }\n    \n    if (content.length > 1000) {\n        showToast('O comentário não pode ter mais de 1000 caracteres.', 'error');\n        contentTextarea.focus();\n        return;\n    }\n    \n    // Disable form during submission\n    submitBtn.disabled = true;\n    submitBtn.innerHTML = '<span class=\"spinner-border spinner-border-sm me-2\"></span>Enviando...';\n    \n    fetch(`/api/add-comment/${projectId}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Requested-With': 'XMLHttpRequest'\n        },\n        body: JSON.stringify({ content: content })\n    })\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}`);\n        }\n        return response.json();\n    })\n    .then(data => {\n        if (data.error) {\n            throw new Error(data.error);\n        }\n        \n        // Clear form\n        contentTextarea.value = '';\n        \n        // Add comment to the top of the list\n        const commentsList = document.getElementById('comments-list');\n        const newCommentHtml = createCommentHtml(data.comment);\n        commentsList.insertAdjacentHTML('afterbegin', newCommentHtml);\n        \n        // Update comment count\n        const commentCounts = document.querySelectorAll(`.comments-count-${projectId}`);\n        commentCounts.forEach(count => {\n            count.textContent = data.total_comments;\n        });\n        \n        showToast('Comentário adicionado com sucesso!', 'success');\n    })\n    .catch(error => {\n        console.error('Comment error:', error);\n        showToast('Erro ao adicionar comentário. Tente novamente.', 'error');\n    })\n    .finally(() => {\n        submitBtn.disabled = false;\n        submitBtn.innerHTML = 'Comentar';\n    });\n};\n\n// Helper function to create comment HTML\nfunction createCommentHtml(comment) {\n    const timeAgo = formatTimeAgo(comment.created_at);\n    return `\n        <div class=\"comment mb-3 p-3 border rounded\">\n            <div class=\"d-flex justify-content-between align-items-start mb-2\">\n                <div class=\"d-flex align-items-center\">\n                    <div class=\"avatar-placeholder bg-primary text-white rounded-circle me-3 d-flex align-items-center justify-content-center\" \n                         style=\"width: 40px; height: 40px;\">\n                        <i class=\"fas fa-user\"></i>\n                    </div>\n                    <div>\n                        <h6 class=\"mb-0 fw-bold\">${comment.author_name}</h6>\n                        <small class=\"text-muted\">${timeAgo}</small>\n                    </div>\n                </div>\n            </div>\n            <p class=\"mb-0\">${comment.content}</p>\n        </div>\n    `;\n}\n\n// Helper function to format time ago\nfunction formatTimeAgo(dateString) {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now - date);\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor(diffTime / (1000 * 60 * 60));\n    const diffMinutes = Math.floor(diffTime / (1000 * 60));\n    \n    if (diffDays > 0) {\n        return `há ${diffDays} dia${diffDays > 1 ? 's' : ''}`;\n    } else if (diffHours > 0) {\n        return `há ${diffHours} hora${diffHours > 1 ? 's' : ''}`;\n    } else if (diffMinutes > 0) {\n        return `há ${diffMinutes} minuto${diffMinutes > 1 ? 's' : ''}`;\n    } else {\n        return 'agora';\n    }\n}\n\n// Character count for comment textarea\ndocument.addEventListener('DOMContentLoaded', function() {\n    const commentTextareas = document.querySelectorAll('textarea[name=\"content\"]');\n    commentTextareas.forEach(textarea => {\n        const maxLength = 1000;\n        let counter = textarea.parentElement.querySelector('.char-counter');\n        \n        if (!counter) {\n            counter = document.createElement('div');\n            counter.className = 'char-counter text-muted small mt-1';\n            textarea.parentElement.appendChild(counter);\n        }\n        \n        function updateCounter() {\n            const remaining = maxLength - textarea.value.length;\n            counter.textContent = `${textarea.value.length}/${maxLength} caracteres`;\n            counter.className = remaining < 100 ? 'char-counter text-danger small mt-1' : 'char-counter text-muted small mt-1';\n        }\n        \n        textarea.addEventListener('input', updateCounter);\n        updateCounter(); // Initial update\n    });\n});\n\n// Enhanced form validation\nwindow.validateForm = function(form) {\n    const requiredFields = form.querySelectorAll('[required]');\n    let isValid = true;\n    \n    requiredFields.forEach(function(field) {\n        if (!field.value.trim()) {\n            field.classList.add('is-invalid');\n            isValid = false;\n        } else {\n            field.classList.remove('is-invalid');\n            field.classList.add('is-valid');\n        }\n    });\n    \n    // Email validation\n    const emailFields = form.querySelectorAll('input[type=\"email\"]');\n    emailFields.forEach(function(field) {\n        if (field.value && !isValidEmail(field.value)) {\n            field.classList.add('is-invalid');\n            isValid = false;\n        }\n    });\n    \n    // URL validation\n    const urlFields = form.querySelectorAll('input[type=\"url\"]');\n    urlFields.forEach(function(field) {\n        if (field.value && !isValidUrl(field.value)) {\n            field.classList.add('is-invalid');\n            isValid = false;\n        }\n    });\n    \n    return isValid;\n};\n\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nfunction isValidUrl(url) {\n    try {\n        new URL(url);\n        return true;\n    } catch {\n        return false;\n    }\n}\n\n// Page loading indicator\nwindow.addEventListener('beforeunload', function() {\n    const loadingOverlay = document.createElement('div');\n    loadingOverlay.className = 'position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center';\n    loadingOverlay.style.backgroundColor = 'rgba(0,0,0,0.5)';\n    loadingOverlay.style.zIndex = '9999';\n    loadingOverlay.innerHTML = '<div class=\"spinner-border text-primary\" role=\"status\"><span class=\"visually-hidden\">Loading...</span></div>';\n    document.body.appendChild(loadingOverlay);\n});\n","size_bytes":19429},"static/js/modern-portfolio.js":{"content":"/**\n * Modern Digital Portfolio - JavaScript\n * Enhanced UI/UX with animations and interactions\n */\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializePortfolio();\n});\n\nfunction initializePortfolio() {\n    initTheme();\n    initAnimations();\n    initFormEnhancements();\n    initTooltips();\n    initImageUploads();\n    initAlerts();\n    initSmoothScrolling();\n}\n\n// Theme Management\nfunction initTheme() {\n    const theme = localStorage.getItem('theme') || 'light';\n    document.documentElement.setAttribute('data-theme', theme);\n    updateThemeIcon(theme);\n}\n\nfunction toggleTheme() {\n    const currentTheme = document.documentElement.getAttribute('data-theme');\n    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\n    document.documentElement.setAttribute('data-theme', newTheme);\n    localStorage.setItem('theme', newTheme);\n    updateThemeIcon(newTheme);\n\n    // Add smooth transition\n    document.body.style.transition = 'all 0.3s ease';\n    setTimeout(() => {\n        document.body.style.transition = '';\n    }, 300);\n}\n\nfunction updateThemeIcon(theme) {\n    const icon = document.getElementById('theme-icon');\n    if (icon) {\n        icon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';\n    }\n}\n\n// Animation System\nfunction initAnimations() {\n    const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n    };\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.classList.add('fade-in');\n                observer.unobserve(entry.target);\n            }\n        });\n    }, observerOptions);\n\n    // Observe elements for animations\n    document.querySelectorAll('.card, .hero-content, .project-card').forEach(el => {\n        observer.observe(el);\n    });\n\n    // Add stagger animation to project cards\n    const projectCards = document.querySelectorAll('.project-card');\n    projectCards.forEach((card, index) => {\n        card.style.animationDelay = `${index * 0.1}s`;\n        card.classList.add('slide-up');\n    });\n}\n\n// Enhanced Form Functionality\nfunction initFormEnhancements() {\n    // Add loading animation to forms\n    document.querySelectorAll('form').forEach(form => {\n        form.addEventListener('submit', function(e) {\n            const submitBtn = form.querySelector('button[type=\"submit\"]');\n            if (submitBtn && !submitBtn.disabled) {\n                showLoadingState(submitBtn);\n\n                // Reset after timeout as fallback\n                setTimeout(() => {\n                    hideLoadingState(submitBtn);\n                }, 10000);\n            }\n        });\n    });\n\n    // Enhanced form validation\n    const inputs = document.querySelectorAll('.form-control');\n    inputs.forEach(input => {\n        input.addEventListener('blur', validateField);\n        input.addEventListener('input', clearValidation);\n    });\n\n    // Admin action confirmations\n    document.querySelectorAll('.admin-action').forEach(button => {\n        button.addEventListener('click', function(e) {\n            const action = this.dataset.action;\n            const target = this.dataset.target;\n\n            if (!confirm(`Are you sure you want to ${action} ${target}?`)) {\n                e.preventDefault();\n            }\n        });\n    });\n}\n\nfunction showLoadingState(button) {\n    const originalContent = button.innerHTML;\n    button.dataset.originalContent = originalContent;\n    button.innerHTML = '<span class=\"loading me-2\"></span>Processing...';\n    button.disabled = true;\n    button.classList.add('loading-state');\n}\n\nfunction hideLoadingState(button) {\n    if (button.dataset.originalContent) {\n        button.innerHTML = button.dataset.originalContent;\n        delete button.dataset.originalContent;\n    }\n    button.disabled = false;\n    button.classList.remove('loading-state');\n}\n\nfunction validateField(e) {\n    const field = e.target;\n    const value = field.value.trim();\n\n    // Clear previous validation\n    field.classList.remove('is-valid', 'is-invalid');\n\n    if (field.required && !value) {\n        field.classList.add('is-invalid');\n        showFieldError(field, 'This field is required.');\n    } else if (field.type === 'email' && value && !isValidEmail(value)) {\n        field.classList.add('is-invalid');\n        showFieldError(field, 'Please enter a valid email address.');\n    } else if (value) {\n        field.classList.add('is-valid');\n        clearFieldError(field);\n    }\n}\n\nfunction clearValidation(e) {\n    const field = e.target;\n    field.classList.remove('is-valid', 'is-invalid');\n    clearFieldError(field);\n}\n\nfunction showFieldError(field, message) {\n    clearFieldError(field);\n    const errorDiv = document.createElement('div');\n    errorDiv.className = 'invalid-feedback';\n    errorDiv.textContent = message;\n    field.parentNode.appendChild(errorDiv);\n}\n\nfunction clearFieldError(field) {\n    const existingError = field.parentNode.querySelector('.invalid-feedback');\n    if (existingError) {\n        existingError.remove();\n    }\n}\n\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\n// Tooltip Enhancement\nfunction initTooltips() {\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n}\n\n// Image Upload Preview\nfunction initImageUploads() {\n    const imageInputs = document.querySelectorAll('input[type=\"file\"][accept*=\"image\"]');\n\n    imageInputs.forEach(input => {\n        input.addEventListener('change', function(e) {\n            const file = e.target.files[0];\n            if (file) {\n                if (file.size > 5 * 1024 * 1024) { // 5MB limit\n                    alert('File size must be less than 5MB');\n                    this.value = '';\n                    return;\n                }\n\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    const preview = findImagePreview(input);\n                    if (preview) {\n                        preview.src = e.target.result;\n                        preview.style.transform = 'scale(1.05)';\n                        setTimeout(() => {\n                            preview.style.transform = '';\n                        }, 200);\n                    }\n                };\n                reader.readAsDataURL(file);\n            }\n        });\n    });\n}\n\nfunction findImagePreview(input) {\n    // Look for various preview patterns\n    const previewSelectors = [\n        '.profile-image',\n        '.image-preview',\n        'img[data-preview]',\n        '.preview-image'\n    ];\n\n    for (const selector of previewSelectors) {\n        const preview = input.closest('.form-group, .mb-3, .profile-upload')?.querySelector(selector);\n        if (preview) return preview;\n    }\n\n    return null;\n}\n\n// Alert Management\nfunction initAlerts() {\n    // Auto-hide alerts with smooth animation\n    setTimeout(function() {\n        const alerts = document.querySelectorAll('.alert');\n        alerts.forEach(function(alert) {\n            alert.style.transition = 'opacity 0.5s ease, transform 0.5s ease';\n            alert.style.opacity = '0';\n            alert.style.transform = 'translateY(-20px)';\n\n            setTimeout(() => {\n                if (alert.parentNode) {\n                    alert.remove();\n                }\n            }, 500);\n        });\n    }, 5000);\n}\n\n// Smooth Scrolling\nfunction initSmoothScrolling() {\n    // Smooth scroll for anchor links\n    const anchorLinks = document.querySelectorAll('a[href^=\"#\"]');\n    anchorLinks.forEach(function(link) {\n        link.addEventListener('click', function(e) {\n            const href = this.getAttribute('href');\n            if (href && href !== '#' && href.length > 1) {\n                try {\n                    // Validate selector before using querySelector\n                    if (href.match(/^#[\\w-]+$/)) {\n                        const target = document.querySelector(href);\n                        if (target) {\n                            e.preventDefault();\n                            target.scrollIntoView({\n                                behavior: 'smooth',\n                                block: 'start'\n                            });\n                        }\n                    }\n                } catch (err) {\n                    console.log('Invalid selector:', href);\n                }\n            } else if (href === '#') {\n                // Prevent default action for empty hash links\n                e.preventDefault();\n            }\n        });\n    });\n}\n\n// Project Card Interactions\nfunction initProjectCards() {\n    const projectCards = document.querySelectorAll('.project-card');\n\n    projectCards.forEach(card => {\n        card.addEventListener('mouseenter', function() {\n            this.style.transform = 'translateY(-8px) scale(1.02)';\n        });\n\n        card.addEventListener('mouseleave', function() {\n            this.style.transform = '';\n        });\n    });\n}\n\n// Like System with Animation\nfunction toggleLike(projectId) {\n    if (!projectId || projectId === '') return;\n\n    const button = document.querySelector(`[data-project-id=\"${projectId}\"]`);\n    if (!button) return;\n\n    const icon = button.querySelector('i');\n    const countSpan = button.querySelector('.like-count');\n\n    // Add loading state\n    icon.classList.add('fa-spin');\n\n    fetch(`/toggle_like/${projectId}`, {\n        method: 'POST',\n        headers: {\n            'X-Requested-With': 'XMLHttpRequest',\n            'Content-Type': 'application/json',\n        },\n    })\n    .then(response => response.json())\n    .then(data => {\n        // Remove loading state\n        icon.classList.remove('fa-spin');\n\n        // Update UI\n        if (data.liked) {\n            icon.classList.remove('far');\n            icon.classList.add('fas', 'text-danger');\n            button.classList.add('liked');\n\n            // Heart animation\n            icon.style.transform = 'scale(1.3)';\n            setTimeout(() => {\n                icon.style.transform = '';\n            }, 200);\n        } else {\n            icon.classList.remove('fas', 'text-danger');\n            icon.classList.add('far');\n            button.classList.remove('liked');\n        }\n\n        // Update count with animation\n        if (countSpan) {\n            countSpan.style.transform = 'scale(1.2)';\n            countSpan.textContent = data.likes_count;\n            setTimeout(() => {\n                countSpan.style.transform = '';\n            }, 200);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n        icon.classList.remove('fa-spin');\n        alert('An error occurred. Please try again.');\n    });\n}\n\n// Search Enhancement\nfunction initSearch() {\n    const searchInput = document.querySelector('input[name=\"query\"]');\n    const searchForm = searchInput?.closest('form');\n\n    if (searchInput) {\n        let searchTimeout;\n\n        searchInput.addEventListener('input', function() {\n            clearTimeout(searchTimeout);\n\n            if (this.value.length >= 3) {\n                searchTimeout = setTimeout(() => {\n                    // Could implement live search here\n                    console.log('Searching for:', this.value);\n                }, 300);\n            }\n        });\n\n        // Add search suggestions (placeholder for future enhancement)\n        searchInput.addEventListener('focus', function() {\n            this.classList.add('search-focused');\n        });\n\n        searchInput.addEventListener('blur', function() {\n            this.classList.remove('search-focused');\n        });\n    }\n}\n\n// Admin Panel Enhancements\nfunction initAdminPanel() {\n    // Row highlighting in admin tables\n    const adminRows = document.querySelectorAll('.admin-table tbody tr');\n    adminRows.forEach(row => {\n        row.addEventListener('mouseenter', function() {\n            this.style.backgroundColor = 'var(--bg-tertiary)';\n        });\n\n        row.addEventListener('mouseleave', function() {\n            this.style.backgroundColor = '';\n        });\n    });\n\n    // Bulk actions (future enhancement)\n    const checkboxes = document.querySelectorAll('.admin-checkbox');\n    if (checkboxes.length > 0) {\n        const selectAllCheckbox = document.querySelector('#select-all');\n\n        if (selectAllCheckbox) {\n            selectAllCheckbox.addEventListener('change', function() {\n                checkboxes.forEach(checkbox => {\n                    checkbox.checked = this.checked;\n                });\n            });\n        }\n    }\n}\n\n// Utility Functions\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\nfunction showNotification(message, type = 'info') {\n    const notification = document.createElement('div');\n    notification.className = `alert alert-${type} notification`;\n    notification.textContent = message;\n    notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 9999;\n        min-width: 300px;\n        opacity: 0;\n        transform: translateX(100%);\n        transition: all 0.3s ease;\n    `;\n\n    document.body.appendChild(notification);\n\n    setTimeout(() => {\n        notification.style.opacity = '1';\n        notification.style.transform = 'translateX(0)';\n    }, 100);\n\n    setTimeout(() => {\n        notification.style.opacity = '0';\n        notification.style.transform = 'translateX(100%)';\n        setTimeout(() => {\n            notification.remove();\n        }, 300);\n    }, 3000);\n}\n\n// Initialize on page load\ndocument.addEventListener('DOMContentLoaded', function() {\n    initSearch();\n    initProjectCards();\n    initAdminPanel();\n});\n\n// Performance monitoring (development only)\nif (window.location.hostname === 'localhost' || window.location.hostname.includes('replit')) {\n    window.addEventListener('load', function() {\n        setTimeout(() => {\n            const perfData = performance.getEntriesByType('navigation')[0];\n            console.log('Page Load Time:', Math.round(perfData.loadEventEnd - perfData.loadEventStart), 'ms');\n        }, 100);\n    });\n}","size_bytes":14489},"static/js/skills-comparator.js":{"content":"// Skills Comparator System\nclass SkillsComparator {\n    constructor() {\n        this.skills = [];\n        this.selectedSkills = [];\n        this.comparisonData = null;\n        this.init();\n    }\n\n    init() {\n        this.loadSkills();\n        this.createComparatorInterface();\n        this.bindEvents();\n    }\n\n    async loadSkills() {\n        try {\n            const response = await fetch('/api/skills');\n            if (response.ok) {\n                const data = await response.json();\n                this.skills = data.skills || [];\n            }\n        } catch (error) {\n            console.log('Using sample skills data');\n            this.skills = this.getSampleSkills();\n        }\n    }\n\n    getSampleSkills() {\n        return [\n            { id: 1, name: 'Python', level: 9, projects: 8, experience_years: 3 },\n            { id: 2, name: 'JavaScript', level: 8, projects: 12, experience_years: 4 },\n            { id: 3, name: 'Flask', level: 9, projects: 6, experience_years: 2 },\n            { id: 4, name: 'React', level: 7, projects: 5, experience_years: 2 },\n            { id: 5, name: 'SQL', level: 8, projects: 10, experience_years: 3 },\n            { id: 6, name: 'HTML/CSS', level: 9, projects: 15, experience_years: 4 },\n            { id: 7, name: 'Bootstrap', level: 8, projects: 12, experience_years: 3 },\n            { id: 8, name: 'Git', level: 8, projects: 20, experience_years: 3 }\n        ];\n    }\n\n    createComparatorInterface() {\n        const container = document.getElementById('skills-comparator');\n        if (!container) return;\n\n        container.innerHTML = `\n            <div class=\"skills-comparator-section\">\n                <div class=\"row\">\n                    <div class=\"col-12 text-center mb-5\">\n                        <h2 class=\"fw-bold mb-3\">\n                            <i class=\"fas fa-balance-scale me-2 text-primary\"></i>\n                            <span data-i18n=\"skills_comparator_title\">Comparador de Habilidades</span>\n                        </h2>\n                        <p class=\"lead text-muted\" data-i18n=\"skills_comparator_subtitle\">\n                            Compare duas habilidades do meu portfólio e veja projetos, métricas e resultados\n                        </p>\n                    </div>\n                </div>\n\n                <div class=\"row justify-content-center mb-5\">\n                    <div class=\"col-lg-8\">\n                        <div class=\"card border-0 shadow-sm\">\n                            <div class=\"card-body p-4\">\n                                <div class=\"row g-4\">\n                                    <div class=\"col-md-5\">\n                                        <label class=\"form-label fw-semibold\">\n                                            <i class=\"fas fa-search me-1\"></i>Primeira Habilidade\n                                        </label>\n                                        <select class=\"form-select\" id=\"skill1-select\">\n                                            <option value=\"\">Selecione uma habilidade...</option>\n                                            ${this.skills.map(skill => \n                                                `<option value=\"${skill.id}\">${skill.name}</option>`\n                                            ).join('')}\n                                        </select>\n                                    </div>\n                                    \n                                    <div class=\"col-md-2 text-center d-flex align-items-end justify-content-center\">\n                                        <div class=\"vs-badge\">\n                                            <span class=\"badge bg-primary fs-6 px-3 py-2\">VS</span>\n                                        </div>\n                                    </div>\n                                    \n                                    <div class=\"col-md-5\">\n                                        <label class=\"form-label fw-semibold\">\n                                            <i class=\"fas fa-search me-1\"></i>Segunda Habilidade\n                                        </label>\n                                        <select class=\"form-select\" id=\"skill2-select\">\n                                            <option value=\"\">Selecione uma habilidade...</option>\n                                            ${this.skills.map(skill => \n                                                `<option value=\"${skill.id}\">${skill.name}</option>`\n                                            ).join('')}\n                                        </select>\n                                    </div>\n                                </div>\n                                \n                                <div class=\"text-center mt-4\">\n                                    <button class=\"btn btn-primary btn-lg\" onclick=\"skillsComparator.compareSkills()\" disabled id=\"compare-btn\">\n                                        <i class=\"fas fa-chart-bar me-2\"></i>Comparar Habilidades\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"comparison-results\" id=\"comparison-results\" style=\"display: none;\">\n                    <!-- Results will be populated here -->\n                </div>\n            </div>\n        `;\n    }\n\n    bindEvents() {\n        const skill1Select = document.getElementById('skill1-select');\n        const skill2Select = document.getElementById('skill2-select');\n        const compareBtn = document.getElementById('compare-btn');\n\n        [skill1Select, skill2Select].forEach(select => {\n            select.addEventListener('change', () => {\n                this.updateCompareButton();\n                this.updateSkillOptions();\n            });\n        });\n    }\n\n    updateCompareButton() {\n        const skill1 = document.getElementById('skill1-select').value;\n        const skill2 = document.getElementById('skill2-select').value;\n        const compareBtn = document.getElementById('compare-btn');\n        \n        compareBtn.disabled = !(skill1 && skill2 && skill1 !== skill2);\n    }\n\n    updateSkillOptions() {\n        const skill1Value = document.getElementById('skill1-select').value;\n        const skill2Value = document.getElementById('skill2-select').value;\n        \n        // Disable already selected options\n        document.querySelectorAll('#skill1-select option, #skill2-select option').forEach(option => {\n            option.disabled = false;\n        });\n        \n        if (skill1Value) {\n            const skill2Option = document.querySelector(`#skill2-select option[value=\"${skill1Value}\"]`);\n            if (skill2Option) skill2Option.disabled = true;\n        }\n        \n        if (skill2Value) {\n            const skill1Option = document.querySelector(`#skill1-select option[value=\"${skill2Value}\"]`);\n            if (skill1Option) skill1Option.disabled = true;\n        }\n    }\n\n    async compareSkills() {\n        const skill1Id = document.getElementById('skill1-select').value;\n        const skill2Id = document.getElementById('skill2-select').value;\n        \n        if (!skill1Id || !skill2Id) return;\n\n        const skill1 = this.skills.find(s => s.id == skill1Id);\n        const skill2 = this.skills.find(s => s.id == skill2Id);\n\n        if (!skill1 || !skill2) return;\n\n        // Show loading state\n        this.showLoadingState();\n\n        try {\n            // Get comparison data (with fallback to sample data)\n            const comparisonData = await this.getComparisonData(skill1, skill2);\n            this.displayComparison(skill1, skill2, comparisonData);\n        } catch (error) {\n            console.error('Comparison error:', error);\n            this.showErrorState();\n        }\n    }\n\n    async getComparisonData(skill1, skill2) {\n        try {\n            const response = await fetch('/api/skills/compare', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    skill1_id: skill1.id,\n                    skill2_id: skill2.id\n                })\n            });\n\n            if (response.ok) {\n                return await response.json();\n            }\n        } catch (error) {\n            console.log('Using fallback comparison data');\n        }\n\n        // Fallback comparison data\n        return {\n            skill1_projects: this.generateSampleProjects(skill1.name, skill1.projects),\n            skill2_projects: this.generateSampleProjects(skill2.name, skill2.projects),\n            metrics: {\n                skill1: {\n                    proficiency: skill1.level,\n                    projects_count: skill1.projects,\n                    experience_years: skill1.experience_years,\n                    complexity_avg: Math.floor(Math.random() * 3) + 6\n                },\n                skill2: {\n                    proficiency: skill2.level,\n                    projects_count: skill2.projects,\n                    experience_years: skill2.experience_years,\n                    complexity_avg: Math.floor(Math.random() * 3) + 6\n                }\n            }\n        };\n    }\n\n    generateSampleProjects(skillName, count) {\n        const projectTypes = {\n            'Python': ['Web API', 'Data Analysis', 'Automation Script', 'Machine Learning'],\n            'JavaScript': ['Interactive UI', 'SPA Application', 'Dynamic Website', 'Real-time Chat'],\n            'Flask': ['REST API', 'Web Application', 'Backend Service', 'Database Integration'],\n            'React': ['Component Library', 'Dashboard', 'E-commerce Site', 'Mobile App']\n        };\n\n        const types = projectTypes[skillName] || ['Web Project', 'Application', 'System', 'Tool'];\n        const projects = [];\n\n        for (let i = 0; i < Math.min(count, 6); i++) {\n            projects.push({\n                id: i + 1,\n                title: `${types[i % types.length]} ${i + 1}`,\n                description: `Projeto desenvolvido usando ${skillName} com foco em funcionalidade e performance.`,\n                completion_year: 2024 - Math.floor(Math.random() * 2),\n                complexity: Math.floor(Math.random() * 5) + 5,\n                url: '#'\n            });\n        }\n\n        return projects;\n    }\n\n    showLoadingState() {\n        const resultsContainer = document.getElementById('comparison-results');\n        resultsContainer.style.display = 'block';\n        resultsContainer.innerHTML = `\n            <div class=\"text-center py-5\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Carregando...</span>\n                </div>\n                <p class=\"mt-3 text-muted\">Analisando habilidades e coletando dados...</p>\n            </div>\n        `;\n    }\n\n    showErrorState() {\n        const resultsContainer = document.getElementById('comparison-results');\n        resultsContainer.innerHTML = `\n            <div class=\"alert alert-warning text-center\">\n                <i class=\"fas fa-exclamation-triangle me-2\"></i>\n                Erro ao carregar dados de comparação. Tente novamente.\n            </div>\n        `;\n    }\n\n    displayComparison(skill1, skill2, data) {\n        const resultsContainer = document.getElementById('comparison-results');\n        \n        resultsContainer.innerHTML = `\n            <div class=\"comparison-header text-center mb-5\">\n                <h3 class=\"fw-bold\">\n                    ${skill1.name} <span class=\"text-muted\">vs</span> ${skill2.name}\n                </h3>\n                <p class=\"text-muted\">Análise detalhada das duas habilidades</p>\n            </div>\n\n            ${this.createMetricsComparison(skill1, skill2, data.metrics)}\n            ${this.createProjectsComparison(skill1, skill2, data)}\n            ${this.createRecommendation(skill1, skill2, data.metrics)}\n        `;\n\n        resultsContainer.style.display = 'block';\n        \n        // Initialize charts if available\n        setTimeout(() => {\n            this.initializeCharts(data.metrics);\n        }, 100);\n\n        // Scroll to results\n        resultsContainer.scrollIntoView({ behavior: 'smooth' });\n    }\n\n    createMetricsComparison(skill1, skill2, metrics) {\n        return `\n            <div class=\"row g-4 mb-5\">\n                <div class=\"col-lg-6\">\n                    <div class=\"card border-0 shadow-sm h-100\">\n                        <div class=\"card-body text-center\">\n                            <h4 class=\"text-primary mb-3\">\n                                <i class=\"fas fa-star me-2\"></i>${skill1.name}\n                            </h4>\n                            ${this.createSkillMetrics(metrics.skill1, 'primary')}\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-lg-6\">\n                    <div class=\"card border-0 shadow-sm h-100\">\n                        <div class=\"card-body text-center\">\n                            <h4 class=\"text-success mb-3\">\n                                <i class=\"fas fa-star me-2\"></i>${skill2.name}\n                            </h4>\n                            ${this.createSkillMetrics(metrics.skill2, 'success')}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row mb-5\">\n                <div class=\"col-12\">\n                    <div class=\"card border-0 shadow-sm\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title mb-4\">\n                                <i class=\"fas fa-chart-bar me-2\"></i>Comparação Visual\n                            </h5>\n                            <canvas id=\"comparison-chart\" width=\"400\" height=\"200\"></canvas>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    createSkillMetrics(metrics, color) {\n        return `\n            <div class=\"row g-3\">\n                <div class=\"col-6\">\n                    <div class=\"metric-item\">\n                        <div class=\"metric-value text-${color} fw-bold fs-4\">${metrics.proficiency}/10</div>\n                        <div class=\"metric-label text-muted small\">Proficiência</div>\n                    </div>\n                </div>\n                <div class=\"col-6\">\n                    <div class=\"metric-item\">\n                        <div class=\"metric-value text-${color} fw-bold fs-4\">${metrics.projects_count}</div>\n                        <div class=\"metric-label text-muted small\">Projetos</div>\n                    </div>\n                </div>\n                <div class=\"col-6\">\n                    <div class=\"metric-item\">\n                        <div class=\"metric-value text-${color} fw-bold fs-4\">${metrics.experience_years}</div>\n                        <div class=\"metric-label text-muted small\">Anos Exp.</div>\n                    </div>\n                </div>\n                <div class=\"col-6\">\n                    <div class=\"metric-item\">\n                        <div class=\"metric-value text-${color} fw-bold fs-4\">${metrics.complexity_avg}/10</div>\n                        <div class=\"metric-label text-muted small\">Complexidade</div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    createProjectsComparison(skill1, skill2, data) {\n        return `\n            <div class=\"row g-4 mb-5\">\n                <div class=\"col-lg-6\">\n                    <h5 class=\"mb-3\">\n                        <i class=\"fas fa-project-diagram me-2 text-primary\"></i>\n                        Projetos com ${skill1.name}\n                    </h5>\n                    ${data.skill1_projects.map(project => this.createProjectCard(project, 'primary')).join('')}\n                </div>\n                <div class=\"col-lg-6\">\n                    <h5 class=\"mb-3\">\n                        <i class=\"fas fa-project-diagram me-2 text-success\"></i>\n                        Projetos com ${skill2.name}\n                    </h5>\n                    ${data.skill2_projects.map(project => this.createProjectCard(project, 'success')).join('')}\n                </div>\n            </div>\n        `;\n    }\n\n    createProjectCard(project, color) {\n        return `\n            <div class=\"card border-0 shadow-sm mb-3\">\n                <div class=\"card-body\">\n                    <div class=\"d-flex justify-content-between align-items-start mb-2\">\n                        <h6 class=\"card-title mb-0\">${project.title}</h6>\n                        <span class=\"badge bg-${color}\">${project.complexity}/10</span>\n                    </div>\n                    <p class=\"card-text text-muted small mb-2\">${project.description}</p>\n                    <div class=\"d-flex justify-content-between align-items-center\">\n                        <small class=\"text-muted\">\n                            <i class=\"fas fa-calendar me-1\"></i>${project.completion_year}\n                        </small>\n                        <a href=\"${project.url}\" class=\"btn btn-outline-${color} btn-sm\">\n                            <i class=\"fas fa-eye me-1\"></i>Ver\n                        </a>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    createRecommendation(skill1, skill2, metrics) {\n        const skill1Score = (metrics.skill1.proficiency + metrics.skill1.projects_count + metrics.skill1.experience_years * 2) / 4;\n        const skill2Score = (metrics.skill2.proficiency + metrics.skill2.projects_count + metrics.skill2.experience_years * 2) / 4;\n        \n        const stronger = skill1Score > skill2Score ? skill1 : skill2;\n        const weaker = skill1Score > skill2Score ? skill2 : skill1;\n\n        return `\n            <div class=\"row\">\n                <div class=\"col-12\">\n                    <div class=\"card border-0 bg-light\">\n                        <div class=\"card-body text-center\">\n                            <h5 class=\"card-title\">\n                                <i class=\"fas fa-lightbulb me-2 text-warning\"></i>\n                                Análise e Recomendação\n                            </h5>\n                            <p class=\"card-text\">\n                                Com base na análise, <strong>${stronger.name}</strong> aparece como uma habilidade mais consolidada \n                                no meu portfólio, com maior experiência prática e complexidade de projetos. \n                                <strong>${weaker.name}</strong> também é uma competência sólida, complementando \n                                muito bem o conjunto de tecnologias para desenvolvimento completo.\n                            </p>\n                            <div class=\"mt-3\">\n                                <span class=\"badge bg-primary me-2\">Complementares</span>\n                                <span class=\"badge bg-success\">Experiência Prática</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    initializeCharts(metrics) {\n        const canvas = document.getElementById('comparison-chart');\n        if (!canvas) return;\n\n        // Simple chart using Canvas API (fallback if Chart.js not available)\n        const ctx = canvas.getContext('2d');\n        const data = [\n            { label: 'Proficiência', skill1: metrics.skill1.proficiency, skill2: metrics.skill2.proficiency },\n            { label: 'Projetos', skill1: metrics.skill1.projects_count, skill2: metrics.skill2.projects_count },\n            { label: 'Experiência', skill1: metrics.skill1.experience_years, skill2: metrics.skill2.experience_years },\n            { label: 'Complexidade', skill1: metrics.skill1.complexity_avg, skill2: metrics.skill2.complexity_avg }\n        ];\n\n        this.drawComparisonChart(ctx, data, canvas.width, canvas.height);\n    }\n\n    drawComparisonChart(ctx, data, width, height) {\n        ctx.clearRect(0, 0, width, height);\n        \n        const barHeight = 30;\n        const barSpacing = 60;\n        const startY = 50;\n        const maxValue = 15;\n        \n        data.forEach((item, index) => {\n            const y = startY + index * barSpacing;\n            \n            // Draw labels\n            ctx.fillStyle = '#666';\n            ctx.font = '14px Arial';\n            ctx.fillText(item.label, 10, y + 20);\n            \n            // Draw skill1 bar\n            const skill1Width = (item.skill1 / maxValue) * (width - 200);\n            ctx.fillStyle = '#0d6efd';\n            ctx.fillRect(120, y, skill1Width, barHeight);\n            \n            // Draw skill2 bar\n            const skill2Width = (item.skill2 / maxValue) * (width - 200);\n            ctx.fillStyle = '#198754';\n            ctx.fillRect(120, y + barHeight + 5, skill2Width, barHeight);\n            \n            // Draw values\n            ctx.fillStyle = '#333';\n            ctx.font = '12px Arial';\n            ctx.fillText(item.skill1, 120 + skill1Width + 5, y + 20);\n            ctx.fillText(item.skill2, 120 + skill2Width + 5, y + barHeight + 20);\n        });\n    }\n}\n\n// Initialize Skills Comparator\ndocument.addEventListener('DOMContentLoaded', function() {\n    if (document.getElementById('skills-comparator')) {\n        window.skillsComparator = new SkillsComparator();\n    }\n});","size_bytes":21423},"auto_sync_scheduler.py":{"content":"\n#!/usr/bin/env python3\n\"\"\"\nAutomatic GitHub sync scheduler\n\"\"\"\nimport os\nimport time\nimport threading\nimport logging\nfrom datetime import datetime, timedelta\n\n# Safe imports to avoid circular dependencies\ntry:\n    from app import app, db\n    from github_sync import GitHubSyncService\n    from models import GitHubCredentials, GitHubSyncLog\nexcept ImportError as e:\n    print(f\"Import error in auto_sync_scheduler: {e}\")\n    app = None\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass GitHubAutoSync:\n    \"\"\"Automatic GitHub synchronization service\"\"\"\n    \n    def __init__(self, sync_interval_hours=6):\n        self.sync_interval_hours = sync_interval_hours\n        self.running = False\n        self.sync_thread = None\n    \n    def start_auto_sync(self):\n        \"\"\"Start automatic synchronization in background\"\"\"\n        if self.running:\n            logger.info(\"Auto-sync já está rodando\")\n            return\n        \n        self.running = True\n        self.sync_thread = threading.Thread(target=self._sync_loop, daemon=True)\n        self.sync_thread.start()\n        logger.info(f\"Auto-sync iniciado (intervalo: {self.sync_interval_hours}h)\")\n    \n    def stop_auto_sync(self):\n        \"\"\"Stop automatic synchronization\"\"\"\n        self.running = False\n        if self.sync_thread:\n            self.sync_thread.join(timeout=5)\n        logger.info(\"Auto-sync parado\")\n    \n    def _sync_loop(self):\n        \"\"\"Main sync loop\"\"\"\n        # Run initial sync on startup\n        self._run_sync()\n        \n        # Continue with scheduled syncs\n        while self.running:\n            try:\n                time.sleep(self.sync_interval_hours * 3600)  # Convert hours to seconds\n                if self.running:\n                    self._run_sync()\n            except Exception as e:\n                logger.error(f\"Erro no loop de sincronização: {e}\")\n                time.sleep(300)  # Wait 5 minutes before retrying\n    \n    def _run_sync(self):\n        \"\"\"Run a single sync operation\"\"\"\n        try:\n            with app.app_context():\n                credentials = GitHubCredentials.query.filter_by(is_active=True).first()\n                if not credentials:\n                    logger.warning(\"Nenhuma credencial GitHub encontrada para auto-sync\")\n                    return\n                \n                username = credentials.username\n                \n                # Check last sync time to avoid too frequent syncs\n                last_sync = GitHubSyncLog.query.filter_by(\n                    username=username\n                ).order_by(GitHubSyncLog.started_at.desc()).first()\n                \n                if last_sync and last_sync.started_at:\n                    time_since_last = datetime.utcnow() - last_sync.started_at\n                    if time_since_last < timedelta(hours=1):\n                        logger.info(\"Pulando sync - muito recente\")\n                        return\n                \n                logger.info(f\"Executando auto-sync para {username}\")\n                \n                sync_service = GitHubSyncService()\n                success, message, repos_synced = sync_service.sync_user_repositories(username)\n                \n                if success:\n                    logger.info(f\"Auto-sync concluído: {repos_synced} repositórios\")\n                else:\n                    logger.error(f\"Auto-sync falhou: {message}\")\n                    \n        except Exception as e:\n            logger.error(f\"Erro durante auto-sync: {e}\")\n\n# Global instance\nauto_sync = GitHubAutoSync()\n\ndef start_background_sync():\n    \"\"\"Start background synchronization service\"\"\"\n    if not app:\n        logger.error(\"App não disponível para auto-sync\")\n        return False\n        \n    # Only start if we have GitHub credentials or token\n    try:\n        github_token = os.environ.get('GITHUB_TOKEN')\n        if github_token:\n            # Start sync even if no credentials in DB yet\n            auto_sync.start_auto_sync()\n            return True\n            \n        with app.app_context():\n            if GitHubCredentials.query.filter_by(is_active=True).first():\n                auto_sync.start_auto_sync()\n                return True\n    except Exception as e:\n        logger.error(f\"Erro ao iniciar auto-sync: {e}\")\n    return False\n\ndef stop_background_sync():\n    \"\"\"Stop background synchronization service\"\"\"\n    auto_sync.stop_auto_sync()\n\nif __name__ == \"__main__\":\n    print(\"Iniciando serviço de auto-sincronização...\")\n    if start_background_sync():\n        print(\"✅ Serviço iniciado com sucesso!\")\n        try:\n            while True:\n                time.sleep(60)  # Keep the script running\n        except KeyboardInterrupt:\n            print(\"\\n🛑 Parando serviço...\")\n            stop_background_sync()\n            print(\"✅ Serviço parado\")\n    else:\n        print(\"❌ Falha ao iniciar serviço - configure as credenciais primeiro\")\n","size_bytes":4938},"force_github_sync.py":{"content":"\n#!/usr/bin/env python3\n\"\"\"\nScript para forçar sincronização do GitHub\n\"\"\"\nimport os\nimport sys\nimport logging\nfrom app import app, db\nfrom github_client import GitHubClient\nfrom github_sync import GitHubSyncService\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef force_sync():\n    \"\"\"Força a sincronização dos repositórios GitHub\"\"\"\n    with app.app_context():\n        try:\n            # Verificar se há token GitHub\n            github_token = os.environ.get('GITHUB_TOKEN')\n            if not github_token:\n                logger.error(\"GITHUB_TOKEN não encontrado nas variáveis de ambiente\")\n                logger.info(\"Configure o token em Secrets e tente novamente\")\n                return False\n            \n            # Inicializar cliente GitHub\n            client = GitHubClient()\n            \n            # Validar conexão\n            if not client.validate_connection():\n                logger.error(\"Falha na validação da conexão GitHub\")\n                return False\n            \n            # Obter informações do usuário\n            user_info = client.get_authenticated_user()\n            if not user_info:\n                logger.error(\"Não foi possível obter informações do usuário\")\n                return False\n            \n            username = user_info.get('login')\n            logger.info(f\"Usuário GitHub conectado: {username}\")\n            \n            # Inicializar serviço de sincronização\n            sync_service = GitHubSyncService()\n            \n            # Executar sincronização\n            logger.info(\"Iniciando sincronização forçada...\")\n            success, message, repos_synced = sync_service.sync_user_repositories(username)\n            \n            if success:\n                logger.info(f\"✅ Sincronização bem-sucedida!\")\n                logger.info(f\"📁 Repositórios sincronizados: {repos_synced}\")\n                logger.info(f\"💬 Mensagem: {message}\")\n                \n                # Mostrar alguns repositórios sincronizados\n                from models import GitHubRepository\n                recent_repos = GitHubRepository.query.order_by(\n                    GitHubRepository.last_sync_at.desc()\n                ).limit(5).all()\n                \n                if recent_repos:\n                    logger.info(\"📋 Últimos repositórios sincronizados:\")\n                    for repo in recent_repos:\n                        logger.info(f\"  - {repo.name} ({repo.language or 'N/A'})\")\n                \n                return True\n            else:\n                logger.error(f\"❌ Falha na sincronização: {message}\")\n                return False\n                \n        except Exception as e:\n            logger.error(f\"Erro durante sincronização forçada: {e}\")\n            return False\n\nif __name__ == \"__main__\":\n    print(\"🚀 Forçando sincronização do GitHub...\")\n    success = force_sync()\n    \n    if success:\n        print(\"\\n✅ Sincronização concluída com sucesso!\")\n        print(\"🌐 Acesse /projects para ver os repositórios\")\n    else:\n        print(\"\\n❌ Falha na sincronização\")\n        print(\"🔧 Verifique os logs acima para detalhes\")\n    \n    sys.exit(0 if success else 1)\n","size_bytes":3245},"github_public_sync.py":{"content":"\n#!/usr/bin/env python3\n\"\"\"\nGitHub public repository sync without authentication\nPara repositórios públicos que não precisam de token\n\"\"\"\nimport requests\nimport json\nimport logging\nfrom datetime import datetime\nfrom app import app, db\nfrom models import GitHubRepository, GitHubRepositoryLanguage, GitHubSyncLog\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass PublicGitHubSync:\n    \"\"\"Sync public GitHub repositories without authentication\"\"\"\n    \n    def __init__(self):\n        self.base_url = \"https://api.github.com\"\n        self.session = requests.Session()\n        self.session.headers.update({\n            'Accept': 'application/vnd.github.v3+json',\n            'User-Agent': 'Portfolio-Sync/1.0'\n        })\n    \n    def sync_public_repositories(self, username: str) -> tuple[bool, str, int]:\n        \"\"\"\n        Sync public repositories for a username without authentication\n        \"\"\"\n        with app.app_context():\n            sync_log = GitHubSyncLog()\n            sync_log.username = username\n            sync_log.status = 'running'\n            sync_log.started_at = datetime.utcnow()\n            db.session.add(sync_log)\n            db.session.commit()\n            \n            try:\n                logger.info(f\"Sincronizando repositórios públicos para: {username}\")\n                \n                # Get public repositories\n                repositories = self._get_public_repositories(username)\n                \n                if not repositories:\n                    self._update_sync_log(sync_log, 'success', None, 0)\n                    return True, f\"Nenhum repositório público encontrado para {username}\", 0\n                \n                synced_count = 0\n                errors = []\n                \n                for repo_data in repositories:\n                    try:\n                        if self._sync_repository(username, repo_data):\n                            synced_count += 1\n                    except Exception as e:\n                        error_msg = f\"Erro ao sincronizar {repo_data.get('name', 'unknown')}: {str(e)}\"\n                        errors.append(error_msg)\n                        logger.error(error_msg)\n                \n                # Update sync log\n                if errors and synced_count == 0:\n                    status = 'error'\n                    message = f\"Falha ao sincronizar repositórios: {'; '.join(errors[:3])}\"\n                elif errors:\n                    status = 'partial'\n                    message = f\"Sincronizados {synced_count}/{len(repositories)} repositórios\"\n                else:\n                    status = 'success'\n                    message = f\"Sincronizados {synced_count} repositórios com sucesso\"\n                \n                self._update_sync_log(sync_log, status, message if errors else None, synced_count)\n                \n                logger.info(f\"Sincronização concluída: {message}\")\n                return status != 'error', message, synced_count\n                \n            except Exception as e:\n                error_msg = f\"Erro durante sincronização: {str(e)}\"\n                self._update_sync_log(sync_log, 'error', error_msg, 0)\n                logger.error(error_msg)\n                return False, error_msg, 0\n    \n    def _get_public_repositories(self, username: str) -> list:\n        \"\"\"Get public repositories for a user\"\"\"\n        repositories = []\n        page = 1\n        per_page = 100\n        \n        while True:\n            try:\n                response = self.session.get(\n                    f\"{self.base_url}/users/{username}/repos\",\n                    params={\n                        'per_page': per_page,\n                        'page': page,\n                        'sort': 'updated',\n                        'direction': 'desc',\n                        'type': 'public'  # Only public repositories\n                    }\n                )\n                response.raise_for_status()\n                page_repos = response.json()\n                \n                if not page_repos:\n                    break\n                \n                repositories.extend(page_repos)\n                \n                if len(page_repos) < per_page:\n                    break\n                \n                page += 1\n                \n            except requests.RequestException as e:\n                logger.error(f\"Erro ao buscar repositórios: {e}\")\n                break\n        \n        logger.info(f\"Encontrados {len(repositories)} repositórios públicos\")\n        return repositories\n    \n    def _sync_repository(self, username: str, repo_data: dict) -> bool:\n        \"\"\"Sync a single repository\"\"\"\n        try:\n            github_id = repo_data['id']\n            \n            # Check if repository exists\n            existing_repo = GitHubRepository.query.filter_by(github_id=github_id).first()\n            \n            if existing_repo:\n                repository = existing_repo\n                logger.debug(f\"Atualizando repositório: {repo_data['name']}\")\n            else:\n                repository = GitHubRepository()\n                repository.github_id = github_id\n                db.session.add(repository)\n                logger.debug(f\"Criando repositório: {repo_data['name']}\")\n            \n            # Update repository fields\n            self._update_repository_from_data(repository, repo_data)\n            \n            # Get languages\n            self._sync_repository_languages(repository, username, repo_data['name'])\n            \n            db.session.commit()\n            return True\n            \n        except Exception as e:\n            db.session.rollback()\n            logger.error(f\"Erro ao sincronizar repositório {repo_data.get('name', 'unknown')}: {e}\")\n            return False\n    \n    def _update_repository_from_data(self, repository: GitHubRepository, repo_data: dict):\n        \"\"\"Update repository with GitHub data\"\"\"\n        repository.name = repo_data['name']\n        repository.full_name = repo_data['full_name']\n        repository.description = repo_data.get('description', '') or ''\n        repository.html_url = repo_data['html_url']\n        repository.homepage = repo_data.get('homepage')\n        repository.clone_url = repo_data.get('clone_url', '')\n        repository.ssh_url = repo_data.get('ssh_url', '')\n        repository.language = repo_data.get('language')\n        repository.stargazers_count = repo_data.get('stargazers_count', 0)\n        repository.watchers_count = repo_data.get('watchers_count', 0)\n        repository.forks_count = repo_data.get('forks_count', 0)\n        repository.size = repo_data.get('size', 0)\n        repository.default_branch = repo_data.get('default_branch', 'main')\n        repository.topics = json.dumps(repo_data.get('topics', []))\n        repository.is_fork = repo_data.get('fork', False)\n        repository.is_private = repo_data.get('private', False)\n        repository.has_issues = repo_data.get('has_issues', True)\n        repository.has_projects = repo_data.get('has_projects', True)\n        repository.has_wiki = repo_data.get('has_wiki', True)\n        repository.archived = repo_data.get('archived', False)\n        repository.disabled = repo_data.get('disabled', False)\n        \n        # Parse datetime fields\n        if repo_data.get('pushed_at'):\n            repository.pushed_at = datetime.fromisoformat(repo_data['pushed_at'].replace('Z', '+00:00'))\n        if repo_data.get('created_at'):\n            repository.created_at_github = datetime.fromisoformat(repo_data['created_at'].replace('Z', '+00:00'))\n        if repo_data.get('updated_at'):\n            repository.updated_at_github = datetime.fromisoformat(repo_data['updated_at'].replace('Z', '+00:00'))\n        \n        repository.last_sync_at = datetime.utcnow()\n    \n    def _sync_repository_languages(self, repository: GitHubRepository, owner: str, repo_name: str):\n        \"\"\"Get repository languages (public API)\"\"\"\n        try:\n            response = self.session.get(f\"{self.base_url}/repos/{owner}/{repo_name}/languages\")\n            response.raise_for_status()\n            languages_data = response.json()\n            \n            if not languages_data:\n                return\n            \n            # Clear existing languages\n            GitHubRepositoryLanguage.query.filter_by(repository_id=repository.id).delete()\n            \n            # Calculate total bytes\n            total_bytes = sum(languages_data.values())\n            \n            # Add new languages\n            for language, bytes_count in languages_data.items():\n                percentage = (bytes_count / total_bytes * 100) if total_bytes > 0 else 0\n                \n                lang_record = GitHubRepositoryLanguage()\n                lang_record.repository_id = repository.id\n                lang_record.language = language\n                lang_record.bytes_count = bytes_count\n                lang_record.percentage = percentage\n                db.session.add(lang_record)\n            \n        except Exception as e:\n            logger.warning(f\"Erro ao buscar linguagens para {repo_name}: {e}\")\n    \n    def _update_sync_log(self, sync_log: GitHubSyncLog, status: str, error_message: str, repositories_synced: int):\n        \"\"\"Update sync log\"\"\"\n        sync_log.status = status\n        sync_log.error_message = error_message\n        sync_log.repositories_synced = repositories_synced\n        sync_log.completed_at = datetime.utcnow()\n        db.session.commit()\n\ndef sync_user_public_repos(username: str):\n    \"\"\"Convenience function to sync public repos\"\"\"\n    sync_service = PublicGitHubSync()\n    return sync_service.sync_public_repositories(username)\n\nif __name__ == \"__main__\":\n    import sys\n    \n    if len(sys.argv) != 2:\n        print(\"Uso: python github_public_sync.py <username>\")\n        print(\"Exemplo: python github_public_sync.py octocat\")\n        sys.exit(1)\n    \n    username = sys.argv[1]\n    success, message, count = sync_user_public_repos(username)\n    \n    if success:\n        print(f\"✅ {message}\")\n    else:\n        print(f\"❌ {message}\")\n        sys.exit(1)\n","size_bytes":10125},"github_replit_sync.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nGitHub sync using Replit's GitHub integration\n\"\"\"\nimport os\nimport sys\nimport json\nimport requests\nimport logging\nfrom datetime import datetime\nfrom app import app, db\nfrom models import GitHubRepository, GitHubRepositoryLanguage, GitHubSyncLog\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass ReplitGitHubClient:\n    \"\"\"GitHub client using Replit's connector integration\"\"\"\n    \n    def __init__(self):\n        self.base_url = \"https://api.github.com\"\n        self.session = requests.Session()\n        self._access_token = None\n    \n    def _get_replit_github_token(self):\n        \"\"\"Get GitHub access token from Replit connector\"\"\"\n        # Try environment variables that might be set by the Replit connector\n        token_candidates = [\n            os.environ.get('GITHUB_TOKEN'),\n            os.environ.get('GITHUB_ACCESS_TOKEN'),\n            os.environ.get('CONNECTOR_GITHUB_TOKEN'),\n            os.environ.get('REPLIT_GITHUB_TOKEN')\n        ]\n        \n        for token in token_candidates:\n            if token:\n                logger.info(f\"Found GitHub token from environment\")\n                return token\n        \n        logger.error(\"No GitHub token found in environment variables\")\n        return None\n    \n    def get_authenticated_user(self):\n        \"\"\"Get the authenticated GitHub user\"\"\"\n        token = self._get_replit_github_token()\n        if not token:\n            return None\n        \n        try:\n            response = self.session.get(\n                f\"{self.base_url}/user\",\n                headers={\n                    'Authorization': f'token {token}',\n                    'Accept': 'application/vnd.github.v3+json',\n                    'User-Agent': 'ReplitPortfolio/1.0'\n                }\n            )\n            response.raise_for_status()\n            return response.json()\n        except Exception as e:\n            logger.error(f\"Error getting authenticated user: {e}\")\n            return None\n    \n    def get_user_repositories(self, username):\n        \"\"\"Get repositories for a user\"\"\"\n        token = self._get_replit_github_token()\n        if not token:\n            return []\n        \n        try:\n            repositories = []\n            page = 1\n            per_page = 100\n            \n            while True:\n                response = self.session.get(\n                    f\"{self.base_url}/users/{username}/repos\",\n                    headers={\n                        'Authorization': f'token {token}',\n                        'Accept': 'application/vnd.github.v3+json',\n                        'User-Agent': 'ReplitPortfolio/1.0'\n                    },\n                    params={\n                        'per_page': per_page,\n                        'page': page,\n                        'sort': 'updated',\n                        'direction': 'desc'\n                    }\n                )\n                response.raise_for_status()\n                page_repos = response.json()\n                \n                if not page_repos:\n                    break\n                \n                repositories.extend(page_repos)\n                \n                if len(page_repos) < per_page:\n                    break\n                \n                page += 1\n            \n            logger.info(f\"Fetched {len(repositories)} repositories for {username}\")\n            return repositories\n            \n        except Exception as e:\n            logger.error(f\"Error fetching repositories: {e}\")\n            return []\n    \n    def get_repository_languages(self, owner, repo):\n        \"\"\"Get languages for a repository\"\"\"\n        token = self._get_replit_github_token()\n        if not token:\n            return {}\n        \n        try:\n            response = self.session.get(\n                f\"{self.base_url}/repos/{owner}/{repo}/languages\",\n                headers={\n                    'Authorization': f'token {token}',\n                    'Accept': 'application/vnd.github.v3+json',\n                    'User-Agent': 'ReplitPortfolio/1.0'\n                }\n            )\n            response.raise_for_status()\n            return response.json()\n        except Exception as e:\n            logger.warning(f\"Error fetching languages for {owner}/{repo}: {e}\")\n            return {}\n\ndef sync_repositories():\n    \"\"\"Sync GitHub repositories using Replit's integration\"\"\"\n    with app.app_context():\n        try:\n            client = ReplitGitHubClient()\n            \n            # Get authenticated user info\n            user_info = client.get_authenticated_user()\n            if not user_info:\n                logger.error(\"Failed to get authenticated user - check GitHub connection\")\n                return False\n            \n            username = user_info.get('login')\n            logger.info(f\"Syncing repositories for user: {username}\")\n            \n            # Create sync log\n            sync_log = GitHubSyncLog()\n            sync_log.username = username\n            sync_log.status = 'running'\n            sync_log.started_at = datetime.utcnow()\n            db.session.add(sync_log)\n            db.session.commit()\n            \n            # Get repositories\n            repositories = client.get_user_repositories(username)\n            if not repositories:\n                sync_log.status = 'success'\n                sync_log.repositories_synced = 0\n                sync_log.completed_at = datetime.utcnow()\n                db.session.commit()\n                logger.info(\"No repositories found\")\n                return True\n            \n            synced_count = 0\n            errors = []\n            \n            for repo_data in repositories:\n                try:\n                    if sync_repository(client, username, repo_data):\n                        synced_count += 1\n                except Exception as e:\n                    error_msg = f\"Error syncing {repo_data.get('name', 'unknown')}: {str(e)}\"\n                    errors.append(error_msg)\n                    logger.error(error_msg)\n            \n            # Update sync log\n            sync_log.repositories_synced = synced_count\n            sync_log.completed_at = datetime.utcnow()\n            \n            if errors and synced_count == 0:\n                sync_log.status = 'error'\n                sync_log.error_message = f\"Failed to sync any repositories: {'; '.join(errors[:3])}\"\n            elif errors:\n                sync_log.status = 'partial' \n                sync_log.error_message = f\"Some errors occurred: {'; '.join(errors[:3])}\"\n            else:\n                sync_log.status = 'success'\n            \n            db.session.commit()\n            \n            logger.info(f\"Sync completed: {synced_count}/{len(repositories)} repositories synced\")\n            return True\n            \n        except Exception as e:\n            logger.error(f\"Sync failed: {e}\")\n            return False\n\ndef sync_repository(client, username, repo_data):\n    \"\"\"Sync a single repository\"\"\"\n    try:\n        github_id = repo_data['id']\n        \n        # Check if repository exists\n        existing_repo = GitHubRepository.query.filter_by(github_id=github_id).first()\n        \n        if existing_repo:\n            repository = existing_repo\n            logger.debug(f\"Updating existing repository: {repo_data['name']}\")\n        else:\n            repository = GitHubRepository()\n            repository.github_id = github_id\n            db.session.add(repository)\n            logger.debug(f\"Creating new repository: {repo_data['name']}\")\n        \n        # Update repository fields\n        repository.name = repo_data['name']\n        repository.full_name = repo_data['full_name']\n        repository.description = repo_data.get('description', '')\n        repository.html_url = repo_data['html_url']\n        repository.homepage = repo_data.get('homepage')\n        repository.clone_url = repo_data['clone_url']\n        repository.ssh_url = repo_data['ssh_url']\n        repository.language = repo_data.get('language')\n        repository.stargazers_count = repo_data.get('stargazers_count', 0)\n        repository.watchers_count = repo_data.get('watchers_count', 0)\n        repository.forks_count = repo_data.get('forks_count', 0)\n        repository.size = repo_data.get('size', 0)\n        repository.default_branch = repo_data.get('default_branch', 'main')\n        repository.topics = json.dumps(repo_data.get('topics', []))\n        repository.is_fork = repo_data.get('fork', False)\n        repository.is_private = repo_data.get('private', False)\n        repository.has_issues = repo_data.get('has_issues', True)\n        repository.has_projects = repo_data.get('has_projects', True)\n        repository.has_wiki = repo_data.get('has_wiki', True)\n        repository.archived = repo_data.get('archived', False)\n        repository.disabled = repo_data.get('disabled', False)\n        \n        # Parse datetime fields\n        if repo_data.get('pushed_at'):\n            repository.pushed_at = datetime.fromisoformat(repo_data['pushed_at'].replace('Z', '+00:00'))\n        if repo_data.get('created_at'):\n            repository.created_at_github = datetime.fromisoformat(repo_data['created_at'].replace('Z', '+00:00'))\n        if repo_data.get('updated_at'):\n            repository.updated_at_github = datetime.fromisoformat(repo_data['updated_at'].replace('Z', '+00:00'))\n        \n        repository.last_sync_at = datetime.utcnow()\n        \n        # Sync languages\n        languages_data = client.get_repository_languages(username, repo_data['name'])\n        if languages_data:\n            # Clear existing languages\n            GitHubRepositoryLanguage.query.filter_by(repository_id=repository.id).delete()\n            \n            # Calculate total bytes\n            total_bytes = sum(languages_data.values())\n            \n            # Add new languages\n            for language, bytes_count in languages_data.items():\n                percentage = (bytes_count / total_bytes * 100) if total_bytes > 0 else 0\n                \n                lang_record = GitHubRepositoryLanguage()\n                lang_record.repository_id = repository.id\n                lang_record.language = language\n                lang_record.bytes_count = bytes_count\n                lang_record.percentage = percentage\n                db.session.add(lang_record)\n        \n        db.session.commit()\n        return True\n        \n    except Exception as e:\n        db.session.rollback()\n        logger.error(f\"Error syncing repository {repo_data.get('name', 'unknown')}: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    success = sync_repositories()\n    sys.exit(0 if success else 1)","size_bytes":10655},"setup_automatic_github_sync.py":{"content":"\n#!/usr/bin/env python3\n\"\"\"\nSetup automatic GitHub synchronization without manual login\n\"\"\"\nimport os\nimport sys\nimport logging\nfrom app import app, db\nfrom github_sync import GitHubSyncService\nfrom models import GitHubCredentials\nfrom crypto_utils import crypto_manager\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef setup_github_token():\n    \"\"\"\n    Configure GitHub token for automatic sync\n    \n    Para usar este script:\n    1. Vá para https://github.com/settings/tokens\n    2. Clique em \"Generate new token (classic)\"\n    3. Selecione as permissões: repo, user:read\n    4. Configure o token como variável de ambiente GITHUB_TOKEN\n    \"\"\"\n    \n    github_token = os.environ.get('GITHUB_TOKEN')\n    if not github_token:\n        print(\"\\n\" + \"=\"*60)\n        print(\"CONFIGURAÇÃO DO TOKEN GITHUB\")\n        print(\"=\"*60)\n        print(\"1. Acesse: https://github.com/settings/tokens\")\n        print(\"2. Clique em 'Generate new token (classic)'\")\n        print(\"3. Dê um nome para o token (ex: 'Portfolio Sync')\")\n        print(\"4. Selecione as permissões:\")\n        print(\"   - repo (acesso completo aos repositórios)\")\n        print(\"   - user:read (ler informações do usuário)\")\n        print(\"5. Clique em 'Generate token'\")\n        print(\"6. Configure o token nas variáveis de ambiente do Replit\")\n        print(\"   - Vá em Secrets (🔒) no painel lateral\")\n        print(\"   - Adicione: GITHUB_TOKEN = seu_token_aqui\")\n        print(\"=\"*60)\n        return False\n    \n    try:\n        with app.app_context():\n            # Test the token\n            sync_service = GitHubSyncService()\n            \n            # Temporarily set the token for testing\n            sync_service.client._access_token = github_token\n            \n            # Get user info to validate token\n            user_info = sync_service.client.get_authenticated_user()\n            if not user_info:\n                logger.error(\"Token inválido ou sem permissões adequadas\")\n                return False\n            \n            username = user_info.get('login')\n            logger.info(f\"Token validado para usuário: {username}\")\n            \n            # Store credentials in database\n            existing = GitHubCredentials.query.filter_by(username=username).first()\n            if existing:\n                existing.is_active = False\n            \n            if crypto_manager is None:\n                logger.error(\"Cannot store credentials - encryption not available\")\n                return False\n            encrypted_token = crypto_manager.encrypt(github_token)\n            credentials = GitHubCredentials(\n                username=username,\n                encrypted_token=encrypted_token,\n                is_active=True\n            )\n            \n            db.session.add(credentials)\n            db.session.commit()\n            \n            logger.info(f\"Credenciais armazenadas para {username}\")\n            return True\n            \n    except Exception as e:\n        logger.error(f\"Erro ao configurar token: {e}\")\n        return False\n\ndef run_initial_sync():\n    \"\"\"Run initial GitHub sync\"\"\"\n    try:\n        with app.app_context():\n            credentials = GitHubCredentials.query.filter_by(is_active=True).first()\n            if not credentials:\n                logger.error(\"Nenhuma credencial encontrada\")\n                return False\n            \n            username = credentials.username\n            sync_service = GitHubSyncService()\n            \n            logger.info(f\"Iniciando sincronização para {username}\")\n            success, message, repos_synced = sync_service.sync_user_repositories(username)\n            \n            if success:\n                logger.info(f\"Sincronização concluída: {repos_synced} repositórios\")\n                return True\n            else:\n                logger.error(f\"Falha na sincronização: {message}\")\n                return False\n                \n    except Exception as e:\n        logger.error(f\"Erro durante sincronização: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    print(\"Configurando sincronização automática do GitHub...\")\n    \n    if setup_github_token():\n        print(\"✅ Token configurado com sucesso!\")\n        \n        if run_initial_sync():\n            print(\"✅ Sincronização inicial concluída!\")\n            print(\"\\nPróximos passos:\")\n            print(\"1. Os repositórios serão sincronizados automaticamente\")\n            print(\"2. Configure um cron job para sincronização periódica\")\n            print(\"3. Acesse /admin/github-sync para gerenciar a sincronização\")\n        else:\n            print(\"❌ Falha na sincronização inicial\")\n    else:\n        print(\"❌ Falha na configuração do token\")\n        sys.exit(1)\n","size_bytes":4774},"setup_github_token.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nScript para configurar o token GitHub para sincronização automática\n\"\"\"\nimport os\nimport sys\nfrom app import app, db\nfrom models import GitHubCredentials\nfrom crypto_utils import encrypt_data\n\ndef setup_github_token():\n    \"\"\"Configure GitHub token for automatic synchronization\"\"\"\n\n    # Get token from environment variable\n    github_token = os.environ.get('GITHUB_TOKEN')\n\n    if not github_token:\n        print(\"INFO: GITHUB_TOKEN não encontrado nas variáveis de ambiente\")\n        print(\"INFO: Configure o token em Secrets no Replit:\")\n        print(\"INFO: 1. Vá para a aba Secrets (🔒)\")\n        print(\"INFO: 2. Adicione: GITHUB_TOKEN = seu_token_github\")\n        print(\"INFO: Pule esta configuração se não quiser sincronização automática\")\n        return True  # Return True to not block the system\n\n    try:\n        with app.app_context():\n            # Check if credentials already exist\n            existing_creds = GitHubCredentials.query.filter_by(is_active=True).first()\n\n            if existing_creds:\n                print(\"INFO: Credenciais GitHub já configuradas, atualizando...\")\n                # Update existing credentials\n                existing_creds.encrypted_token = encrypt_data(github_token)\n                existing_creds.username = 'cDorth'  # Update with your GitHub username\n            else:\n                print(\"INFO: Configurando novas credenciais GitHub...\")\n                # Create new credentials\n                credentials = GitHubCredentials()\n                credentials.username = 'cDorth'  # Replace with your GitHub username\n                credentials.encrypted_token = encrypt_data(github_token)\n                credentials.is_active = True\n                db.session.add(credentials)\n\n            db.session.commit()\n            print(\"✅ GitHub token configurado com sucesso!\")\n            print(\"✅ Sistema de sincronização automática ativo\")\n\n            # Test the connection\n            from github_sync import GitHubSyncService\n            sync_service = GitHubSyncService()\n\n            if sync_service.client.validate_connection():\n                print(\"✅ Conexão com GitHub validada com sucesso!\")\n                return True\n            else:\n                print(\"⚠️  Falha na validação da conexão com GitHub\")\n                return True  # Don't block the system\n\n    except Exception as e:\n        print(f\"⚠️  Aviso durante configuração: {e}\")\n        return True  # Don't block the system\n\nif __name__ == \"__main__\":\n    success = setup_github_token()\n    print(\"\\n✅ Sistema inicializado. Configure GITHUB_TOKEN para sincronização automática.\")\n    sys.exit(0)","size_bytes":2696},"sync_github_replit.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nGitHub sync using Replit's connector API\n\"\"\"\nimport os\nimport sys\nimport json\nimport requests\nimport logging\nfrom datetime import datetime\nfrom app import app, db\nfrom models import GitHubRepository, GitHubRepositoryLanguage, GitHubSyncLog\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef get_github_token_from_replit():\n    \"\"\"Get GitHub access token from Replit connector API\"\"\"\n    try:\n        hostname = os.environ.get('CONNECTORS_HOSTNAME', 'connectors.replit.com')\n        \n        # Get auth token for Replit API\n        x_replit_token = None\n        if os.environ.get('REPL_IDENTITY'):\n            x_replit_token = 'repl ' + os.environ.get('REPL_IDENTITY')\n        elif os.environ.get('WEB_REPL_RENEWAL'):\n            x_replit_token = 'depl ' + os.environ.get('WEB_REPL_RENEWAL')\n        elif os.environ.get('REPL_IDENTITY_KEY'):\n            x_replit_token = 'repl ' + os.environ.get('REPL_IDENTITY_KEY')\n        \n        if not x_replit_token:\n            logger.error('No Replit identity token found')\n            return None\n        \n        # Call Replit connector API\n        url = f'https://{hostname}/api/v2/connection?include_secrets=true&connector_names=github'\n        headers = {\n            'Accept': 'application/json',\n            'X_REPLIT_TOKEN': x_replit_token\n        }\n        \n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        \n        data = response.json()\n        \n        if not data.get('items') or len(data['items']) == 0:\n            logger.error('No GitHub connection found in Replit')\n            return None\n        \n        connection = data['items'][0]\n        settings = connection.get('settings', {})\n        \n        # Try different possible locations for the access token\n        access_token = (\n            settings.get('access_token') or\n            settings.get('oauth', {}).get('credentials', {}).get('access_token') or\n            settings.get('token')\n        )\n        \n        if not access_token:\n            logger.error('No access token found in GitHub connection')\n            return None\n        \n        logger.info('Successfully retrieved GitHub token from Replit connector')\n        return access_token\n        \n    except Exception as e:\n        logger.error(f'Error getting GitHub token from Replit: {e}')\n        return None\n\ndef sync_repositories():\n    \"\"\"Sync GitHub repositories using Replit's connector\"\"\"\n    with app.app_context():\n        try:\n            # Get GitHub token from Replit\n            access_token = get_github_token_from_replit()\n            if not access_token:\n                logger.error(\"Failed to get GitHub access token from Replit\")\n                return False\n            \n            # Setup requests session\n            session = requests.Session()\n            session.headers.update({\n                'Authorization': f'token {access_token}',\n                'Accept': 'application/vnd.github.v3+json',\n                'User-Agent': 'ReplitPortfolio/1.0'\n            })\n            \n            # Get authenticated user info\n            response = session.get('https://api.github.com/user')\n            response.raise_for_status()\n            user_info = response.json()\n            \n            username = user_info.get('login')\n            logger.info(f'Syncing repositories for user: {username}')\n            \n            # Create sync log\n            sync_log = GitHubSyncLog()\n            sync_log.username = username\n            sync_log.status = 'running'\n            sync_log.started_at = datetime.utcnow()\n            db.session.add(sync_log)\n            db.session.commit()\n            \n            # Get repositories\n            repositories = []\n            page = 1\n            per_page = 100\n            \n            while True:\n                response = session.get(\n                    f'https://api.github.com/users/{username}/repos',\n                    params={\n                        'per_page': per_page,\n                        'page': page,\n                        'sort': 'updated',\n                        'direction': 'desc'\n                    }\n                )\n                response.raise_for_status()\n                page_repos = response.json()\n                \n                if not page_repos:\n                    break\n                \n                repositories.extend(page_repos)\n                \n                if len(page_repos) < per_page:\n                    break\n                \n                page += 1\n            \n            logger.info(f'Found {len(repositories)} repositories')\n            \n            if not repositories:\n                sync_log.status = 'success'\n                sync_log.repositories_synced = 0\n                sync_log.completed_at = datetime.utcnow()\n                db.session.commit()\n                logger.info(\"No repositories found\")\n                return True\n            \n            synced_count = 0\n            errors = []\n            \n            for repo_data in repositories:\n                try:\n                    if sync_repository(session, username, repo_data):\n                        synced_count += 1\n                except Exception as e:\n                    error_msg = f\"Error syncing {repo_data.get('name', 'unknown')}: {str(e)}\"\n                    errors.append(error_msg)\n                    logger.error(error_msg)\n            \n            # Update sync log\n            sync_log.repositories_synced = synced_count\n            sync_log.completed_at = datetime.utcnow()\n            \n            if errors and synced_count == 0:\n                sync_log.status = 'error'\n                sync_log.error_message = f\"Failed to sync any repositories: {'; '.join(errors[:3])}\"\n            elif errors:\n                sync_log.status = 'partial' \n                sync_log.error_message = f\"Some errors occurred: {'; '.join(errors[:3])}\"\n            else:\n                sync_log.status = 'success'\n            \n            db.session.commit()\n            \n            logger.info(f\"Sync completed: {synced_count}/{len(repositories)} repositories synced\")\n            return True\n            \n        except Exception as e:\n            logger.error(f\"Sync failed: {e}\")\n            if 'sync_log' in locals():\n                sync_log.status = 'error'\n                sync_log.error_message = str(e)\n                sync_log.completed_at = datetime.utcnow()\n                db.session.commit()\n            return False\n\ndef sync_repository(session, username, repo_data):\n    \"\"\"Sync a single repository\"\"\"\n    try:\n        github_id = repo_data['id']\n        \n        # Check if repository exists\n        existing_repo = GitHubRepository.query.filter_by(github_id=github_id).first()\n        \n        if existing_repo:\n            repository = existing_repo\n            logger.debug(f\"Updating existing repository: {repo_data['name']}\")\n        else:\n            repository = GitHubRepository()\n            repository.github_id = github_id\n            db.session.add(repository)\n            logger.debug(f\"Creating new repository: {repo_data['name']}\")\n        \n        # Update repository fields\n        repository.name = repo_data['name']\n        repository.full_name = repo_data['full_name']\n        repository.description = repo_data.get('description', '') or ''\n        repository.html_url = repo_data['html_url']\n        repository.homepage = repo_data.get('homepage')\n        repository.clone_url = repo_data.get('clone_url', '')\n        repository.ssh_url = repo_data.get('ssh_url', '')\n        repository.language = repo_data.get('language')\n        repository.stargazers_count = repo_data.get('stargazers_count', 0)\n        repository.watchers_count = repo_data.get('watchers_count', 0)\n        repository.forks_count = repo_data.get('forks_count', 0)\n        repository.size = repo_data.get('size', 0)\n        repository.default_branch = repo_data.get('default_branch', 'main')\n        repository.topics = json.dumps(repo_data.get('topics', []))\n        repository.is_fork = repo_data.get('fork', False)\n        repository.is_private = repo_data.get('private', False)\n        repository.has_issues = repo_data.get('has_issues', True)\n        repository.has_projects = repo_data.get('has_projects', True)\n        repository.has_wiki = repo_data.get('has_wiki', True)\n        repository.archived = repo_data.get('archived', False)\n        repository.disabled = repo_data.get('disabled', False)\n        \n        # Parse datetime fields\n        if repo_data.get('pushed_at'):\n            repository.pushed_at = datetime.fromisoformat(repo_data['pushed_at'].replace('Z', '+00:00'))\n        if repo_data.get('created_at'):\n            repository.created_at_github = datetime.fromisoformat(repo_data['created_at'].replace('Z', '+00:00'))\n        if repo_data.get('updated_at'):\n            repository.updated_at_github = datetime.fromisoformat(repo_data['updated_at'].replace('Z', '+00:00'))\n        \n        repository.last_sync_at = datetime.utcnow()\n        \n        # Commit repository first to get ID\n        db.session.commit()\n        \n        # Sync languages after repository is committed\n        try:\n            lang_response = session.get(f\"https://api.github.com/repos/{username}/{repo_data['name']}/languages\")\n            if lang_response.status_code == 200:\n                languages_data = lang_response.json()\n                \n                if languages_data:\n                    # Clear existing languages for this repository\n                    GitHubRepositoryLanguage.query.filter_by(repository_id=repository.id).delete()\n                    \n                    # Calculate total bytes\n                    total_bytes = sum(languages_data.values())\n                    \n                    # Add new languages\n                    for language, bytes_count in languages_data.items():\n                        percentage = (bytes_count / total_bytes * 100) if total_bytes > 0 else 0\n                        \n                        lang_record = GitHubRepositoryLanguage()\n                        lang_record.repository_id = repository.id\n                        lang_record.language = language\n                        lang_record.bytes_count = bytes_count\n                        lang_record.percentage = percentage\n                        db.session.add(lang_record)\n                    \n                    # Commit languages\n                    db.session.commit()\n        except Exception as e:\n            logger.warning(f\"Error syncing languages for {repo_data['name']}: {e}\")\n            db.session.rollback()\n        return True\n        \n    except Exception as e:\n        db.session.rollback()\n        logger.error(f\"Error syncing repository {repo_data.get('name', 'unknown')}: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    success = sync_repositories()\n    sys.exit(0 if success else 1)","size_bytes":10950}},"version":1}